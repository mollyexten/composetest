"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeTestConfigAsParamsForParsedUrlProtocol = exports.encodeTestConfigAsParamsForParsedUrlProtocol = exports.b64DecodeUnicodeNodeOrBrowser = exports.b64EncodeUnicodeInNode = exports.b64DecodeUnicodeInNode = exports.isNode = exports.TEST_CONFIG_URL_PARAM_KEY = void 0;
const querystring_1 = __importDefault(require("querystring"));
const domUtil_1 = require("../domUtil");
const MAX_PARSED_URL_PROTOCOL_PARAMS_LENGTH = 2000;
exports.TEST_CONFIG_URL_PARAM_KEY = 'scriptConfig';
function isNode() {
    var _a;
    return !!((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node);
}
exports.isNode = isNode;
function b64DecodeUnicodeInNode(encoded) {
    return Buffer.from(encoded, 'base64').toString();
}
exports.b64DecodeUnicodeInNode = b64DecodeUnicodeInNode;
function b64EncodeUnicodeInNode(text) {
    return Buffer.from(text).toString('base64');
}
exports.b64EncodeUnicodeInNode = b64EncodeUnicodeInNode;
function b64DecodeUnicodeNodeOrBrowser(encoded) {
    if (isNode()) {
        return b64DecodeUnicodeInNode(encoded);
    }
    return (0, domUtil_1.b64DecodeUnicode)(encoded);
}
exports.b64DecodeUnicodeNodeOrBrowser = b64DecodeUnicodeNodeOrBrowser;
function encodeTestConfigAsParamsForParsedUrlProtocol(testConfig, b64Encode) {
    const encoded = querystring_1.default.stringify({
        ...testConfig,
        [exports.TEST_CONFIG_URL_PARAM_KEY]: b64Encode(JSON.stringify(testConfig)),
    });
    if (encoded.length > MAX_PARSED_URL_PROTOCOL_PARAMS_LENGTH) {
        throw new Error('Test parameters exceed size limit. Please use the mabl Desktop App to create or edit tests.');
    }
    return encoded;
}
exports.encodeTestConfigAsParamsForParsedUrlProtocol = encodeTestConfigAsParamsForParsedUrlProtocol;
function decodeTestConfigAsParamsForParsedUrlProtocol(encoded, b64Decode, useV2) {
    const params = querystring_1.default.parse(encoded);
    if (useV2 && params[exports.TEST_CONFIG_URL_PARAM_KEY]) {
        return JSON.parse(b64Decode(params[exports.TEST_CONFIG_URL_PARAM_KEY]));
    }
    delete params[exports.TEST_CONFIG_URL_PARAM_KEY];
    return params;
}
exports.decodeTestConfigAsParamsForParsedUrlProtocol = decodeTestConfigAsParamsForParsedUrlProtocol;
