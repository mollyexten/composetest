"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isIfConditionStep = exports.IfConditionStep = void 0;
const ConditionAction_1 = require("../actions/ConditionAction");
const GetVariableValue_1 = require("../actions/GetVariableValue");
const AssertStep_1 = require("./AssertStep");
const FindAction_1 = require("../actions/FindAction");
const MablAction_1 = require("../MablAction");
const MablStep_1 = require("../MablStep");
const ExtractAction_1 = require("../actions/ExtractAction");
const domUtil_1 = require("../../domUtil");
const JavaScriptAction_1 = require("../actions/JavaScriptAction");
const GetUrlAction_1 = require("../actions/GetUrlAction");
const ConditionDescriptor_1 = require("../types/ConditionDescriptor");
const GetViewportAction_1 = require("../actions/GetViewportAction");
const MobileFindAction_1 = require("../mobile/steps/actions/MobileFindAction");
class IfConditionStep extends MablStep_1.MablStep {
    constructor(name, args, actions) {
        super(name, args, actions, 'conditional_if');
        const candidatePrimaryActions = actions.filter((action) => action instanceof FindAction_1.FindAction ||
            action instanceof MobileFindAction_1.MobileFindAction ||
            action instanceof GetVariableValue_1.GetVariableValue ||
            action instanceof GetUrlAction_1.GetUrlAction ||
            action instanceof JavaScriptAction_1.JavaScriptAction);
        if (candidatePrimaryActions.length > 1) {
            throw new Error(`Too many primary actions. Only one primary action is allowed of: Find, Get Url, Get Variable, or Javascript actions`);
        }
        this.conditionAction = actions.find((action) => action instanceof ConditionAction_1.ConditionAction);
        this.extractAction = actions.find((action) => action instanceof ExtractAction_1.ExtractAction);
        if (candidatePrimaryActions[0] === undefined) {
            if (this.conditionAction !== undefined &&
                (0, ConditionDescriptor_1.isAIPromptCondition)(this.conditionAction.conditionDescriptor)) {
                this.primaryAction = new GetViewportAction_1.GetViewportAction();
            }
            else {
                throw new Error(`At least one primary action is required: Find, Get Url, Get Variable, or Javascript action.`);
            }
        }
        else {
            this.primaryAction = candidatePrimaryActions[0];
        }
    }
    getStepName() {
        return 'If';
    }
    toStepDescriptor() {
        var _a, _b;
        const conditionDescriptor = this.conditionAction !== undefined
            ? (_a = this.conditionAction) === null || _a === void 0 ? void 0 : _a.conditionDescriptor
            : { conditionType: ConditionDescriptor_1.ConditionType.Truthy };
        const find = this.primaryAction.toDescriptor();
        return {
            find,
            extractDescriptor: (_b = this.extractAction) === null || _b === void 0 ? void 0 : _b.extractDescriptor,
            conditionDescriptor,
            onFailure: AssertStep_1.OnFailure.FailImmediately,
            descriptorToActionMap: new Map().set(find, this.primaryAction),
            actionCode: this.actionCode,
        };
    }
    getFormattedStep(_fullLocatorsOn) {
        const result = {};
        result[this.getStepName()] = this.toYamlConditionDetails();
        if (this.stepId()) {
            result[this.getStepName()].id = this.stepId();
        }
        return result;
    }
    toYamlConditionDetails() {
        const details = {
            ...super.annotationsAsYml(),
        };
        if (this.conditionAction) {
            details.condition =
                ConditionDescriptor_1.AssertionConditionFieldToStepName[(0, ConditionDescriptor_1.getAssertionConditionFieldFromDescriptor)(this.conditionAction.conditionDescriptor)];
            details.conditionValue = (0, ConditionDescriptor_1.getOptionalComparatorValue)(this.conditionAction.conditionDescriptor);
            const optionalConditionOptions = (0, ConditionDescriptor_1.getOptionalConditionOptions)(this.conditionAction.conditionDescriptor);
            details.conditionOptions = this.conditionAction.hasOptionsAtInstantiation
                ? optionalConditionOptions
                : undefined;
            if (this.conditionAction.conditionDescriptor.conditionType ===
                ConditionDescriptor_1.ConditionType.AIPrompt) {
                details.aiPrompt = {
                    userPrompt: this.conditionAction.conditionDescriptor.userPrompt,
                    metaPrompt: this.conditionAction.conditionDescriptor.metaPrompt,
                    criteria: this.conditionAction.conditionDescriptor.criteria,
                };
            }
        }
        if (this.primaryAction instanceof GetVariableValue_1.GetVariableValue) {
            details.variableName = this.substituteMablscriptVariable(this.primaryAction.variable);
        }
        if (this.primaryAction instanceof JavaScriptAction_1.JavaScriptAction) {
            const jsYaml = JavaScriptAction_1.JavaScriptAction.toYamlFromJavaScriptDescriptor(this.primaryAction.javaScript);
            if (jsYaml.snippet) {
                details.snippet = jsYaml.snippet;
                details.snippet.parameterOverrides = jsYaml.parameterOverrides;
            }
            else {
                details.snippet = jsYaml;
            }
        }
        if (this.extractAction) {
            details.attribute = this.extractAction.extractionAttribute;
        }
        if (this.primaryAction instanceof FindAction_1.FindAction ||
            this.primaryAction instanceof MobileFindAction_1.MobileFindAction) {
            const find = this.primaryAction.toDescriptor();
            details.find = find;
        }
        return details;
    }
    static getActionsFromYamlForCondition(stepArgs) {
        var _a, _b, _c, _d, _e;
        const actions = [];
        if (stepArgs.find) {
            if ((0, domUtil_1.isMobileFindDescriptor)(stepArgs.find)) {
                actions.push(MobileFindAction_1.MobileFindAction.fromDescriptor(stepArgs.find));
            }
            else {
                if (stepArgs.find.findType === domUtil_1.FindType.FIND_ONE) {
                    actions.push(FindAction_1.FindAction.findActionFromStepArgs({
                        selector: stepArgs.find.findTarget.selector,
                        findOptions: stepArgs.find.findOptions,
                    }));
                }
                else {
                    actions.push(FindAction_1.FindAction.findActionFromStepArgs(stepArgs.find.findTarget));
                }
            }
        }
        else if (stepArgs.selector) {
            if ((0, domUtil_1.isMobileFindSpecification)(stepArgs)) {
                const findAction = MobileFindAction_1.MobileFindAction.fromDescriptor({
                    findTarget: { selector: stepArgs.selector },
                    findType: domUtil_1.FindType.FIND_ONE,
                });
                actions.push(findAction);
            }
            else {
                const findAction = FindAction_1.FindAction.findActionFromStepArgs(stepArgs);
                actions.push(findAction);
            }
        }
        if (stepArgs.attribute) {
            const extractArgs = stepArgs.metadata
                ? [stepArgs.attribute, stepArgs.metadata]
                : [stepArgs.attribute];
            actions.push(new ExtractAction_1.ExtractAction('extract_attribute', extractArgs));
        }
        if (stepArgs.variableName) {
            actions.push(new GetVariableValue_1.GetVariableValue('get_variable_value', [
                `{{@${stepArgs.variableName}}}`,
            ]));
        }
        if (stepArgs.snippet) {
            actions.push(JavaScriptAction_1.JavaScriptAction.fromYaml(stepArgs.snippet));
        }
        if (stepArgs.condition) {
            const conditionType = ConditionDescriptor_1.AssertionStepNameToField[stepArgs.condition];
            if (conditionType === 'ai_prompt') {
                actions.push(new ConditionAction_1.ConditionAction(this.getConditionActionNameForConditionType(conditionType), [
                    (_b = (_a = stepArgs.aiPrompt) === null || _a === void 0 ? void 0 : _a.userPrompt) !== null && _b !== void 0 ? _b : stepArgs.userPrompt,
                    {
                        metaPrompt: (_d = (_c = stepArgs.aiPrompt) === null || _c === void 0 ? void 0 : _c.metaPrompt) !== null && _d !== void 0 ? _d : stepArgs.metaPrompt,
                        criteria: (_e = stepArgs.aiPrompt) === null || _e === void 0 ? void 0 : _e.criteria,
                    },
                ]));
            }
            else {
                actions.push(new ConditionAction_1.ConditionAction(this.getConditionActionNameForConditionType(conditionType), [
                    ConditionDescriptor_1.AssertionStepNameToField[stepArgs.condition],
                    stepArgs.conditionValue,
                    stepArgs.conditionOptions,
                ]));
            }
        }
        return actions;
    }
    static getConditionActionNameForConditionType(conditionType) {
        if (conditionType === 'present' || conditionType === 'not_present') {
            return 'evaluate_presence';
        }
        else if (conditionType === 'ai_prompt') {
            return 'evaluate_ai_prompt';
        }
        return 'evaluate_condition';
    }
    static fromYaml(_stepName, stepArgs) {
        const actions = IfConditionStep.getActionsFromYamlForCondition(stepArgs);
        const step = new IfConditionStep('conditional_if', [], actions);
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        return `${this.actions.reduce((mablscript, action) => `${mablscript}${action.toMablscript()}.`, '')}conditional_if()`;
    }
    getInputVariables() {
        var _a, _b, _c, _d;
        return (0, MablAction_1.distinctStrings)([
            ...this.primaryAction.getInputVariables(),
            ...((_b = (_a = this.conditionAction) === null || _a === void 0 ? void 0 : _a.getInputVariables()) !== null && _b !== void 0 ? _b : []),
            ...((_d = (_c = this.extractAction) === null || _c === void 0 ? void 0 : _c.getInputVariables()) !== null && _d !== void 0 ? _d : []),
        ]);
    }
}
exports.IfConditionStep = IfConditionStep;
IfConditionStep.stepName = 'conditional_if';
IfConditionStep.mablScriptStepNames = [IfConditionStep.stepName];
IfConditionStep.yamlMablScriptNames = ['If'];
function isIfConditionStep(value) {
    return ((value === null || value === void 0 ? void 0 : value.getStepName) &&
        (value === null || value === void 0 ? void 0 : value.getStepName()) === IfConditionStep.yamlMablScriptNames[0]);
}
exports.isIfConditionStep = isIfConditionStep;
