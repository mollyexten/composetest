"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = exports.detectFormat = void 0;
const common_1 = require("@plist/common");
const binary_parse_1 = require("@plist/binary.parse");
const xml_parse_1 = require("@plist/xml.parse");
const openstep_parse_1 = require("@plist/openstep.parse");
const IS_ASCII = /^[\u0000-\u007f]*$/;
const DECODER = new TextDecoder('utf-8');
const detectFormat = (input) => {
    if (typeof input === 'string') {
        if (input.startsWith(common_1.HEADER_BINARY)) {
            return common_1.PlistFormat.BINARY;
        }
        const trim = input.substring(0, 16).replace(/[\s\t\n\r]+/g, '');
        if (trim.startsWith('<?xml') || trim.startsWith('<plist')) {
            return common_1.PlistFormat.XML;
        }
        if (input.trimStart().startsWith(common_1.HEADER_OPENSTEP_UTF8) ||
            IS_ASCII.test(trim)) {
            return common_1.PlistFormat.OPENSTEP;
        }
        throw new Error('Unknown format');
    }
    else {
        const headerBytes = input.slice(0, common_1.HEADER_BINARY.length);
        if (DECODER.decode(headerBytes) === common_1.HEADER_BINARY) {
            return common_1.PlistFormat.BINARY;
        }
        return (0, exports.detectFormat)(DECODER.decode(input.slice(0, 16)));
    }
};
exports.detectFormat = detectFormat;
const parse = (input) => {
    const format = (0, exports.detectFormat)(input);
    switch (format) {
        case common_1.PlistFormat.BINARY:
            if (typeof input === 'string') {
                throw new Error('Binary plists must be passed as ArrayBuffer');
            }
            return (0, binary_parse_1.parse)(input);
        case common_1.PlistFormat.XML:
            if (input instanceof ArrayBuffer) {
                return (0, xml_parse_1.parse)(DECODER.decode(input));
            }
            return (0, xml_parse_1.parse)(input);
        case common_1.PlistFormat.OPENSTEP:
            if (input instanceof ArrayBuffer) {
                return (0, openstep_parse_1.parse)(DECODER.decode(input));
            }
            return (0, openstep_parse_1.parse)(input);
    }
    throw new Error('Unsupported format');
};
exports.parse = parse;
