"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
class MablReporter {
    constructor(newman, reporterOptions, _options) {
        var _a, _b;
        this.initialStepNumber = (_a = reporterOptions.initialStepNumber) !== null && _a !== void 0 ? _a : 1;
        this.stepNumber = this.initialStepNumber;
        if (!reporterOptions.logger) {
            console.warn('No logger was passed to the reporter.');
        }
        const logger = (_b = reporterOptions.logger) !== null && _b !== void 0 ? _b : {
            debug: console.debug,
            info: console.log,
            warning: console.warn,
            error: console.error,
        };
        newman.on('start', () => {
            if (reporterOptions.flowName) {
                logger.info('');
                logger.info(`Running Flow: ${reporterOptions.flowName}`);
            }
        });
        newman.on('beforeIteration', (err, event) => {
            var _a;
            this.stepNumber = this.initialStepNumber;
            if (err || event.cursor.cycles <= 1) {
                return;
            }
            logger.info(`Iteration ${event.cursor.iteration + 1}/${(_a = event === null || event === void 0 ? void 0 : event.cursor) === null || _a === void 0 ? void 0 : _a.cycles}`);
        });
        newman.on('beforeItem', (err, event) => {
            var _a, _b, _c, _d;
            if (err) {
                logger.warning(indent(`${err.message}`));
                return;
            }
            const itemSummary = ((_a = event === null || event === void 0 ? void 0 : event.item) === null || _a === void 0 ? void 0 : _a.name) ||
                `${(_b = event.item.request) === null || _b === void 0 ? void 0 : _b.method} ${(_c = event.item.request) === null || _c === void 0 ? void 0 : _c.url.toString()}`;
            logger.info('');
            logger.info(`${(_d = reporterOptions.stepNumberPrefix) !== null && _d !== void 0 ? _d : ''}${this.stepNumber}. ${itemSummary}`);
            this.stepNumber++;
        });
        newman.on('request', (err, event) => {
            let requestInfo = '';
            if (event && event.request) {
                requestInfo = `${event.request.method} ${event.request.url.toString()}`;
            }
            if (err) {
                logger.warning(indent(`${requestInfo} [errored]`));
                logger.warning(indent(`${err.message}`));
                return;
            }
            if (!((event === null || event === void 0 ? void 0 : event.request) && (event === null || event === void 0 ? void 0 : event.response))) {
                logger.error(indent(`${requestInfo} [errored]`));
                logger.error(indent(`Internal error! Could not read response data.`));
                return;
            }
            logger.info(indent(`${requestInfo} [${event.response.code} ${event.response.status}, ${event.response.responseSize}B, ${event.response.responseTime}ms]`, 3));
        });
        newman.on('assertion', (err, event) => {
            var passed = !err;
            const symbolOk = 'âœ“';
            const symbolFail = '-';
            if (event.skipped) {
                logger.info(`   -  [skipped] ${event.assertion}`);
                return;
            }
            if (passed) {
                logger.info(indent(`${symbolOk} ${event.assertion}`, 3));
            }
            else {
                logger.info(indent(`${symbolFail} ${event.assertion} [FAILED]`, 3), {
                    color: 'red',
                });
                logger.info(indent(err.message, 5), { color: 'red' });
            }
        });
        newman.on('console', (_err, event) => {
            let message = event.messages.map((m) => util.inspect(m)).join(' ');
            logger.info(`   | ${message}`);
        });
    }
}
function indent(s, size = 4) {
    return `${' '.repeat(size)}${s}`;
}
module.exports = MablReporter;
