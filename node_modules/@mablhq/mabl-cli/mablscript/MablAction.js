"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertObjectToMablscriptArgs = exports.distinctStrings = exports.parseArgument = exports.argumentIsMablVariable = exports.MablAction = void 0;
const domUtil_1 = require("../domUtil");
const MablSymbol_1 = require("./MablSymbol");
class MablAction {
    constructor(name, actionCode, args) {
        this.name = name;
        this.args = args;
        this.actionCode = actionCode;
    }
    getActionArgs() {
        return this.args ? this.args : [];
    }
    setActionSourceIndexInStep(index) {
        this.actionSourceIndexInStep = index;
    }
    getActionSourceIndexInStep() {
        return this.actionSourceIndexInStep;
    }
    getActionCode() {
        return this.actionCode;
    }
    subVariable(argument) {
        if (argumentIsMablVariable(argument)) {
            const matches = argument.match(MablSymbol_1.SINGLE_VARIABLE_PATTERN_REGEX);
            if (matches) {
                return matches[1];
            }
        }
        return `${argument}`;
    }
    getActionName() {
        return this.name;
    }
    toMablscript() {
        return '';
    }
    static findUniqueVariableReferencesInValue(value) {
        const variableReferences = [];
        if ((0, MablSymbol_1.isMablSymbolObject)(value)) {
            return [value.name];
        }
        else if (typeof value === 'string') {
            variableReferences.push(...(0, domUtil_1.findVariables)(value));
        }
        else if (Array.isArray(value)) {
            variableReferences.push(...value.flatMap((v) => MablAction.findUniqueVariableReferencesInValue(v)));
        }
        else if (typeof value === 'object') {
            variableReferences.push(...Object.values(value).flatMap((v) => MablAction.findUniqueVariableReferencesInValue(v)));
        }
        else {
            return [];
        }
        return distinctStrings(variableReferences);
    }
    getInputVariables() {
        return [];
    }
    getOutputVariables() {
        return [];
    }
}
exports.MablAction = MablAction;
function argumentIsMablVariable(argument) {
    return MablSymbol_1.SINGLE_VARIABLE_PATTERN_REGEX.test(argument);
}
exports.argumentIsMablVariable = argumentIsMablVariable;
function parseArgument(arg) {
    var _a;
    if (typeof arg === 'string') {
        const name = (_a = MablSymbol_1.SINGLE_VARIABLE_PATTERN_REGEX.exec(arg)) === null || _a === void 0 ? void 0 : _a[1];
        if (name) {
            return new MablSymbol_1.MablSymbol(name);
        }
    }
    return arg;
}
exports.parseArgument = parseArgument;
function distinctStrings(values) {
    return Array.from(new Set(values));
}
exports.distinctStrings = distinctStrings;
function convertObjectToMablscriptArgs(objectArgs) {
    const mablArgs = Object.keys(objectArgs)
        .sort()
        .filter((key) => (objectArgs === null || objectArgs === void 0 ? void 0 : objectArgs[key]) !== undefined)
        .map((key) => {
        switch (typeof objectArgs[key]) {
            case 'object':
                return `${key}: ${convertObjectToMablscriptArgs(objectArgs[key])}`;
            case 'boolean':
            case 'number':
                return `${key}: ${objectArgs[key]}`;
            default:
                return `${key}: "${(0, domUtil_1.escapeMablscriptString)(objectArgs[key])}"`;
        }
    });
    return `{${mablArgs.join(', ')}}`;
}
exports.convertObjectToMablscriptArgs = convertObjectToMablscriptArgs;
