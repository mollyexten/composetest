"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HoverStep = void 0;
const FindAction_1 = require("../actions/FindAction");
const domUtil_1 = require("../../domUtil");
const MablStepWithFindAction_1 = require("../MablStepWithFindAction");
class HoverStep extends MablStepWithFindAction_1.MablStepWithFindAction {
    constructor(name, args, actions) {
        super(name, args, actions, 'hover');
        this.validate();
        this.findAction = this.actions[0];
    }
    validate() {
        if (this.actions.length !== 1 && !(this.actions[0] instanceof FindAction_1.FindAction)) {
            throw new Error('Hover steps should have exactly on sub action and it should be a find');
        }
    }
    getStepName() {
        return 'Hover';
    }
    toStepDescriptor() {
        const find = this.findAction.toDescriptor();
        switch (find.findType) {
            case domUtil_1.FindType.FIND_FIRST:
            case domUtil_1.FindType.FIND_LAST:
            case domUtil_1.FindType.FIND_ANY:
            case domUtil_1.FindType.FIND_ONE:
                return {
                    find,
                    descriptorToActionMap: new Map().set(find, this.findAction),
                    actionCode: this.actionCode,
                };
            default:
                throw new Error(`Error generating step descriptor for ${this.getStepName()}: Unexpected find type ${find.findType}`);
        }
    }
    getFormattedStep(_fullLocatorsOn) {
        const step = {
            Hover: {
                ...super.annotationsAsYml(),
                ...this.findAction.toYaml(),
            },
        };
        if (this.stepId()) {
            step.Hover.id = this.stepId();
        }
        return step;
    }
    static fromYaml(_stepName, stepArgs) {
        const step = new HoverStep('hover', [], [FindAction_1.FindAction.findActionFromStepArgs(stepArgs)]);
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        return `${this.findAction.toMablscript()}.hover()`;
    }
    getInputVariables() {
        return this.findAction.getInputVariables();
    }
}
exports.HoverStep = HoverStep;
HoverStep.mablScriptStepNames = ['hover'];
HoverStep.yamlMablScriptNames = ['Hover'];
