"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMablStepV1 = exports.buildObjectString = exports.buildSourceRepresentationOfObject = exports.MablStep = void 0;
const domUtil_1 = require("../domUtil");
const MablAction_1 = require("./MablAction");
const MablSymbol_1 = require("./MablSymbol");
const fast_json_stable_stringify_1 = __importDefault(require("fast-json-stable-stringify"));
class MablStep extends MablAction_1.MablAction {
    constructor(name, args, actions, actionCode) {
        super(name, actionCode, args);
        this.stepVersion = 1;
        this.actions = actions;
    }
    getStepVersion() {
        return this.stepVersion;
    }
    setStepId(id) {
        this.id = id;
    }
    stepId() {
        return this.id;
    }
    canContinueOnFailure() {
        return false;
    }
    canFailAtEnd() {
        return false;
    }
    getStepName() {
        return 'UnimplementedStep';
    }
    isDisabled() {
        return !!this.disabled;
    }
    setDisabled(disabled) {
        this.disabled = disabled;
    }
    setAnnotation(annotation) {
        this.annotation = annotation;
    }
    getAnnotation() {
        return this.annotation;
    }
    setDescription(description) {
        this.description = description;
    }
    getDescription() {
        return this.description;
    }
    setStepSourceIndexInFlow(index) {
        this.stepSourceIndexInFlow = index;
    }
    getStepSourceIndexInFlow() {
        return this.stepSourceIndexInFlow;
    }
    getDescriptionForLogging() {
        var _a;
        return (((_a = this.annotation) === null || _a === void 0 ? void 0 : _a.description) || this.description || this.getStepName());
    }
    substituteMablscriptVariable(argument) {
        if ((0, MablSymbol_1.isMablSymbolObject)(argument)) {
            return argument.name;
        }
        if ((0, MablAction_1.argumentIsMablVariable)(argument)) {
            const matches = argument.match(MablSymbol_1.SINGLE_VARIABLE_PATTERN_REGEX);
            if (matches) {
                return matches[1];
            }
        }
        return `"${argument}"`;
    }
    toStepDescriptor(_fullLocatorsOn) {
        const formatted = {
            names: this.actions.map((action) => action.getActionName()),
        };
        formatted.names.push(this.getActionName());
        return formatted;
    }
    annotationsOnStep() {
        var _a, _b;
        return !!((_a = this.annotation) === null || _a === void 0 ? void 0 : _a.note) || !!((_b = this.annotation) === null || _b === void 0 ? void 0 : _b.description);
    }
    annotationsAsYml() {
        const result = {};
        if (this.annotationsOnStep()) {
            result.annotation = this.annotation;
        }
        if (this.description) {
            result.description = this.description;
        }
        if (this.isDisabled()) {
            result.disabled = this.isDisabled();
        }
        return result;
    }
    getFormattedStep(fullLocatorsOn) {
        const formatted = {};
        formatted[this.getStepName()] =
            this.annotationsAsYml();
        const { actionCode, ...stepDescriptor } = this.toStepDescriptor(fullLocatorsOn);
        Object.assign(formatted[this.getStepName()], stepDescriptor);
        if (this.stepId()) {
            formatted[this.getStepName()].id = this.stepId();
        }
        return formatted;
    }
    toMablscript() {
        return '';
    }
    toLineDiffFormat() {
        const lineDiffProperties = {
            annotation: this.annotation,
            disabled: this.isDisabled(),
            mablscript: this.toMablscript(),
        };
        return this.stringify(lineDiffProperties);
    }
    stringify(value) {
        return (0, fast_json_stable_stringify_1.default)(value);
    }
    static cloneAndRemoveUndefinedEntriesFromObject(obj) {
        const clone = {};
        Object.entries(obj).forEach(([key, value]) => {
            if (value !== undefined) {
                if (typeof value !== 'object' || Array.isArray(value)) {
                    clone[key] = value;
                }
                else {
                    clone[key] = MablStep.cloneAndRemoveUndefinedEntriesFromObject(value);
                }
            }
        });
        return clone;
    }
}
exports.MablStep = MablStep;
MablStep.mablScriptStepNames = ['mablStep'];
MablStep.yamlMablScriptNames = ['MablStep'];
function buildSourceRepresentationOfObject(object) {
    const stringedValues = Object.entries(object).map(([key, value]) => {
        if (Array.isArray(value)) {
            return `${key}: [${value
                .map((arrayVal) => buildSourceRepresentationOfObject(arrayVal))
                .join(', ')}]`;
        }
        else if (typeof value !== 'object') {
            if (typeof value === 'number') {
                return `${key}: ${value}`;
            }
            return `${key}: "${(0, domUtil_1.escapeMablscriptString)(value)}"`;
        }
        return `${key}: ${buildSourceRepresentationOfObject(value)}`;
    });
    return `{${stringedValues.join(', ')}}`;
}
exports.buildSourceRepresentationOfObject = buildSourceRepresentationOfObject;
function buildObjectString(objectString) {
    const final = [];
    Object.keys(objectString)
        .filter((key) => key !== 'value')
        .forEach((key) => {
        if (typeof objectString[key] === 'undefined') {
            return final;
        }
        if (typeof objectString[key] === 'string') {
            return final.push(`${key}: "${(0, domUtil_1.escapeMablscriptString)(objectString[key])}"`);
        }
        else if (typeof objectString[key] === 'number') {
            return final.push(`${key}: ${objectString[key]}`);
        }
        else if (Array.isArray(objectString[key])) {
            return final.push(`"${key}": [${objectString[key]
                .map((arrayVal) => `"${(0, domUtil_1.escapeMablscriptString)(arrayVal)}"`)
                .join(', ')}]`);
        }
        return final.push(`${key}: {${buildObjectString(objectString[key])}}`);
    });
    return final;
}
exports.buildObjectString = buildObjectString;
function isMablStepV1(value) {
    if (value === undefined || value === null) {
        return false;
    }
    const mablStep = value;
    return !!mablStep.getStepVersion && mablStep.getStepVersion() === 1;
}
exports.isMablStepV1 = isMablStepV1;
