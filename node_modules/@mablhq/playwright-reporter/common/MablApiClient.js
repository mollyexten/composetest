"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MablApiClient = exports.MABL_PROD_API_URL = void 0;
const axios_1 = __importDefault(require("axios"));
const AxiosUtils_1 = require("./AxiosUtils");
exports.MABL_PROD_API_URL = 'https://api.mabl.com';
/*
 * Mabl API Client.
 */
class MablApiClient {
    constructor(options) {
        var _a;
        this.options = options;
        this.apiUrl = (_a = options.apiUrl) !== null && _a !== void 0 ? _a : exports.MABL_PROD_API_URL;
        this.httpClient = options.httpClient;
        this.log = options.log;
        this.logError = options.logError;
    }
    createPlanRun(workspaceId, planName, executionId, executionSource) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.apiUrl}/planRuns/external`;
            try {
                const response = yield this.httpClient.post(url, {
                    workspace_id: workspaceId,
                    plan_ref_id: planName,
                    execution_ref_id: executionId,
                    execution_source: executionSource,
                });
                this.log('Posted plan run to mabl');
                const mablPlanRun = response.data;
                const id = mablPlanRun.id;
                this.log(`Plan run id: ${id}`);
                return id;
            }
            catch (error) {
                if (axios_1.default.isAxiosError(error)) {
                    const errorMessage = (0, AxiosUtils_1.getAxiosErrorMessage)(error);
                    this.logError(`Failed to post plan run to mabl: ${errorMessage} (${(_a = error.response) === null || _a === void 0 ? void 0 : _a.status})`);
                }
                else {
                    this.logError('Failed to post plan run to mabl');
                }
                return undefined;
            }
        });
    }
    postTestResultToMabl(testResult, executionSource) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.apiUrl}/testRun/external`;
            try {
                const response = yield this.httpClient.post(url, Object.assign(Object.assign({}, testResult), { execution_source: executionSource }));
                const mablTest = response.data;
                const id = mablTest.id;
                return id;
            }
            catch (error) {
                if (axios_1.default.isAxiosError(error)) {
                    const errorMessage = (0, AxiosUtils_1.getAxiosErrorMessage)(error);
                    this.logError(`Failed to post test result to mabl: ${errorMessage} (${(_a = error.response) === null || _a === void 0 ? void 0 : _a.status})`);
                }
                else {
                    this.logError('Failed to post test result to mabl');
                }
            }
        });
    }
    setExecutionOutputFile(testId, executionOutputFileUri) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.apiUrl}/journeyRuns/${testId}`;
            try {
                yield this.httpClient.patch(url, {
                    id: testId,
                    customer_log_uri: executionOutputFileUri,
                });
            }
            catch (error) {
                if (axios_1.default.isAxiosError(error)) {
                    const errorMessage = (0, AxiosUtils_1.getAxiosErrorMessage)(error);
                    console.error(`Failed to post execution output file to mabl: ${errorMessage} (${(_a = error.response) === null || _a === void 0 ? void 0 : _a.status})`);
                }
                else {
                    console.error('Failed to post execution output file to mabl');
                }
            }
        });
    }
    finalizePlanRun(planRunId, status) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const url = `${this.apiUrl}/planRuns/${planRunId}`;
                yield this.httpClient.patch(url, {
                    status: status,
                });
            }
            catch (error) {
                if (axios_1.default.isAxiosError(error)) {
                    const errorMessage = (0, AxiosUtils_1.getAxiosErrorMessage)(error);
                    console.error(`Failed to post execution output file to mabl: ${errorMessage} (${(_a = error.response) === null || _a === void 0 ? void 0 : _a.status})`);
                }
                else {
                    console.error('Failed to post execution output file to mabl');
                }
            }
        });
    }
}
exports.MablApiClient = MablApiClient;
