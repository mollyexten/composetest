"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setConfigFileProjectName = exports.setGlobalConfigEnv = exports.EnvOption = exports.ELECTRON_PROTOCOL = exports.SCRIPT_NAME = exports.OKTA_URL = exports.OKTA_CLIENT_ID = exports.LOCAL_TRAINER_PATH = exports.FIND_OVERRIDE_PATH = exports.EXTENSION_ID = exports.ENV = exports.DEBUG_EVENT_EMITTER = exports.CONSOLE_LOGGING_LEVEL = exports.CONF_FILE_VERSION = exports.CONF_FILE_PROJECT_NAME = exports.BASE_APP_URL = exports.BASE_API_URL = void 0;
const localEnv = __importStar(require("./local"));
const devEnv = __importStar(require("./dev"));
const prodEnv = __importStar(require("./prod"));
const defaultEnv = __importStar(require("./defaultEnv"));
exports.BASE_API_URL = defaultEnv.BASE_API_URL;
exports.BASE_APP_URL = defaultEnv.BASE_APP_URL;
exports.CONF_FILE_PROJECT_NAME = defaultEnv.CONF_FILE_PROJECT_NAME;
exports.CONF_FILE_VERSION = defaultEnv.CONF_FILE_VERSION;
exports.CONSOLE_LOGGING_LEVEL = defaultEnv.CONSOLE_LOGGING_LEVEL;
exports.DEBUG_EVENT_EMITTER = defaultEnv.DEBUG_EVENT_EMITTER;
exports.ENV = defaultEnv.ENV;
exports.EXTENSION_ID = defaultEnv.EXTENSION_ID;
exports.FIND_OVERRIDE_PATH = defaultEnv.FIND_OVERRIDE_PATH;
exports.LOCAL_TRAINER_PATH = defaultEnv.LOCAL_TRAINER_PATH;
exports.OKTA_CLIENT_ID = defaultEnv.OKTA_CLIENT_ID;
exports.OKTA_URL = defaultEnv.OKTA_URL;
exports.SCRIPT_NAME = defaultEnv.SCRIPT_NAME;
exports.ELECTRON_PROTOCOL = defaultEnv.ELECTRON_PROTOCOL;
var EnvOption;
(function (EnvOption) {
    EnvOption["dev"] = "dev";
    EnvOption["local"] = "local";
    EnvOption["prod"] = "prod";
})(EnvOption || (exports.EnvOption = EnvOption = {}));
const envMap = {
    local: localEnv,
    dev: devEnv,
    prod: prodEnv,
};
function setGlobalConfigEnv(env) {
    exports.BASE_API_URL = envMap[env].BASE_API_URL;
    exports.BASE_APP_URL = envMap[env].BASE_APP_URL;
    exports.CONF_FILE_PROJECT_NAME = envMap[env].CONF_FILE_PROJECT_NAME;
    exports.CONF_FILE_VERSION = envMap[env].CONF_FILE_VERSION;
    exports.CONSOLE_LOGGING_LEVEL = envMap[env].CONSOLE_LOGGING_LEVEL;
    exports.DEBUG_EVENT_EMITTER = envMap[env].DEBUG_EVENT_EMITTER;
    exports.ENV = envMap[env].ENV;
    exports.EXTENSION_ID = envMap[env].EXTENSION_ID;
    exports.LOCAL_TRAINER_PATH = envMap[env].LOCAL_TRAINER_PATH;
    exports.OKTA_CLIENT_ID = envMap[env].OKTA_CLIENT_ID;
    exports.OKTA_URL = envMap[env].OKTA_URL;
    exports.SCRIPT_NAME = envMap[env].SCRIPT_NAME;
    exports.ELECTRON_PROTOCOL = envMap[env].ELECTRON_PROTOCOL;
    exports.FIND_OVERRIDE_PATH = envMap[env].FIND_OVERRIDE_PATH;
}
exports.setGlobalConfigEnv = setGlobalConfigEnv;
function setConfigFileProjectName(projectName) {
    exports.CONF_FILE_PROJECT_NAME = projectName;
}
exports.setConfigFileProjectName = setConfigFileProjectName;
