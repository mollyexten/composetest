"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.proxyUrlToPortConfig = exports.axiosProxyConfig = exports.currentProxyConfig = exports.setTestExecutionProxyUrl = void 0;
const cliConfigProvider_1 = require("../providers/cliConfigProvider");
const hpagent_1 = require("hpagent");
const httpUtil_1 = require("./httpUtil");
const https_1 = require("https");
let testExecutionProxyUrl;
function setTestExecutionProxyUrl(url) {
    testExecutionProxyUrl = url;
}
exports.setTestExecutionProxyUrl = setTestExecutionProxyUrl;
async function currentProxyConfig(mode = 'mabl') {
    const httpConfig = (await cliConfigProvider_1.CliConfigProvider.getCliConfig()).http;
    return axiosProxyConfig(mode === 'test' ? httpConfig === null || httpConfig === void 0 ? void 0 : httpConfig.test : httpConfig === null || httpConfig === void 0 ? void 0 : httpConfig.mabl);
}
exports.currentProxyConfig = currentProxyConfig;
function axiosProxyConfig(httpConfig) {
    var _a;
    const config = {
        headers: {
            [httpUtil_1.USER_AGENT_HEADER]: httpUtil_1.USER_AGENT,
        },
    };
    let { proxyType, sslVerify } = httpConfig;
    if (testExecutionProxyUrl) {
        sslVerify = false;
        proxyType = 'current';
    }
    if (!sslVerify) {
        config.httpsAgent = new https_1.Agent({
            rejectUnauthorized: false,
        });
    }
    if (testExecutionProxyUrl || ((_a = httpConfig.proxyHost) === null || _a === void 0 ? void 0 : _a.href)) {
        config.proxy = proxyUrlToPortConfig((testExecutionProxyUrl !== null && testExecutionProxyUrl !== void 0 ? testExecutionProxyUrl : httpConfig.proxyHost));
    }
    return maybeGetModifiedAxiosConfigForHttpProxy(config, sslVerify, proxyType);
}
exports.axiosProxyConfig = axiosProxyConfig;
function escapeRegexDots(input) {
    return input.replace('.', '\\.');
}
function proxyUrlToPortConfig(proxyUrl) {
    const defaultPort = proxyUrl.protocol === 'https:' ? 443 : 80;
    const maybePortNumberMatch = proxyUrl.port;
    const portNumber = maybePortNumberMatch
        ? parseInt(maybePortNumberMatch)
        : defaultPort;
    let hostname = proxyUrl.hostname +
        (proxyUrl.search ? proxyUrl.pathname + proxyUrl.search : proxyUrl.pathname);
    hostname = hostname.replace(new RegExp(`${escapeRegexDots(proxyUrl.hostname)}/$`), proxyUrl.hostname);
    const config = {
        host: hostname,
        port: portNumber,
        protocol: proxyUrl.protocol,
    };
    if (proxyUrl.username || proxyUrl.password) {
        config.auth = {
            username: proxyUrl.username,
            password: proxyUrl.password,
        };
    }
    return config;
}
exports.proxyUrlToPortConfig = proxyUrlToPortConfig;
function maybeGetModifiedAxiosConfigForHttpProxy(config, sslVerify, _proxyType) {
    var _a, _b;
    if (config.proxy &&
        (((_a = config.proxy) === null || _a === void 0 ? void 0 : _a.protocol) === 'http:' || ((_b = config.proxy) === null || _b === void 0 ? void 0 : _b.protocol) === 'http')) {
        const newConfig = {
            ...config,
        };
        newConfig.proxy = false;
        const authConfig = config.proxy.auth;
        let proxyString = 'http://';
        if (authConfig) {
            proxyString += `${authConfig.username}:${authConfig.password}@`;
        }
        proxyString += `${config.proxy.host}:${config.proxy.port}`;
        const rejectUnauthorized = sslVerify === true;
        const httpAgentConfig = {
            keepAlive: true,
            keepAliveMsecs: 1000,
            maxSockets: 256,
            maxFreeSockets: 256,
            proxy: proxyString,
            proxyRequestOptions: {
                rejectUnauthorized,
            },
        };
        const httpsAgentConfig = {
            ...httpAgentConfig,
            rejectUnauthorized,
        };
        newConfig.httpsAgent = new hpagent_1.HttpsProxyAgent(httpsAgentConfig);
        newConfig.httpAgent = new hpagent_1.HttpProxyAgent(httpAgentConfig);
        return newConfig;
    }
    return config;
}
