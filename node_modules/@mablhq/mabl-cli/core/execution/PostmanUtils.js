"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitizeExportedVariables = exports.exportVariables = exports.convertVariablesSummaryToPostmanFormat = void 0;
const VariableUtils_1 = require("./VariableUtils");
const domUtil_1 = require("../../domUtil");
function convertVariablesSummaryToPostmanFormat(summary) {
    const effectiveVariables = { ...summary.effective };
    const values = Object.keys(effectiveVariables).map((key) => ({
        key,
        value: effectiveVariables[key],
    }));
    return {
        values,
    };
}
exports.convertVariablesSummaryToPostmanFormat = convertVariablesSummaryToPostmanFormat;
function exportVariables(postmanResult) {
    const variablePrecedence = [
        postmanResult === null || postmanResult === void 0 ? void 0 : postmanResult.globals.values,
        postmanResult === null || postmanResult === void 0 ? void 0 : postmanResult.collection.variables,
        postmanResult === null || postmanResult === void 0 ? void 0 : postmanResult.environment.values,
    ].filter((variables) => !!variables);
    const exportedVariables = {};
    variablePrecedence
        .flatMap((variableList) => variableList.all())
        .filter((variable) => { var _a; return Boolean(variable.key) && !((_a = variable.key) === null || _a === void 0 ? void 0 : _a.startsWith(VariableUtils_1.FLOW_NAMESPACE)); })
        .forEach((variable) => (exportedVariables[variable.key] = variable.value));
    return exportedVariables;
}
exports.exportVariables = exportVariables;
function sanitizeExportedVariables(variables) {
    const normalized = {};
    if (variables) {
        return normalizeExportedVariables(filterExportedVariables(variables));
    }
    return normalized;
}
exports.sanitizeExportedVariables = sanitizeExportedVariables;
function normalizeExportedVariables(variables) {
    const normalized = {};
    Object.keys(variables).forEach((name) => {
        normalized[(0, VariableUtils_1.addUserNamespace)(name)] = variables[name];
    });
    return normalized;
}
function filterExportedVariables(variables) {
    const filtered = {};
    Object.keys(variables)
        .filter((name) => (0, domUtil_1.isValidUserVariableName)(name))
        .forEach((name) => {
        filtered[name] = variables[name];
    });
    return filtered;
}
