"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findNodeModulesDirectories = exports.findNodeModule = exports.findDirectory = exports.findResource = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
function findResource(pathInResource, resourcesPathOverride) {
    const pathsToCheck = [];
    if (resourcesPathOverride) {
        pathsToCheck.push(`${resourcesPathOverride}/${pathInResource}`);
    }
    pathsToCheck.push(`${__dirname}/../../resources/${pathInResource}`);
    pathsToCheck.push(`${__dirname}/../resources/${pathInResource}`);
    const foundPath = pathsToCheck
        .map((p) => path.normalize(path.resolve(p)))
        .find(safeExistSync);
    if (foundPath) {
        return foundPath;
    }
    return path.normalize(pathsToCheck[0]);
}
exports.findResource = findResource;
function safeExistSync(path) {
    try {
        return fs.existsSync(path);
    }
    catch {
        return false;
    }
}
function findDirectory(pathFromBase) {
    const unpackedPath = path.normalize(path.resolve(`${__dirname}/../../${pathFromBase}`));
    const packedPath = path.normalize(path.resolve(`${__dirname}/../${pathFromBase}`));
    if (fs.existsSync(unpackedPath)) {
        return unpackedPath;
    }
    return packedPath;
}
exports.findDirectory = findDirectory;
function findNodeModule(module, startingPath) {
    const nodeMods = findNodeModulesDirectories(startingPath);
    const modulePath = nodeMods.find((directory) => fs.existsSync(path.normalize(path.join(directory, 'node_modules', module))));
    if (!modulePath) {
        throw new Error(`Could not find the ${module} package`);
    }
    return path.join(modulePath, 'node_modules', module);
}
exports.findNodeModule = findNodeModule;
function findNodeModulesDirectories(startingPath = __dirname) {
    let currentPath = startingPath;
    let lastPath;
    const nodeModulesPaths = [];
    while (currentPath !== lastPath) {
        if (checkForNodeModules(currentPath)) {
            nodeModulesPaths.push(currentPath);
        }
        lastPath = currentPath;
        currentPath = path.dirname(currentPath);
    }
    if (nodeModulesPaths.length > 0) {
        return nodeModulesPaths;
    }
    throw new Error('Unable to find any node_modules in application path');
}
exports.findNodeModulesDirectories = findNodeModulesDirectories;
function checkForNodeModules(thePath) {
    return fs.existsSync(path.join(thePath, 'node_modules'));
}
