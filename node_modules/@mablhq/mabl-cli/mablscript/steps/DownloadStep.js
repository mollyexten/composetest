"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DownloadStep = void 0;
const MablStep_1 = require("../MablStep");
const MablAction_1 = require("../MablAction");
const AwaitDownloadAction_1 = require("../actions/AwaitDownloadAction");
const AwaitPDFDownloadAction_1 = require("../actions/AwaitPDFDownloadAction");
const domUtil_1 = require("../../domUtil");
class DownloadStep extends MablStep_1.MablStep {
    constructor(name, args, actions) {
        var _a;
        super(name, args, actions, 'assert_download');
        this.validate();
        this.fileAttributes = ((_a = this.getActionArgs()[0]) !== null && _a !== void 0 ? _a : {});
        this.awaitDownloadAction = this.actions[0];
    }
    validate() {
        if (this.actions.length !== 1 &&
            !(this.actions[0] instanceof AwaitDownloadAction_1.AwaitDownloadAction)) {
            throw new Error('Download step should contain an await download sub action');
        }
    }
    getStepName() {
        if (this.isPDFDownload()) {
            return 'DownloadPdfStep';
        }
        return 'DownloadStep';
    }
    isPDFDownload() {
        return this.awaitDownloadAction instanceof AwaitPDFDownloadAction_1.AwaitPDFDownloadAction;
    }
    toStepDescriptor() {
        const formatted = {};
        if (this.isPDFDownload()) {
            formatted.tabIdentifier = this.actions[0].pdfUUID;
        }
        if (this.fileAttributes.file_name !== undefined) {
            formatted.fileName = this.fileAttributes.file_name;
        }
        if (this.fileAttributes.file_mime_type !== undefined) {
            formatted.mimeType = this.fileAttributes.file_mime_type;
        }
        if (this.fileAttributes.file_md5 !== undefined) {
            formatted.fileMd5 = this.fileAttributes.file_md5;
        }
        if (this.fileAttributes.file_sha256 !== undefined) {
            formatted.fileSha256 = this.fileAttributes.file_sha256;
        }
        if (this.fileAttributes.file_size_bytes !== undefined) {
            formatted.sizeBytes = this.fileAttributes.file_size_bytes;
        }
        if (this.fileAttributes.file_size_bytes_max !== undefined) {
            formatted.sizeBytesMax = this.fileAttributes.file_size_bytes_max;
        }
        if (this.fileAttributes.file_size_bytes_min !== undefined) {
            formatted.sizeBytesMin = this.fileAttributes.file_size_bytes_min;
        }
        return formatted;
    }
    static fromYaml(_stepName, stepArgs) {
        const fileAttributes = {};
        const assertDownload = stepArgs;
        fileAttributes.file_name = assertDownload.fileName;
        fileAttributes.file_mime_type = assertDownload.mimeType;
        fileAttributes.file_md5 = assertDownload.fileMd5;
        fileAttributes.file_sha256 = assertDownload.fileSha256;
        fileAttributes.file_size_bytes = assertDownload.sizeBytes;
        fileAttributes.file_size_bytes_max = assertDownload.sizeBytesMax;
        fileAttributes.file_size_bytes_min = assertDownload.sizeBytesMin;
        let awaitDownloadAction;
        if (assertDownload.tabIdentifier) {
            awaitDownloadAction = new AwaitPDFDownloadAction_1.AwaitPDFDownloadAction('await_pdf', [
                { uuid: assertDownload.tabIdentifier },
            ]);
        }
        else {
            awaitDownloadAction = new AwaitDownloadAction_1.AwaitDownloadAction('await_download', []);
        }
        const step = new DownloadStep('assert_download', [fileAttributes], [awaitDownloadAction]);
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        const mablArgs = (0, domUtil_1.buildStepArgumentString)({
            params: { ...this.fileAttributes },
            legacy: true,
        });
        return `${this.awaitDownloadAction.toMablscript()}.assert_download(${mablArgs ? mablArgs : ''})`;
    }
    getInputVariables() {
        return MablAction_1.MablAction.findUniqueVariableReferencesInValue(this.fileAttributes);
    }
}
exports.DownloadStep = DownloadStep;
DownloadStep.mablScriptStepNames = ['assert_download'];
DownloadStep.yamlMablScriptNames = ['DownloadStep', 'DownloadPdfStep'];
