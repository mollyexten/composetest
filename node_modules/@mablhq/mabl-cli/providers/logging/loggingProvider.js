"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.LogLevel = void 0;
const winston = __importStar(require("winston"));
const winston_transport_1 = __importDefault(require("winston-transport"));
const defaultEnv_1 = require("../../env/defaultEnv");
const { MESSAGE } = require('triple-beam');
const stripAnsi = require('strip-ansi');
var LogLevel;
(function (LogLevel) {
    LogLevel["Debug"] = "debug";
    LogLevel["Error"] = "error";
    LogLevel["Info"] = "info";
    LogLevel["Warn"] = "warn";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
class CliTransport extends winston_transport_1.default {
    constructor(opts) {
        super(opts);
    }
    log(info, callback) {
        this.emit('logged', info);
        switch (info.level) {
            case LogLevel.Error:
                console.error(info[MESSAGE]);
                break;
            case LogLevel.Warn:
                console.warn(info[MESSAGE]);
                break;
            case LogLevel.Info:
            case LogLevel.Debug:
                console.log(info[MESSAGE]);
                break;
            default:
                break;
        }
        callback();
    }
}
exports.logger = winston.createLogger({
    level: defaultEnv_1.CONSOLE_LOGGING_LEVEL,
    format: winston.format.printf((info) => `${stripAnsi(info.message)}`),
    defaultMeta: { service: 'mabl-cli' },
    transports: [
        new CliTransport({
            format: winston.format.printf((info) => { var _a; return `${(_a = info.message) !== null && _a !== void 0 ? _a : info[MESSAGE]}`; }),
        }),
    ],
});
exports.logger.constructor.prototype.logNewLine = (level = LogLevel.Info) => {
    const emptyNewLine = '';
    switch (level) {
        case LogLevel.Error:
            exports.logger.error(emptyNewLine);
            break;
        case LogLevel.Warn:
            exports.logger.warn(emptyNewLine);
            break;
        case LogLevel.Debug:
        case LogLevel.Info:
        default:
            exports.logger.info(emptyNewLine);
            break;
    }
};
