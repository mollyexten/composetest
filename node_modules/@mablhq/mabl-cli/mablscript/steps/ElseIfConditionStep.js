"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isElseIfConditionStep = exports.ElseIfConditionStep = void 0;
const MablAction_1 = require("../MablAction");
const IfConditionStep_1 = require("./IfConditionStep");
class ElseIfConditionStep extends IfConditionStep_1.IfConditionStep {
    getStepName() {
        return 'ElseIf';
    }
    static fromYaml(_stepName, stepArgs) {
        const actions = [
            new MablAction_1.MablAction('conditional_else', 'conditional_else_if', []),
        ];
        actions.push(...IfConditionStep_1.IfConditionStep.getActionsFromYamlForCondition(stepArgs));
        const step = new ElseIfConditionStep('conditional_else_if', [], actions);
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        const actions = this.actions.reduce((mablscript, action) => `${mablscript}${action.toMablscript()}.`, '');
        return `conditional_else()${actions}conditional_else_if()`;
    }
}
exports.ElseIfConditionStep = ElseIfConditionStep;
ElseIfConditionStep.stepName = 'conditional_else_if';
ElseIfConditionStep.mablScriptStepNames = [ElseIfConditionStep.stepName];
ElseIfConditionStep.yamlMablScriptNames = ['ElseIf'];
function isElseIfConditionStep(value) {
    return ((value === null || value === void 0 ? void 0 : value.getStepName) &&
        (value === null || value === void 0 ? void 0 : value.getStepName()) === ElseIfConditionStep.yamlMablScriptNames[0]);
}
exports.isElseIfConditionStep = isElseIfConditionStep;
