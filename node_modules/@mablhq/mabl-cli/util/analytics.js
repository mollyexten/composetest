"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackMablTestsRunnerEvent = exports.trackExternalToolEvent = exports.trackCliEvent = void 0;
const env_1 = require("../env/env");
const cliConfigProvider_1 = require("../providers/cliConfigProvider");
const axiosProxyConfig_1 = require("../http/axiosProxyConfig");
const pureUtil_1 = require("./pureUtil");
const os = __importStar(require("os"));
const types_1 = require("../api/types");
const loggingProvider_1 = require("../providers/logging/loggingProvider");
const configKeys_1 = require("../commands/config/config_cmds/configKeys");
const Analytics = require('analytics-node');
function getCliUserId(workspaceId) {
    return `cliKey-${workspaceId !== null && workspaceId !== void 0 ? workspaceId : 'unknown'}`;
}
async function getTrackingInfo() {
    var _a, _b, _c, _d, _e;
    const config = await cliConfigProvider_1.CliConfigProvider.getCliConfig();
    if (config.authentication.authType === undefined) {
        return {};
    }
    let userId;
    if (config.authentication.authType === types_1.AuthType.ApiKey) {
        userId = `cliKey-${(_b = (_a = config.workspace) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : 'unknown'}`;
        userId = getCliUserId((_c = config.workspace) === null || _c === void 0 ? void 0 : _c.id);
    }
    else {
        userId = config.userId;
    }
    const scmDetectionEnabled = (_d = (await cliConfigProvider_1.CliConfigProvider.getConfigProperty(configKeys_1.configKeys.enableSourceControlMetadataCollection))) !== null && _d !== void 0 ? _d : false;
    return {
        userId,
        workspaceId: (_e = config.workspace) === null || _e === void 0 ? void 0 : _e.id,
        features: {
            scm_metadata: scmDetectionEnabled,
        },
    };
}
async function trackCliEvent(commands, argumentCountMap) {
    try {
        const trackingInfo = await getTrackingInfo();
        if (!trackingInfo.userId) {
            return;
        }
        const event = `mablCli - ${commands.join(' ')}`;
        const properties = {
            workspaceId: trackingInfo.workspaceId,
            environment: env_1.ENV,
            argumentCountMap,
            features: trackingInfo.features,
        };
        await trackEvent(event, trackingInfo.userId, properties);
    }
    catch (error) {
        if (env_1.ENV === 'local' || env_1.ENV === 'dev') {
            loggingProvider_1.logger.error('Error with Segment event', error);
        }
    }
}
exports.trackCliEvent = trackCliEvent;
async function trackExternalToolEvent(event, properties) {
    try {
        (await getAnalytics()).track({
            userId: getCliUserId(properties.workspaceId),
            event,
            context: {
                app: {
                    build: env_1.ENV,
                    name: (0, pureUtil_1.getCliName)(),
                    version: (0, pureUtil_1.getCliVersion)(),
                },
                os: {
                    name: os.platform(),
                    version: os.release(),
                },
                groupId: properties.workspaceId,
                userAgent: getUserAgent(),
            },
            properties,
        });
    }
    catch (error) {
        loggingProvider_1.logger.error('Error with analytics data', error);
    }
}
exports.trackExternalToolEvent = trackExternalToolEvent;
async function trackMablTestsRunnerEvent(eventName, resultsMap) {
    try {
        const trackingInfo = await getTrackingInfo();
        if (!trackingInfo.userId) {
            return;
        }
        const properties = {
            workspaceId: trackingInfo.workspaceId,
            environment: env_1.ENV,
            resultsMap,
        };
        await trackEvent(eventName, trackingInfo.userId, properties);
    }
    catch (error) {
        if (env_1.ENV === 'local' || env_1.ENV === 'dev') {
            loggingProvider_1.logger.error('Error with Segment event', error);
        }
    }
}
exports.trackMablTestsRunnerEvent = trackMablTestsRunnerEvent;
async function trackEvent(event, userId, properties) {
    var _a, _b, _c;
    const cpuInfo = (_a = os.cpus()) !== null && _a !== void 0 ? _a : [];
    (await getAnalytics()).track({
        userId,
        event,
        context: {
            app: {
                build: env_1.ENV,
                name: (0, pureUtil_1.getCliName)(),
                version: (0, pureUtil_1.getCliVersion)(),
            },
            os: {
                name: os.platform(),
                version: os.release(),
            },
            groupId: properties.workspaceId,
            userAgent: getUserAgent(),
            userAgentData: {
                cpuCount: cpuInfo.length,
                cpuType: (_b = cpuInfo === null || cpuInfo === void 0 ? void 0 : cpuInfo[0]) === null || _b === void 0 ? void 0 : _b.model,
                cpuSpeed: (_c = cpuInfo === null || cpuInfo === void 0 ? void 0 : cpuInfo[0]) === null || _c === void 0 ? void 0 : _c.speed,
                osArch: os.arch(),
                memFree: os.freemem(),
                memTotal: os.totalmem(),
            },
        },
        properties,
    });
}
async function getAnalytics() {
    return new Analytics('ghbAXZbk8fqWROgMscPdkQMoqEjwsKRa', {
        axiosConfig: await (0, axiosProxyConfig_1.currentProxyConfig)(),
        errorHandler: (error) => {
            if (env_1.ENV === 'local' || env_1.ENV === 'dev') {
                loggingProvider_1.logger.error('Error with Segment event', error);
            }
        },
        flushAt: 1,
        flushInterval: 1,
    });
}
function getUserAgent() {
    var _a, _b;
    const nodeName = (_b = (_a = process === null || process === void 0 ? void 0 : process.release) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'node';
    return `${nodeName}_${process.arch}@${process.version}`;
}
