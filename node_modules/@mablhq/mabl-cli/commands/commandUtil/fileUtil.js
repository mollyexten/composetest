"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeExportedEntityToFile = void 0;
const fs = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
const loggingProvider_1 = require("../../providers/logging/loggingProvider");
const chalk = require('chalk');
function writeExportedEntityToFile(output, fileExtension, entityId, fileName) {
    fileName = fileName !== null && fileName !== void 0 ? fileName : `${entityId}.mabl.${fileExtension}`.replace(':', '-');
    const filePath = path_1.default.resolve(fileName);
    const dirname = path_1.default.dirname(filePath);
    try {
        fs.mkdirSync(dirname, { recursive: true });
        fs.writeFileSync(filePath, output);
        loggingProvider_1.logger.info(`Created file: ${fileName}`);
    }
    catch (err) {
        loggingProvider_1.logger.info(chalk.red.bold(`Error exporting flow to filesystem: ${err}`));
    }
    return fileName;
}
exports.writeExportedEntityToFile = writeExportedEntityToFile;
const tester = 'hello:there:friend';
`mobileTestRun-${tester}-${Date.now()}`.replace(/:/g, '-');
