"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.promiseRejectionMiddlewareMetric = exports.getPromiseSettledValues = exports.logPromiseSettledRejections = exports.logErrorVerbose = exports.formatTimestamp = exports.maybeTruncateLongMessage = exports.valueToString = exports.logWebUIAndCliOutput = exports.logWebUI = exports.findResultSeverityToLogLevel = exports.logCliOutput = exports.logInternal = exports.TRUNCATED_MESSAGE_SUFFIX = exports.VALUE_TO_STRING_DEFAULT_LIMIT = void 0;
const mablscriptFind_1 = require("../mablscriptFind");
const loggingProvider_1 = require("../providers/logging/loggingProvider");
const moment_1 = __importDefault(require("moment"));
const constants_1 = require("../commands/constants");
const pureUtil_1 = require("./pureUtil");
const InternalMetricsTrackingSingleton_1 = require("./InternalMetricsTrackingSingleton");
exports.VALUE_TO_STRING_DEFAULT_LIMIT = 2048;
exports.TRUNCATED_MESSAGE_SUFFIX = 'â€¦[truncated]';
function logInternal(logLine, ...meta) {
    loggingProvider_1.logger.debug(logLine, meta);
}
exports.logInternal = logInternal;
function logCliOutput(logLevel, logLine) {
    switch (logLevel) {
        case loggingProvider_1.LogLevel.Error:
            loggingProvider_1.logger.error(logLine);
            break;
        case loggingProvider_1.LogLevel.Warn:
            loggingProvider_1.logger.warn(logLine);
            break;
        case loggingProvider_1.LogLevel.Info:
            loggingProvider_1.logger.info(logLine);
            break;
        case loggingProvider_1.LogLevel.Debug:
        default:
            loggingProvider_1.logger.debug(logLine);
    }
}
exports.logCliOutput = logCliOutput;
function findResultSeverityToLogLevel(severity) {
    switch (severity) {
        case mablscriptFind_1.FindResultLogSeverity.Error:
            return loggingProvider_1.LogLevel.Error;
        case mablscriptFind_1.FindResultLogSeverity.Warn:
            return loggingProvider_1.LogLevel.Warn;
        case mablscriptFind_1.FindResultLogSeverity.Info:
            return loggingProvider_1.LogLevel.Info;
        case mablscriptFind_1.FindResultLogSeverity.Debug:
        default:
            return loggingProvider_1.LogLevel.Debug;
    }
}
exports.findResultSeverityToLogLevel = findResultSeverityToLogLevel;
function logWebUI(logLine, logLevel, executionContext, metadata) {
    metadata = metadata ? JSON.parse(JSON.stringify(metadata)) : {};
    metadata.shouldOutputInConsole = false;
    logWebUIAndCliOutput(logLine, logLevel, executionContext, metadata);
}
exports.logWebUI = logWebUI;
function logWebUIAndCliOutput(logLine, logLevel, executionContext, metadata) {
    switch (logLevel) {
        case loggingProvider_1.LogLevel.Error:
            executionContext.log.error(logLine, metadata);
            break;
        case loggingProvider_1.LogLevel.Warn:
            executionContext.log.warning(logLine, metadata);
            break;
        case loggingProvider_1.LogLevel.Info:
            executionContext.log.info(logLine, metadata);
            break;
        case loggingProvider_1.LogLevel.Debug:
        default:
            executionContext.log.debug(logLine, metadata);
    }
}
exports.logWebUIAndCliOutput = logWebUIAndCliOutput;
function valueToString(value, maxLength = exports.VALUE_TO_STRING_DEFAULT_LIMIT) {
    let stringValue;
    if (typeof value === 'object') {
        stringValue = JSON.stringify(value);
    }
    else {
        stringValue = '' + value;
    }
    return maybeTruncateLongMessage(stringValue, maxLength);
}
exports.valueToString = valueToString;
function maybeTruncateLongMessage(message, maxLength) {
    return message.length <= maxLength
        ? message
        : message.slice(0, maxLength - exports.TRUNCATED_MESSAGE_SUFFIX.length) +
            exports.TRUNCATED_MESSAGE_SUFFIX;
}
exports.maybeTruncateLongMessage = maybeTruncateLongMessage;
function formatTimestamp(timeAsNumber) {
    if (!timeAsNumber) {
        return '';
    }
    return moment_1.default.utc(timeAsNumber).format(constants_1.ListTimeFormat);
}
exports.formatTimestamp = formatTimestamp;
function logErrorVerbose(error, context) {
    loggingProvider_1.logger.verbose(`Error Message: ${error.message}`);
    loggingProvider_1.logger.verbose(`Error Type: ${error.name}`);
    loggingProvider_1.logger.verbose(`Stack Trace:\n${error.stack}`);
    if (context) {
        loggingProvider_1.logger.verbose(`(error)(context) => ${JSON.stringify(context)}`);
    }
}
exports.logErrorVerbose = logErrorVerbose;
function logPromiseSettledRejections(promises, reThrow = false) {
    promises
        .filter(pureUtil_1.isRejectedPromise)
        .forEach((promise) => logErrorVerbose(promise.reason));
    const findRejectedPromise = promises.find(pureUtil_1.isRejectedPromise);
    if (findRejectedPromise && reThrow) {
        throw findRejectedPromise.reason;
    }
}
exports.logPromiseSettledRejections = logPromiseSettledRejections;
function getPromiseSettledValues(promises, reThrow = false) {
    logPromiseSettledRejections(promises, reThrow);
    return promises.filter(pureUtil_1.isFulfilledPromise).map((promise) => promise.value);
}
exports.getPromiseSettledValues = getPromiseSettledValues;
async function promiseRejectionMiddlewareMetric(promise, metricName, metricValue) {
    try {
        return await promise;
    }
    catch (error) {
        InternalMetricsTrackingSingleton_1.InternalMetricsTrackingSingleton.getInstance().addMetric(metricName, metricValue);
        throw error;
    }
}
exports.promiseRejectionMiddlewareMetric = promiseRejectionMiddlewareMetric;
