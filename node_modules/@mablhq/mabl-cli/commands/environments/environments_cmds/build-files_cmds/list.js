"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const interfaces_1 = require("../../../commandUtil/interfaces");
const constants_1 = require("../../../constants");
const util_1 = require("../../../commandUtil/util");
const mablApiClientFactory_1 = require("../../../../api/mablApiClientFactory");
const describe_1 = require("../../../commandUtil/describe");
exports.command = `list <${constants_1.CommandArgId}>`;
exports.describe = 'Show build files associated with an environment';
exports.builder = (yargs) => {
    yargs
        .positional(constants_1.CommandArgId, {
        describe: 'Environment ID to list build file associations for',
        type: 'string',
    })
        .option(constants_1.CommandArgApplicationId, {
        describe: 'Application ID to filter build files by',
        alias: constants_1.CommandArgAliases.ApplicationId,
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgLimitOutput, {
        alias: constants_1.CommandArgAliases.LimitOutput,
        describe: `The number of build files to return'`,
        default: interfaces_1.DEFAULT_LISTING_RESULT_LIMIT,
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgOutput, {
        alias: constants_1.CommandArgAliases.OutputType,
        choices: constants_1.DefaultOutputFormatChoices,
        describe: 'Specify result output format',
        nargs: 1,
    });
};
exports.handler = (0, util_1.failWrapper)(queryDeployments);
async function queryDeployments(parsed) {
    var _a, _b, _c;
    const apiClient = await mablApiClientFactory_1.MablApiClientFactory.createApiClient();
    try {
        const environment = await apiClient.getEnvironment(parsed.id);
        const deploymentEntities = await apiClient.queryDeploymentEntities((_a = environment.organization_id) !== null && _a !== void 0 ? _a : '', environment.id, parsed[constants_1.CommandArgApplicationId], parsed.limit);
        const mobileDeployments = (_c = (_b = deploymentEntities.deployments) === null || _b === void 0 ? void 0 : _b.filter((deployment) => !!deployment.mobile_app_file_id)) !== null && _c !== void 0 ? _c : [];
        const mobileBuildFiles = await Promise.all(mobileDeployments.map((deployment) => apiClient.getMobileAppFile(deployment.mobile_app_file_id)));
        (0, describe_1.outputEntity)(mobileDeployments.map((deployment, index) => ({
            ...deployment,
            mobile_app_file: mobileBuildFiles[index],
        })), parsed.output);
    }
    catch (error) {
        throw new Error(`Error listing build files for environment ${parsed.id}: ${error}`);
    }
    return 'done';
}
