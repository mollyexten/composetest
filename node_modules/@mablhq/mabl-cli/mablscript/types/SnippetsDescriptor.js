"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isReusableSnippetDescriptor = exports.isInlineSnippetDescriptor = exports.isLegacyReusableSnippetDescriptor = exports.isLegacyInlineJavaScriptDescriptor = exports.isJavaScriptDescriptor = void 0;
function isJavaScriptDescriptor(value) {
    return (isLegacyInlineJavaScriptDescriptor(value) ||
        isLegacyReusableSnippetDescriptor(value) ||
        isInlineSnippetDescriptor(value) ||
        isReusableSnippetDescriptor(value));
}
exports.isJavaScriptDescriptor = isJavaScriptDescriptor;
function isLegacyInlineJavaScriptDescriptor(value) {
    return (value && typeof value === 'object' && typeof value.encodedJS === 'string');
}
exports.isLegacyInlineJavaScriptDescriptor = isLegacyInlineJavaScriptDescriptor;
function isLegacyReusableSnippetDescriptor(value) {
    return (value &&
        typeof value === 'object' &&
        typeof value.snippetInvariantId === 'string' &&
        !('snippetId' in value));
}
exports.isLegacyReusableSnippetDescriptor = isLegacyReusableSnippetDescriptor;
function isInlineSnippetDescriptor(value) {
    return (value &&
        typeof value === 'object' &&
        typeof value.inlineSnippet === 'object' &&
        Array.isArray(value.parameterOverrides));
}
exports.isInlineSnippetDescriptor = isInlineSnippetDescriptor;
function isReusableSnippetDescriptor(value) {
    return (value &&
        typeof value === 'object' &&
        typeof value.snippetInvariantId === 'string' &&
        typeof value.snippetId === 'string' &&
        Array.isArray(value.parameterOverrides));
}
exports.isReusableSnippetDescriptor = isReusableSnippetDescriptor;
