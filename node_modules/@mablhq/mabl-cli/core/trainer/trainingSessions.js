"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.editTest = exports.getInitialFlows = exports.trainNewTest = exports.ElectronProtocolUrl = exports.SENDER = exports.DEFAULT_WIDTH = exports.DEFAULT_HEIGHT = void 0;
const branches_1 = require("../../commands/commandUtil/branches");
const testsUtil_1 = require("../../commands/tests/testsUtil");
const mablApi_1 = require("../../mablApi");
const constants_1 = require("../../commands/constants");
const util_1 = require("../util");
const openUtils_1 = require("./openUtils");
const util_2 = require("../../commands/commandUtil/util");
const loggingProvider_1 = require("../../providers/logging/loggingProvider");
const rbacUtils_1 = require("../../util/rbacUtils");
const chalk = require('chalk');
exports.DEFAULT_HEIGHT = 800;
exports.DEFAULT_WIDTH = 1000;
exports.SENDER = 'cli';
var ElectronProtocolUrl;
(function (ElectronProtocolUrl) {
    ElectronProtocolUrl["EDIT_TEST"] = "editTest";
    ElectronProtocolUrl["TRAIN_NEW_TEST"] = "trainNewTest";
})(ElectronProtocolUrl || (exports.ElectronProtocolUrl = ElectronProtocolUrl = {}));
async function trainNewTest(trainingSessionOptions) {
    var _a;
    const apiClient = await (0, util_1.getApiClientFromOptions)(trainingSessionOptions, true);
    const branchName = (_a = trainingSessionOptions.branchName) !== null && _a !== void 0 ? _a : constants_1.DefaultBranchName;
    const { authToken, autoBranch, dataTableIds, ...passThroughFields } = trainingSessionOptions;
    const { applicationId, autoLogin, credentialsId, environmentId, height, planId, testDescription, testName, url, width, workspaceId, } = passThroughFields;
    if (branchName !== 'master') {
        await (0, branches_1.checkBranchNameAndAutoBranchMaybe)(workspaceId, apiClient, branchName, autoBranch);
    }
    if (environmentId) {
        await apiClient.getEnvironment(environmentId);
    }
    if (planId) {
        await apiClient.getPlan(planId);
    }
    if (credentialsId) {
        const credential = await apiClient.getCredential(credentialsId);
        if (credential.cloud_only) {
            loggingProvider_1.logger.error(chalk.red.bold(`Cannot use Cloud Credentials in the trainer. Use a basic one instead.`));
            process.exit(1);
        }
    }
    await (0, rbacUtils_1.dataTablesRbacPreflight)(apiClient, dataTableIds);
    if (applicationId) {
        await apiClient.getApplication(applicationId);
    }
    const account = await apiClient.getAccountByWorkspaceId(workspaceId);
    const flows = await getInitialFlows(apiClient, autoLogin, workspaceId);
    (0, testsUtil_1.logTestInfoIfPresent)(`Creating test in desktop app: `, testName);
    (0, testsUtil_1.logTestInfoIfPresent)(`Add auto login flow: `, autoLogin);
    (0, testsUtil_1.logTestInfoIfPresent)(`URL: `, url);
    (0, testsUtil_1.logTestInfoIfPresent)(`Workspace: `, workspaceId);
    (0, testsUtil_1.logTestInfoIfPresent)(`Account ID: `, account.id);
    (0, testsUtil_1.logTestInfoIfPresent)(`Branch: `, branchName);
    (0, testsUtil_1.logTestInfoIfPresent)(`Plan ID: `, planId);
    (0, testsUtil_1.logTestInfoIfPresent)(`Application ID: `, applicationId);
    (0, testsUtil_1.logTestInfoIfPresent)(`Environment ID: `, environmentId);
    (0, testsUtil_1.logTestInfoIfPresent)(`Credentials ID: `, credentialsId);
    (0, testsUtil_1.logTestInfoIfPresent)(`Datatable ID(s): `, dataTableIds === null || dataTableIds === void 0 ? void 0 : dataTableIds.join(', '));
    (0, testsUtil_1.logTestInfoIfPresent)(`Test description: `, testDescription);
    const scriptConfig = {
        ...passThroughFields,
        accountId: account.id,
        branchName,
        dataTables: dataTableIds,
        flows,
        height: height !== null && height !== void 0 ? height : exports.DEFAULT_HEIGHT,
        sender: exports.SENDER,
        width: width !== null && width !== void 0 ? width : exports.DEFAULT_WIDTH,
    };
    await (0, openUtils_1.openUrlInDesktopApp)(ElectronProtocolUrl.TRAIN_NEW_TEST, scriptConfig);
}
exports.trainNewTest = trainNewTest;
async function getInitialFlows(apiClient, autoLogin, workspaceId) {
    const initialFlows = [];
    if (autoLogin) {
        const loginFlows = await apiClient.getFlows({
            flow_type: 'login',
            organization_id: workspaceId,
        });
        if (loginFlows === null || loginFlows === void 0 ? void 0 : loginFlows[0]) {
            initialFlows.push(loginFlows[0].id);
        }
    }
    return initialFlows;
}
exports.getInitialFlows = getInitialFlows;
async function editTest(trainingSessionOptions) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const apiClient = await (0, util_1.getApiClientFromOptions)(trainingSessionOptions, true);
    let testRunIdConfig = { testId: '', filterHttpRequests: false };
    if (trainingSessionOptions.testRunId) {
        testRunIdConfig = await (0, testsUtil_1.pullDownTestRunConfig)(trainingSessionOptions.testRunId, apiClient);
    }
    const url = (_a = trainingSessionOptions.url) !== null && _a !== void 0 ? _a : testRunIdConfig.url;
    const credentialsId = (_b = trainingSessionOptions.credentialsId) !== null && _b !== void 0 ? _b : testRunIdConfig.credentialsId;
    const branchName = (_d = (_c = trainingSessionOptions.branchName) !== null && _c !== void 0 ? _c : testRunIdConfig.branchName) !== null && _d !== void 0 ? _d : constants_1.DefaultBranchName;
    const environmentId = (_e = trainingSessionOptions.environmentId) !== null && _e !== void 0 ? _e : testRunIdConfig.environmentId;
    if (credentialsId) {
        const credential = await apiClient.getCredential(credentialsId);
        if (credential.cloud_only) {
            loggingProvider_1.logger.error(chalk.red.bold(`Cannot use Cloud Credentials in the trainer. Use a basic one instead.`));
            process.exit(1);
        }
    }
    const testId = (_f = trainingSessionOptions.testId) !== null && _f !== void 0 ? _f : testRunIdConfig.testId;
    if (!testId) {
        throw new Error('Unable to determine test Id run');
    }
    const test = await apiClient.getJourney(testId, branchName);
    if (test.default) {
        throw new Error('Editing of the mabl default supplied tests is not supported');
    }
    await (0, rbacUtils_1.dataTablesRbacPreflight)(apiClient, test === null || test === void 0 ? void 0 : test.datatables);
    if (!((_g = test.flows) === null || _g === void 0 ? void 0 : _g.length) && test.test_type !== mablApi_1.TestTypeEnum.Performance) {
        throw new Error(util_2.TEST_WITHOUT_FLOWS_MESSAGE);
    }
    const workspaceId = test.organization_id;
    if (branchName !== 'master') {
        await (0, branches_1.checkBranchNameAndAutoBranchMaybe)(workspaceId, apiClient, branchName, trainingSessionOptions.autoBranch);
    }
    const finalUrl = (0, testsUtil_1.getFinalUrl)(test, url);
    if (environmentId) {
        await apiClient.getEnvironment(environmentId);
    }
    const account = await apiClient.getAccountByWorkspaceId(workspaceId);
    (0, testsUtil_1.logTestInfoIfPresent)(`Editing test in desktop app: `, `${test.name} - ${test.invariant_id}`);
    (0, testsUtil_1.logTestInfoIfPresent)(`Test description: `, test.description);
    (0, testsUtil_1.logTestInfoIfPresent)(`URL: `, finalUrl);
    (0, testsUtil_1.logTestInfoIfPresent)(`Workspace: `, workspaceId);
    (0, testsUtil_1.logTestInfoIfPresent)(`Branch: `, branchName);
    (0, testsUtil_1.logTestInfoIfPresent)(`Environment ID: `, environmentId);
    (0, testsUtil_1.logTestInfoIfPresent)(`Credentials ID: `, credentialsId);
    const scriptConfig = {
        accountId: account.id,
        applicationId: trainingSessionOptions.applicationId,
        branchName,
        credentialsId,
        disableIsolation: trainingSessionOptions.disableIsolation,
        environmentId,
        height: (_h = trainingSessionOptions.height) !== null && _h !== void 0 ? _h : exports.DEFAULT_HEIGHT,
        ignoreCertificateErrors: trainingSessionOptions.ignoreCertificateErrors,
        planId: testRunIdConfig.fromPlanId,
        sender: exports.SENDER,
        testId,
        testType: (_j = test.test_type) !== null && _j !== void 0 ? _j : mablApi_1.TestTypeEnum.Browser,
        url: finalUrl,
        width: (_k = trainingSessionOptions.width) !== null && _k !== void 0 ? _k : exports.DEFAULT_WIDTH,
        workspaceId,
    };
    await (0, openUtils_1.openUrlInDesktopApp)(ElectronProtocolUrl.EDIT_TEST, scriptConfig);
}
exports.editTest = editTest;
