"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwitchContextStep = void 0;
const FindAction_1 = require("../actions/FindAction");
const MablStep_1 = require("../MablStep");
const SwitchContextStepDescriptor_1 = require("../types/SwitchContextStepDescriptor");
const domUtil_1 = require("../../domUtil");
class SwitchContextStep extends MablStep_1.MablStep {
    constructor(name, args, actions) {
        super(name, args, actions, 'switch_context_to');
        const maybeRoot = this.getActionArgs()[0];
        if (maybeRoot !== undefined && maybeRoot !== 'root') {
            throw new Error(`Unexpected argument for ${name} step: ${JSON.stringify(maybeRoot)}`);
        }
        if (maybeRoot === 'root') {
            this.switch = {
                frame: 'root',
                actionCode: this.actionCode,
            };
            Object.freeze(this.switch);
            return;
        }
        if (actions.length !== 1) {
            throw new Error(`No find action for ${name} step`);
        }
        this.findAction = new FindAction_1.FindAction(this.actions[0].name, this.actions[0].args);
        if (this.actions[0].actionSourceIndexInStep !== undefined) {
            this.findAction.setActionSourceIndexInStep(this.actions[0].actionSourceIndexInStep);
        }
        const findDescriptor = this.findAction.toDescriptor();
        if (findDescriptor.findType === domUtil_1.FindType.FIND_TAB) {
            this.switch = {
                tab: findDescriptor,
                find: findDescriptor,
                descriptorToActionMap: new Map().set(findDescriptor, this.findAction),
                actionCode: this.actionCode,
            };
            Object.freeze(this.switch);
            return;
        }
        if (findDescriptor.findType === domUtil_1.FindType.FIND_ONE) {
            this.switch = {
                frame: findDescriptor,
                find: findDescriptor,
                descriptorToActionMap: new Map().set(findDescriptor, this.findAction),
                actionCode: this.actionCode,
            };
            Object.freeze(this.switch);
            return;
        }
        throw new Error(`Unexpected find type for ${name} step: ${findDescriptor.findType}`);
    }
    validate() {
        if (this.actions.length === 0 ||
            (this.actions.length === 1 && !(this.actions[0] instanceof FindAction_1.FindAction))) {
            throw new Error('Invalid switch context step');
        }
    }
    getStepName() {
        return 'SwitchContext';
    }
    toStepDescriptor() {
        return this.switch;
    }
    getFormattedStep() {
        var _a;
        const step = this.toStepDescriptor();
        const stepName = this.getStepName();
        const formatted = {
            [stepName]: {},
        };
        if (this.annotationsOnStep()) {
            formatted[stepName].annotation = this.annotation;
        }
        if (this.description) {
            formatted[stepName].description = this.description;
        }
        if ((0, SwitchContextStepDescriptor_1.isSwitchTab)(step)) {
            formatted[stepName].findType = 'FindTab';
            formatted[stepName].selector = step.tab.findTarget;
        }
        if ((0, SwitchContextStepDescriptor_1.isSwitchFrame)(step)) {
            formatted[stepName].selector = step.frame.findTarget.selector;
            if ((_a = step.frame.findTarget.auxiliaryDescriptors) === null || _a === void 0 ? void 0 : _a.length) {
                formatted[stepName].selectorAncestors =
                    step.frame.findTarget.auxiliaryDescriptors.map((descriptor) => descriptor.selector);
            }
        }
        if ((0, SwitchContextStepDescriptor_1.isSwitchRoot)(step) && step.frame === 'root') {
            formatted[stepName].switch = 'root';
        }
        if (this.stepId()) {
            formatted[stepName].id = this.stepId();
        }
        return formatted;
    }
    static fromYaml(_stepName, stepArgs) {
        let step;
        if (stepArgs.switch) {
            step = new SwitchContextStep('switch_context_to', [stepArgs.switch], []);
        }
        else {
            step = new SwitchContextStep('switch_context_to', [], [FindAction_1.FindAction.findActionFromStepArgs(stepArgs)]);
        }
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        var _a;
        if ((0, SwitchContextStepDescriptor_1.isSwitchRoot)(this.switch) && this.switch.frame === 'root') {
            return 'switch_context_to("root")';
        }
        return `${(_a = this.findAction) === null || _a === void 0 ? void 0 : _a.toMablscript()}.switch_context_to()`;
    }
    getInputVariables() {
        var _a, _b;
        return (_b = (_a = this.findAction) === null || _a === void 0 ? void 0 : _a.getInputVariables()) !== null && _b !== void 0 ? _b : [];
    }
}
exports.SwitchContextStep = SwitchContextStep;
SwitchContextStep.mablScriptStepNames = ['switch_context_to'];
SwitchContextStep.yamlMablScriptNames = ['SwitchContext'];
