"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPasswordField = exports.isStepWithFind = exports.humanizeCustomFind = exports.getElementDescriptionFromMobileFindDescriptor = exports.getDescriptionForMobileStepDescriptor = exports.getSimpleIOSElementName = exports.getSimpleAndroidElementName = void 0;
const domUtil_1 = require("../../../domUtil");
const mablscriptFind_1 = require("../../../mablscriptFind");
function getSimpleAndroidElementName(className) {
    if (!className) {
        return 'unknown';
    }
    const parts = className.split('.');
    return parts[parts.length - 1];
}
exports.getSimpleAndroidElementName = getSimpleAndroidElementName;
function getSimpleIOSElementName(elementName) {
    if (!elementName) {
        return 'unknown';
    }
    const parts = elementName.split('XCUIElementType');
    if (parts.length > 1) {
        return parts[1];
    }
    return 'unknown';
}
exports.getSimpleIOSElementName = getSimpleIOSElementName;
function getDescriptionForMobileStepDescriptor(predicateAction, descriptor) {
    const elementDescription = getElementDescriptionFromMobileFindDescriptor(descriptor.find);
    return `${predicateAction} ${elementDescription}`;
}
exports.getDescriptionForMobileStepDescriptor = getDescriptionForMobileStepDescriptor;
function getElementDescriptionFromMobileFindDescriptor(descriptor) {
    const findTarget = descriptor === null || descriptor === void 0 ? void 0 : descriptor.findTarget;
    if ((0, domUtil_1.isMobileFindSpecification)(findTarget)) {
        if ((0, domUtil_1.isWebViewFindElementDescriptor)(descriptor)) {
            return getDescriptionForWebViewFindDescriptor(descriptor);
        }
        const selector = findTarget.selector;
        if (selector.android && Object.keys(selector.android).length) {
            return buildElementDescriptionForAndroid(findTarget);
        }
        else if (selector.iOS) {
            return buildElementDescriptionForiOS(findTarget);
        }
    }
    return 'unknown element';
}
exports.getElementDescriptionFromMobileFindDescriptor = getElementDescriptionFromMobileFindDescriptor;
function buildElementDescriptionForAndroid(findTarget) {
    var _a, _b, _c;
    const selector = findTarget.selector;
    if (!selector.android) {
        return `unknown android element`;
    }
    const description = `"${getSimpleAndroidElementName(selector.android.class)}" element`;
    if ((_a = selector.android) === null || _a === void 0 ? void 0 : _a.hint) {
        return `${description} with hint "${(0, domUtil_1.normalizeText)(selector.android.hint)}"`;
    }
    if ((_b = selector.android) === null || _b === void 0 ? void 0 : _b.text) {
        return `${description} with text "${(0, domUtil_1.normalizeText)(selector.android.text)}"`;
    }
    if ((_c = selector.android) === null || _c === void 0 ? void 0 : _c.contentDesc) {
        return `${description} with content-desc "${(0, domUtil_1.normalizeText)(selector.android.contentDesc)}"`;
    }
    return description;
}
function buildElementDescriptionForiOS(findTarget) {
    const selector = findTarget.selector;
    if (!selector.iOS) {
        return `unknown iOS element`;
    }
    if (selector.iOS.name) {
        return `"${selector.iOS.name}" element`;
    }
    const simpleDescription = selector.iOS.type
        ? `"${getSimpleIOSElementName(selector.iOS.type)}" element`
        : `element`;
    if (selector.iOS.label) {
        return `${simpleDescription} with label "${(0, domUtil_1.normalizeText)(selector.iOS.label)}"`;
    }
    return simpleDescription;
}
function getDescriptionForWebViewFindDescriptor(webViewElementDescriptor) {
    if ((0, domUtil_1.isFindElementDescriptor)(webViewElementDescriptor.webView.descriptor)) {
        return (0, mablscriptFind_1.humanizeFindOneDescriptor)(webViewElementDescriptor.webView.descriptor.findTarget);
    }
    return `unknown webview element`;
}
function humanizeCustomFind(descriptor) {
    if (isStepWithFind(descriptor)) {
        if ((0, domUtil_1.isMobileFindCustomDescriptor)(descriptor.find)) {
            return `xpath: ${descriptor.find.findTarget.xpath}`;
        }
    }
    return `custom find`;
}
exports.humanizeCustomFind = humanizeCustomFind;
function isStepWithFind(value) {
    return !!(value === null || value === void 0 ? void 0 : value.find);
}
exports.isStepWithFind = isStepWithFind;
function isPasswordField(descriptor) {
    var _a, _b;
    if ((0, domUtil_1.isMobileFindSpecification)(descriptor === null || descriptor === void 0 ? void 0 : descriptor.findTarget)) {
        if (((_a = descriptor.findTarget.selector.android) === null || _a === void 0 ? void 0 : _a.password) === true) {
            return true;
        }
        if (((_b = descriptor.findTarget.selector.iOS) === null || _b === void 0 ? void 0 : _b.type) ===
            'XCUIElementTypeSecureTextField') {
            return true;
        }
    }
    return false;
}
exports.isPasswordField = isPasswordField;
