"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findUsedVariables = exports.addUserNamespace = exports.addFlowNamespace = exports.generateVariablesSummaryForExport = exports.generateVariablesSummaryForImport = exports.API_CREDENTIALS_PASSWORD_VARIABLE_NAME = exports.API_CREDENTIALS_USERNAME_VARIABLE_NAME = exports.API_CREDENTIALS_NAMESPACE = exports.API_URL_VARIABLE_NAME = exports.API_NAMESPACE = exports.FLOW_NAMESPACE = exports.USER_NAMESPACE = void 0;
const domUtil_1 = require("../../domUtil");
exports.USER_NAMESPACE = 'user.';
exports.FLOW_NAMESPACE = 'flow.';
exports.API_NAMESPACE = 'api.';
exports.API_URL_VARIABLE_NAME = `${exports.API_NAMESPACE}url`;
exports.API_CREDENTIALS_NAMESPACE = `${exports.API_NAMESPACE}credentials.`;
exports.API_CREDENTIALS_USERNAME_VARIABLE_NAME = `${exports.API_CREDENTIALS_NAMESPACE}username`;
exports.API_CREDENTIALS_PASSWORD_VARIABLE_NAME = `${exports.API_CREDENTIALS_NAMESPACE}password`;
function generateVariablesSummaryForImport(variableSources) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    const { environment, scenario, url, credentials, plan, flow, journeyRun, previousFlowVariables, flowConfiguration, test, } = variableSources;
    const summary = {
        dataDriven: {},
        effective: {},
        environment: {},
        flow: {},
        journey: {},
        parameters: {},
    };
    (_b = (_a = test === null || test === void 0 ? void 0 : test.variables) === null || _a === void 0 ? void 0 : _a.inputs) === null || _b === void 0 ? void 0 : _b.forEach((variable) => {
        const name = removeUserNamespace(variable.name);
        const value = variable.default_value;
        summary.journey[name] = value;
        summary.effective[name] = value;
    });
    const environmentVariables = (environment === null || environment === void 0 ? void 0 : environment.variables) || {};
    Object.entries(environmentVariables).forEach(([key, value]) => {
        const name = removeUserNamespace(key);
        summary.environment[name] = value;
        summary.effective[name] = value;
    });
    const planParameters = extractValueParameters(plan === null || plan === void 0 ? void 0 : plan.parameters);
    planParameters.forEach((parameter) => {
        const name = removeUserNamespace(parameter.name);
        const { value } = parameter;
        summary.parameters[name] = value;
        summary.effective[name] = value;
    });
    const journeyParameters = extractValueParameters(journeyRun &&
        (plan === null || plan === void 0 ? void 0 : plan.execution_stages) &&
        ((_e = (_d = (_c = plan.execution_stages[journeyRun.stage_index]) === null || _c === void 0 ? void 0 : _c.journeys) === null || _d === void 0 ? void 0 : _d.find((journey) => journey.journey_id)) === null || _e === void 0 ? void 0 : _e.parameters));
    journeyParameters.forEach((parameter) => {
        const name = removeUserNamespace(parameter.name);
        const { value } = parameter;
        summary.parameters[name] = value;
        summary.effective[name] = value;
    });
    const journeyInputs = ((_f = journeyRun === null || journeyRun === void 0 ? void 0 : journeyRun.journey_parameters) === null || _f === void 0 ? void 0 : _f.imported_variables) || {};
    Object.entries(journeyInputs).forEach(([key, value]) => {
        const name = removeUserNamespace(key);
        summary.journey[name] = value;
        summary.effective[name] = value;
    });
    const ddtVariables = ((_h = (_g = journeyRun === null || journeyRun === void 0 ? void 0 : journeyRun.journey_parameters) === null || _g === void 0 ? void 0 : _g.user_variables) === null || _h === void 0 ? void 0 : _h.row) ||
        (scenario === null || scenario === void 0 ? void 0 : scenario.variables) ||
        [];
    ddtVariables.forEach((variable) => {
        const name = removeUserNamespace(variable.name);
        const { value } = variable;
        summary.dataDriven[name] = value;
        summary.effective[name] = value;
    });
    const exportedVariables = previousFlowVariables || {};
    Object.entries(exportedVariables).forEach(([key, value]) => {
        const name = removeUserNamespace(key);
        summary.dataDriven[name] = value;
        summary.effective[name] = value;
    });
    (_j = flow === null || flow === void 0 ? void 0 : flow.parameters) === null || _j === void 0 ? void 0 : _j.forEach((parameter) => {
        var _a, _b;
        const name = removeFlowNamespace(parameter.name);
        const value = (_b = (_a = flowConfiguration === null || flowConfiguration === void 0 ? void 0 : flowConfiguration.parameters) === null || _a === void 0 ? void 0 : _a[parameter.name]) !== null && _b !== void 0 ? _b : parameter.default_value;
        summary.flow[name] = value;
        summary.effective[addFlowNamespace(name)] = value;
    });
    if (url) {
        summary.effective[exports.API_URL_VARIABLE_NAME] = url;
    }
    if (credentials) {
        summary.effective[exports.API_CREDENTIALS_USERNAME_VARIABLE_NAME] =
            (_k = credentials.properties) === null || _k === void 0 ? void 0 : _k.username;
        summary.effective[exports.API_CREDENTIALS_PASSWORD_VARIABLE_NAME] =
            (_l = credentials.properties) === null || _l === void 0 ? void 0 : _l.password;
    }
    return summary;
}
exports.generateVariablesSummaryForImport = generateVariablesSummaryForImport;
function generateVariablesSummaryForExport(testContext, plan, test, flow, journeyRun, exportedVariables) {
    return normalizeVariablesSummaryForExport(generateVariablesSummaryForImport({
        environment: testContext.environment,
        url: testContext.url,
        credentials: testContext.credentials,
        scenario: testContext.getScenario(),
        plan,
        flow,
        journeyRun,
        previousFlowVariables: exportedVariables,
        test,
    }));
}
exports.generateVariablesSummaryForExport = generateVariablesSummaryForExport;
function normalizeVariablesSummaryForExport(summary) {
    return {
        dataDriven: addUserNamespaceToVariableNames(sanitizeVariables(summary.dataDriven)),
        effective: sanitizeVariables(summary.effective),
        environment: addUserNamespaceToVariableNames(sanitizeVariables(summary.environment)),
        flow: addFlowNamespaceToVariableNames(sanitizeVariables(summary.flow)),
        journey: addUserNamespaceToVariableNames(sanitizeVariables(summary.journey)),
        parameters: addUserNamespaceToVariableNames(sanitizeVariables(summary.parameters)),
    };
}
function sanitizeVariables(variables) {
    const sanitizedVariables = {};
    Object.keys(variables)
        .filter((name) => (0, domUtil_1.isValidUserVariableName)(name))
        .forEach((name) => (sanitizedVariables[name] = variables[name]));
    return sanitizedVariables;
}
function addFlowNamespaceToVariableNames(variables) {
    return addPrefixToVariableNames(variables, exports.FLOW_NAMESPACE);
}
function addUserNamespaceToVariableNames(variables) {
    return addPrefixToVariableNames(variables, exports.USER_NAMESPACE);
}
function addPrefixToVariableNames(variables, prefix) {
    return mapVariables(variables, (variable) => ({
        name: addPrefix(variable.name, prefix),
        value: variable.value,
    }));
}
function mapVariables(variables, mapper) {
    const mappedVariables = {};
    Object.keys(variables)
        .map((name) => mapper({ name, value: variables[name] }))
        .forEach((variable) => (mappedVariables[variable.name] = variable.value));
    return mappedVariables;
}
function extractValueParameters(parameters) {
    if (!parameters) {
        return [];
    }
    return parameters.filter((parameter) => { var _a; return ((_a = parameter.type) === null || _a === void 0 ? void 0 : _a.toString()) === 'value'; });
}
function removeFlowNamespace(variableName) {
    return removePrefix(variableName, exports.FLOW_NAMESPACE);
}
function removeUserNamespace(variableName) {
    return removePrefix(variableName, exports.USER_NAMESPACE);
}
function removePrefix(variableName, prefix) {
    if (variableName.startsWith(prefix)) {
        return variableName.substring(prefix.length);
    }
    return variableName;
}
function addFlowNamespace(variableName) {
    return addPrefix(variableName, exports.FLOW_NAMESPACE);
}
exports.addFlowNamespace = addFlowNamespace;
function addUserNamespace(variableName) {
    return addPrefix(variableName, exports.USER_NAMESPACE);
}
exports.addUserNamespace = addUserNamespace;
function addPrefix(variableName, prefix) {
    if (variableName.startsWith(prefix)) {
        return variableName;
    }
    return `${prefix}${variableName}`;
}
function findUsedVariables(collection, variableNames) {
    const collectionSubset = {
        auth: collection.auth,
        item: collection.item,
        event: collection.event,
    };
    const collectionAsJson = JSON.stringify(collectionSubset);
    return variableNames.filter((variableName) => collectionAsJson.includes(variableName));
}
exports.findUsedVariables = findUsedVariables;
