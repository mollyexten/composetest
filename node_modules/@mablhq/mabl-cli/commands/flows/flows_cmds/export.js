"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mablApiClientFactory_1 = require("../../../api/mablApiClientFactory");
const util_1 = require("../../commandUtil/util");
const js_yaml_1 = require("js-yaml");
const constants_1 = require("../../constants");
const execution_1 = require("../../../execution");
const fileUtil_1 = require("../../commandUtil/fileUtil");
const os = require('os');
const JSON_REPLACER = null;
exports.command = `export <${constants_1.CommandArgId}>`;
exports.describe = 'Export a mabl flow in a specified file format';
exports.builder = (yargs) => {
    yargs
        .positional(constants_1.CommandArgId, {
        describe: 'flow id to export',
        type: 'string',
    })
        .option(constants_1.CommandArgFormat, {
        alias: 'fmt',
        default: 'yaml',
        describe: `Specify a format for the flow export`,
        choices: [constants_1.OutputFormats.Json, constants_1.OutputFormats.Yaml, constants_1.OutputFormats.Csv],
    })
        .option(constants_1.CommandArgDetailLevel, {
        default: 'simple',
        hidden: true,
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgMablBranch, {
        describe: 'Which branch of the flow to export',
        nargs: 1,
        type: 'string',
    });
};
exports.handler = (0, util_1.failWrapper)(pullFlow);
async function pullFlow(parsed) {
    var _a;
    const flowId = parsed.id;
    const format = parsed.format;
    const detailLevel = parsed[constants_1.CommandArgDetailLevel];
    const apiClient = await mablApiClientFactory_1.MablApiClientFactory.createApiClient();
    const branchName = (_a = parsed['mabl-branch']) !== null && _a !== void 0 ? _a : constants_1.DefaultBranchName;
    const flow = await apiClient.getFlow(flowId, branchName);
    switch (format) {
        case constants_1.OutputFormats.Csv:
            dumpToCsv(flow);
            break;
        case constants_1.OutputFormats.Json:
        case constants_1.OutputFormats.Yaml:
        default:
            dumpYamlOrJsonToFile(format, flow, detailLevel);
            break;
    }
}
function dumpYamlOrJsonToFile(type, flow, detailLevel) {
    const flowConfig = new execution_1.FlowConfig(flow, false);
    const configGenerated = detailLevel === constants_1.DetailLevelFormats.Full
        ? flowConfig.generateConfigFile()
        : flowConfig.generateSimpleFormat();
    switch (type) {
        case constants_1.OutputFormats.Yaml:
            const yaml = (0, js_yaml_1.dump)(configGenerated, { skipInvalid: false });
            (0, fileUtil_1.writeExportedEntityToFile)(yaml, 'yml', flow.id);
            break;
        case constants_1.OutputFormats.Json:
            (0, fileUtil_1.writeExportedEntityToFile)(JSON.stringify(configGenerated, JSON_REPLACER, 2), 'json', flow.id);
            break;
        default:
            throw new Error(`Invalid Type supplied for exporting flow: ${type}`);
    }
}
function dumpToCsv(flow) {
    const flowConfig = new execution_1.FlowConfig(flow, false);
    const output = flowConfig.generateSimpleCsv();
    (0, fileUtil_1.writeExportedEntityToFile)(output.join(os.EOL), 'csv', flow.id);
}
