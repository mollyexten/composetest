"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReleaseStep = void 0;
const FindAction_1 = require("../actions/FindAction");
const MablAction_1 = require("../MablAction");
const domUtil_1 = require("../../domUtil");
const ActionsUtils_1 = require("./ActionsUtils");
const ReleaseStepDescriptor_1 = require("../types/ReleaseStepDescriptor");
const MablStepWithFindAction_1 = require("../MablStepWithFindAction");
class ReleaseStep extends MablStepWithFindAction_1.MablStepWithFindAction {
    constructor(name, args, actions) {
        var _a;
        super(name, args, actions, 'release');
        this.findAction = ActionsUtils_1.ActionsUtils.validateSingleFindAction(this.actions);
        this.releaseArgs = (_a = this.parseArgs(args)) !== null && _a !== void 0 ? _a : { isHtml5: false };
    }
    parseArgs(args) {
        if (args.length === 0) {
            return undefined;
        }
        if (args.length !== 1) {
            throw new Error(`Unexpected number of arguments to ${this.getStepName()} step.`);
        }
        if (!(0, ReleaseStepDescriptor_1.isReleaseArgs)(args[0])) {
            throw new Error(`Invalid argument passed to ${this.getStepName()} step.`);
        }
        return args[0];
    }
    getStepName() {
        return 'Release';
    }
    toStepDescriptor() {
        const find = this.findAction.toDescriptor();
        switch (find.findType) {
            case domUtil_1.FindType.FIND_FIRST:
            case domUtil_1.FindType.FIND_LAST:
            case domUtil_1.FindType.FIND_ANY:
            case domUtil_1.FindType.FIND_ONE:
                return {
                    find,
                    descriptorToActionMap: new Map().set(find, this.findAction),
                    actionCode: this.actionCode,
                    releaseArgs: this.releaseArgs,
                };
            default:
                throw new Error(`Error generating step descriptor for ${this.getStepName()}: Unexpected find type ${find.findType}`);
        }
    }
    getFormattedStep(_fullLocatorsOn) {
        const step = {
            Release: {
                ...super.annotationsAsYml(),
                ...this.findAction.toYaml(),
            },
        };
        if (this.stepId()) {
            step.Release.id = this.stepId();
        }
        return step;
    }
    static fromYaml(_stepName, stepArgs) {
        const step = new ReleaseStep('release', [], [FindAction_1.FindAction.findActionFromStepArgs(stepArgs)]);
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        const args = (0, MablAction_1.convertObjectToMablscriptArgs)(this.releaseArgs);
        return `${this.findAction.toMablscript()}.release(${args})`;
    }
    getInputVariables() {
        return this.findAction.getInputVariables();
    }
}
exports.ReleaseStep = ReleaseStep;
ReleaseStep.mablScriptStepNames = ['release'];
ReleaseStep.yamlMablScriptNames = ['Release'];
