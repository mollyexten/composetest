"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecutionResultPresenter = void 0;
const change_case_1 = require("change-case");
const mablApi_1 = require("../../../mablApi");
const cli_table3_1 = __importDefault(require("cli-table3"));
const timeUtil_1 = require("../../../util/timeUtil");
const chalk = require('chalk');
class ExecutionResultPresenter {
    entityToString(results, columnWidth) {
        var _a;
        const columnLabels = [
            'Plan Name',
            'Test Name',
            'Id',
            'Browser',
            'Status',
            'Run Time',
        ];
        const tableConfig = {
            head: columnLabels,
        };
        if (columnWidth) {
            tableConfig.colWidths = Array(columnLabels.length - 1).fill(columnWidth);
        }
        const table = new cli_table3_1.default(tableConfig);
        const finalExecutions = (_a = results === null || results === void 0 ? void 0 : results.executions) !== null && _a !== void 0 ? _a : [];
        finalExecutions.forEach((summary) => {
            var _a, _b, _c, _d, _e;
            const retryPrefix = ((_a = summary === null || summary === void 0 ? void 0 : summary.plan_execution) === null || _a === void 0 ? void 0 : _a.is_retry) ? '[Retry] ' : '';
            const planId = summary.plan.id;
            const planName = retryPrefix + ((_c = (_b = summary.plan) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : '<plan name unavailable>');
            const planRunStatus = summary.plan_execution.status;
            const journeyMap = new Map();
            (_d = summary === null || summary === void 0 ? void 0 : summary.journeys) === null || _d === void 0 ? void 0 : _d.forEach((journeySummary) => journeyMap.set(journeySummary.id, journeySummary));
            const statusChalk = this.mapPlanRunStatusToColor(planRunStatus);
            table.push([
                `${planName}`,
                '---',
                planId,
                '---',
                statusChalk(this.maybeCapitalize(planRunStatus.toString())),
                summaryToElapsedTime(summary),
            ]);
            (_e = summary === null || summary === void 0 ? void 0 : summary.journey_executions) === null || _e === void 0 ? void 0 : _e.forEach((journeyRun) => {
                var _a, _b, _c, _d;
                const journeyId = journeyRun.journey_execution_id;
                const journeyStatus = this.maybeCapitalize((_b = (_a = journeyRun.status) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '<status unavailable>');
                const journeyBrowser = this.maybeCapitalize((_c = journeyRun.browser_type) !== null && _c !== void 0 ? _c : '<unknown browser>');
                const journeySummary = journeyMap.get(journeyRun.journey_id);
                const journeyName = `${retryPrefix}${(_d = journeySummary === null || journeySummary === void 0 ? void 0 : journeySummary.name) !== null && _d !== void 0 ? _d : '<test name >'}`;
                const statusChalk = this.mapJourneyRunStatusToColor(journeyRun.status);
                table.push([
                    '',
                    `${journeyName}`,
                    journeyId,
                    journeyBrowser,
                    statusChalk(journeyStatus),
                    journeyRunToElapsedTime(journeyRun),
                ]);
            });
        });
        return table.toString();
    }
    maybeCapitalize(input) {
        if (input) {
            return (0, change_case_1.capitalCase)(input.replace('_', ' '));
        }
        return;
    }
    mapPlanRunStatusToColor(status) {
        switch (status) {
            case mablApi_1.PlanExecutionResult.StatusEnum.Queued:
                return chalk.gray;
            case mablApi_1.PlanExecutionResult.StatusEnum.Scheduled:
                return chalk.white;
            case mablApi_1.PlanExecutionResult.StatusEnum.Succeeded:
            case mablApi_1.PlanExecutionResult.StatusEnum.Completed:
                return chalk.green;
            case mablApi_1.PlanExecutionResult.StatusEnum.Failed:
                return chalk.red;
            case mablApi_1.PlanExecutionResult.StatusEnum.Terminated:
            case mablApi_1.PlanExecutionResult.StatusEnum.Cancelled:
                return chalk.yellow;
            default:
                return chalk.reset;
        }
    }
    mapJourneyRunStatusToColor(status) {
        switch (status) {
            case mablApi_1.TestRunResult.StatusEnum.Queued:
            case mablApi_1.TestRunResult.StatusEnum.RateLimited:
                return chalk.gray;
            case mablApi_1.TestRunResult.StatusEnum.Running:
                return chalk.white;
            case mablApi_1.TestRunResult.StatusEnum.Completed:
                return chalk.green;
            case mablApi_1.TestRunResult.StatusEnum.Failed:
                return chalk.red;
            case mablApi_1.TestRunResult.StatusEnum.Terminated:
            case mablApi_1.TestRunResult.StatusEnum.Skipped:
                return chalk.yellow;
            default:
                return chalk.reset;
        }
    }
}
exports.ExecutionResultPresenter = ExecutionResultPresenter;
function journeyRunToElapsedTime(journeyRun) {
    return (0, timeUtil_1.elapsedTimeToString)(journeyRun.start_time, journeyRun.stop_time);
}
function summaryToElapsedTime(summary) {
    return (0, timeUtil_1.elapsedTimeToString)(summary.start_time, summary.stop_time);
}
