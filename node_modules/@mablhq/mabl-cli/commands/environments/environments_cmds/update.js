"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mablApiClientFactory_1 = require("../../../api/mablApiClientFactory");
const constants_1 = require("../../constants");
const util_1 = require("../../commandUtil/util");
const chalk_1 = __importDefault(require("chalk"));
const loggingProvider_1 = require("../../../providers/logging/loggingProvider");
const create_1 = require("./create");
exports.command = 'update <id>';
exports.describe = 'Update a mabl environment';
exports.builder = (yargs) => {
    (0, create_1.addUpdateEnvCommands)(yargs, false).positional(constants_1.CommandArgId, {
        describe: 'ID of environment to update',
        type: 'string',
        nargs: 1,
        demand: 'id argument required',
    });
};
exports.handler = (0, util_1.failWrapper)(updateEnvironment);
async function updateEnvironment(parsed) {
    var _a;
    let environment;
    try {
        const apiClient = await mablApiClientFactory_1.MablApiClientFactory.createApiClient();
        environment = {
            name: parsed[constants_1.CommandArgName],
            description: parsed[constants_1.CommandArgDescription],
            preview: parsed[constants_1.CommandArgPreview],
            link_agent_label: parsed[constants_1.CommandArgLinkLabel],
            use_link_agent: !!parsed[constants_1.CommandArgLinkLabel],
            link_bypass_mabl_proxy: parsed[constants_1.CommandArgLinkBypass],
            source_control_tag_target: parsed[constants_1.CommandArgMablBranch],
            use_source_control_tag: !!parsed[constants_1.CommandArgMablBranch],
            variables: parsed[constants_1.CommandArgVariables],
        };
        environment = await apiClient.updateEnvironment(parsed[constants_1.CommandArgId], environment);
        loggingProvider_1.logger.info(chalk_1.default.green(`Environment ${chalk_1.default.bold((_a = environment.id) !== null && _a !== void 0 ? _a : '')} UPDATED`));
    }
    catch (error) {
        throw new Error(`Error updating environment: ${error}`);
    }
    return environment.id;
}
