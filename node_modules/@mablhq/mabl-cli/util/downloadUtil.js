"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.moveDownloadedFileToProcessed = exports.awaitDownload = exports.getAwaitDownloadTimeout = exports.PROCESSED_DIR_NAME = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const fsExtra = __importStar(require("fs-extra"));
const util = __importStar(require("util"));
const testsUtil_1 = require("../commands/tests/testsUtil");
const AWAIT_DOWNLOAD_MAX_TIMEOUT_MILLIS = 60000;
const FILE_MIN_STABLE_TIME_MILLIS = 3000;
const AWAIT_DOWNLOAD_POLLING_INTERVAL_MILLISECONDS = 500;
exports.PROCESSED_DIR_NAME = 'Processed';
function getAwaitDownloadTimeout() {
    return AWAIT_DOWNLOAD_MAX_TIMEOUT_MILLIS;
}
exports.getAwaitDownloadTimeout = getAwaitDownloadTimeout;
async function awaitDownload(downloadDirectory, filePathSuffix, timeoutMillis = getAwaitDownloadTimeout()) {
    const startTime = Date.now();
    let foundDownloadPath;
    let downloadComplete = false;
    while (Date.now() - timeoutMillis < startTime && !downloadComplete) {
        const latestFile = await getLatestFile(downloadDirectory, filePathSuffix);
        if (latestFile) {
            downloadComplete = true;
            foundDownloadPath = latestFile;
        }
        else {
            await (0, testsUtil_1.sleep)(AWAIT_DOWNLOAD_POLLING_INTERVAL_MILLISECONDS);
        }
    }
    return foundDownloadPath;
}
exports.awaitDownload = awaitDownload;
async function getLatestFile(downloadDirectory, filePathSuffix) {
    const readDirectoryAsync = util.promisify(fs.readdir);
    const filesInDownloadDir = await readDirectoryAsync(downloadDirectory);
    let latestFileTime = 0;
    let latestFilePath;
    filesInDownloadDir.forEach((fileName) => {
        const fullPath = `${downloadDirectory}/${fileName}`;
        try {
            const stats = fs.statSync(path.normalize(fullPath));
            if (stats.isFile() &&
                stats.ctimeMs > latestFileTime &&
                Date.now() - stats.mtimeMs >= FILE_MIN_STABLE_TIME_MILLIS &&
                !fullPath.includes('.crDownload') &&
                fullPath.endsWith(filePathSuffix)) {
                latestFileTime = stats.ctimeMs;
                latestFilePath = fullPath;
            }
        }
        catch {
        }
    });
    return latestFilePath;
}
function moveDownloadedFileToProcessed(downloadDirectory, fileName) {
    const processedDirectory = path.join(downloadDirectory, exports.PROCESSED_DIR_NAME);
    const sourceLocation = path.join(downloadDirectory, fileName);
    const destinationLocation = path.join(processedDirectory, fileName);
    fsExtra.ensureDirSync(processedDirectory);
    fsExtra.moveSync(sourceLocation, destinationLocation, { overwrite: true });
}
exports.moveDownloadedFileToProcessed = moveDownloadedFileToProcessed;
