"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMablStepV2WithMobileFindDescriptor = exports.isMablStepV2 = exports.MablStepV2 = void 0;
const MablStep_1 = require("./MablStep");
const StepWithMobileFindDescriptor_1 = require("./types/mobile/StepWithMobileFindDescriptor");
class MablStepV2 extends MablStep_1.MablStep {
    constructor(name, descriptor, actionCode) {
        super(name, [], [], actionCode);
        this.stepVersion = 2;
        this.descriptor = descriptor;
    }
    stepId() {
        return this.descriptor.id;
    }
    setStepId(id) {
        this.descriptor.id = id;
    }
    static fromYaml(stepName, stepDescriptor, actionCode) {
        return new MablStepV2(stepName, stepDescriptor, actionCode);
    }
    getStepName() {
        return this.name;
    }
    toStepDescriptor() {
        return this.descriptor;
    }
    getFormattedStep(_fullLocatorsOn) {
        return {
            [this.getStepName()]: {
                description: this.stepDescription(),
                ...this.descriptor,
            },
        };
    }
    stepDescription() {
        throw new Error('Step description not implemented');
    }
    isDisabled() {
        return !!this.descriptor.disabled;
    }
    setDisabled(disabled) {
        this.descriptor.disabled = disabled;
    }
    getDescriptionForLogging() {
        var _a;
        return (((_a = this.annotation) === null || _a === void 0 ? void 0 : _a.description) ||
            this.stepDescription() ||
            this.getStepName());
    }
    toLineDiffFormat() {
        const lineDiffProperties = {
            annotation: this.annotation,
            disabled: this.isDisabled(),
            descriptor: this.toStepDescriptor(),
        };
        return this.stringify(lineDiffProperties);
    }
}
exports.MablStepV2 = MablStepV2;
MablStepV2.mablScriptStepNames = [];
MablStepV2.yamlMablScriptNames = ['MablStepV2'];
function isMablStepV2(value) {
    if (value === undefined || value === null) {
        return false;
    }
    const mablStep = value;
    return !!mablStep.getStepVersion && mablStep.getStepVersion() === 2;
}
exports.isMablStepV2 = isMablStepV2;
function isMablStepV2WithMobileFindDescriptor(value) {
    return !!(isMablStepV2(value) && (0, StepWithMobileFindDescriptor_1.isStepWithMobileFindDescriptor)(value === null || value === void 0 ? void 0 : value.descriptor));
}
exports.isMablStepV2WithMobileFindDescriptor = isMablStepV2WithMobileFindDescriptor;
