"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateApiTestMessage = exports.createFileUploadDirectory = void 0;
const fs_1 = __importDefault(require("fs"));
const Globals_1 = require("../../Globals");
const mablApi_1 = require("../../mablApi");
const utils_1 = require("../utils");
function createFileUploadDirectory(testContext) {
    const dir = Globals_1.Globals.getUploadDirectory();
    const prefix = Globals_1.Globals.getUploadDirectoryPrefix();
    const uploadDirectoryName = `${dir}/${prefix}${Date.now()}-`;
    testContext.addFileUploadDir(uploadDirectoryName);
    return fs_1.default.mkdtempSync(uploadDirectoryName);
}
exports.createFileUploadDirectory = createFileUploadDirectory;
function validateApiTestMessage(request, response) {
    var _a, _b, _c;
    const authorizationHeader = request.get('authorization');
    if (authorizationHeader === undefined) {
        (0, utils_1.handleExecutionFailure)(response, 'Illegal authorization');
        return false;
    }
    const contentType = request.get('content-type');
    if ((contentType === null || contentType === void 0 ? void 0 : contentType.toLowerCase()) !== 'application/json') {
        (0, utils_1.handleExecutionFailure)(response, 'Illegal content type. Must be application/json');
        return false;
    }
    const pubsubMessage = request.body;
    if (typeof ((_a = pubsubMessage === null || pubsubMessage === void 0 ? void 0 : pubsubMessage.message) === null || _a === void 0 ? void 0 : _a.data) !== 'string') {
        (0, utils_1.handleExecutionFailure)(response, 'Illegal message data format');
        return false;
    }
    if (typeof (pubsubMessage === null || pubsubMessage === void 0 ? void 0 : pubsubMessage.subscription) !== 'string') {
        (0, utils_1.handleExecutionFailure)(response, 'Illegal message subscription format');
        return false;
    }
    if (((_c = (_b = pubsubMessage === null || pubsubMessage === void 0 ? void 0 : pubsubMessage.message) === null || _b === void 0 ? void 0 : _b.attributes) === null || _c === void 0 ? void 0 : _c.test_type) !==
        mablApi_1.TestTypeEnum.Api.toString()) {
        (0, utils_1.handleExecutionFailure)(response, 'Illegal test type');
        return false;
    }
    return true;
}
exports.validateApiTestMessage = validateApiTestMessage;
