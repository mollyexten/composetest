"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPlatformFromTestRun = exports.logTestResults = void 0;
const chalk_1 = __importDefault(require("chalk"));
const loggingProvider_1 = require("../../../providers/logging/loggingProvider");
const reporter_1 = require("../../../reporters/reporter");
const testsUtil_1 = require("../testsUtil");
const execution_1 = require("../../../execution");
async function logTestResults(results, parsed, commandStartTime, rerunCommandTemplate, apiClient, workspaceId, browser) {
    loggingProvider_1.logger.logNewLine();
    loggingProvider_1.logger.info(`Test count: ${results.numTotalTests}`);
    loggingProvider_1.logger.info(`Passed: ${results.numPassedTests}`);
    if (results.numPassedTests) {
        results.testResults.forEach((result) => {
            if (result.status === 'passed') {
                loggingProvider_1.logger.info(` - ${getTestResultDescription(result)} (${(0, testsUtil_1.calculateTotalTimeSeconds)(result.startTime, result.endTime)}s)`);
            }
        });
    }
    loggingProvider_1.logger.info(`Skipped: ${results.numSkippedTests}`);
    if (results.numSkippedTests) {
        results.testResults.forEach((result) => {
            if (result.status === 'skipped') {
                loggingProvider_1.logger.info(chalk_1.default.yellow(` - ${getTestResultDescription(result)}`));
            }
        });
    }
    loggingProvider_1.logger.info(`Failed: ${results.numFailedTests}`);
    if (results.numFailedTests) {
        results.testResults.forEach((result) => {
            if (result.status === 'failed') {
                loggingProvider_1.logger.info(chalk_1.default.red(` - ${getTestResultDescription(result)} (${(0, testsUtil_1.calculateTotalTimeSeconds)(result.startTime, result.endTime)}s)`));
            }
        });
        if (parsed.labels || parsed['from-plan-id'] || process.env.CI) {
            loggingProvider_1.logger.info(`Rerun any failed test with the following command template:`);
            loggingProvider_1.logger.info(`${chalk_1.default.magenta(rerunCommandTemplate)}`);
        }
    }
    loggingProvider_1.logger.info(`Total time: ${(0, testsUtil_1.calculateTotalTimeSeconds)(commandStartTime, Date.now())} seconds`);
    if (parsed.reporter) {
        await (0, reporter_1.handleReportingForTestsRun)(parsed.reporter, results, apiClient, workspaceId, parsed['reporter-options'], browser);
    }
}
exports.logTestResults = logTestResults;
function getTestResultDescription(result) {
    return `${result.testName}${result.scenarioName ? ` - Scenario: ${result.scenarioName}` : ''}`;
}
function getPlatformFromTestRun(testRun) {
    var _a, _b;
    const platform = (_b = (_a = testRun.journey_parameters) === null || _a === void 0 ? void 0 : _a.mobile_device) === null || _b === void 0 ? void 0 : _b.platform;
    if (!platform) {
        throw new Error(`Unable to determine mobile platform from test run: ${testRun.id}`);
    }
    return (0, execution_1.parsePlatformName)(platform);
}
exports.getPlatformFromTestRun = getPlatformFromTestRun;
