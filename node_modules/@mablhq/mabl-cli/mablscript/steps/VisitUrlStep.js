"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VisitUrlStep = void 0;
const MablStep_1 = require("../MablStep");
const MablAction_1 = require("../MablAction");
const domUtil_1 = require("../../domUtil");
class VisitUrlStep extends MablStep_1.MablStep {
    constructor(name, args, actions) {
        super(name, args, actions, 'visit_url');
        const arg = this.getActionArgs()[0];
        this.url = VisitUrlStep.normalizeUrl(arg);
    }
    getStepName() {
        return 'VisitUrl';
    }
    toStepDescriptor() {
        return {
            url: this.url,
            actionCode: this.actionCode,
        };
    }
    static fromYaml(_stepName, stepArgs) {
        const step = new VisitUrlStep('visit_url', [stepArgs.url], []);
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        const resolvedUrl = this.substituteMablscriptVariable((0, domUtil_1.escapeMablscriptString)(this.url.toString()));
        if (VisitUrlStep.isFileUrl(resolvedUrl) && !VisitUrlStep.isTestOverride()) {
            throw new Error('Access to local files is not permitted');
        }
        return `visit_url(${resolvedUrl})`;
    }
    getInputVariables() {
        return MablAction_1.MablAction.findUniqueVariableReferencesInValue(this.url);
    }
    static normalizeUrl(param) {
        const trimmed = param.trim();
        if (param === '') {
            throw new Error('Missing URL');
        }
        if (trimmed.indexOf('{{@') >= 0) {
            return trimmed;
        }
        if (trimmed.indexOf('[not yet evaluated]') >= 0) {
            throw new Error('Unresolved variable found in URL');
        }
        if (/^http[s]?:\/\//.test(trimmed)) {
            return trimmed;
        }
        if (VisitUrlStep.isFileUrl(trimmed)) {
            if (VisitUrlStep.isTestOverride()) {
                return trimmed;
            }
            throw new Error('Access to local files is not permitted');
        }
        return `http://${trimmed}`;
    }
    static isTestOverride() {
        return process.env.MABL_SIMULATION === 'mabl-local-testing';
    }
    static isFileUrl(param) {
        return (/^file:\/\//.test(param) || /^\\\\/.test(param) || /^\/+/.test(param));
    }
}
exports.VisitUrlStep = VisitUrlStep;
VisitUrlStep.mablScriptStepNames = ['visit_url'];
VisitUrlStep.yamlMablScriptNames = ['VisitUrl'];
