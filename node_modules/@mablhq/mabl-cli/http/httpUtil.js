"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postProcessHeaders = exports.getHttpAgent = exports.GENERAL_API_STEP_EXECUTION_ERROR_CODE = exports.EXECUTION_ENGINE_SSL_VERIFY = exports.USER_AGENT_HEADER = exports.USER_AGENT = void 0;
const agent_base_1 = require("agent-base");
const socks_proxy_agent_1 = require("socks-proxy-agent");
const pureUtil_1 = require("../util/pureUtil");
const MablHttpAgent_1 = require("./MablHttpAgent");
const RequestFilteringHttpAgent_1 = require("./RequestFilteringHttpAgent");
exports.USER_AGENT = `${(0, pureUtil_1.getCliName)()}@${(0, pureUtil_1.getCliVersion)()}`;
exports.USER_AGENT_HEADER = 'User-Agent';
exports.EXECUTION_ENGINE_SSL_VERIFY = false;
exports.GENERAL_API_STEP_EXECUTION_ERROR_CODE = '-1';
function getHttpAgent(shouldFilterHttpRequests, linkServers, proxyConfig) {
    const linkAgent = maybeGetSocksAgent(linkServers);
    if (linkAgent) {
        return MablHttpAgent_1.MablHttpAgent.createNewInstance({
            httpAgent: linkAgent,
            httpsAgent: linkAgent,
        });
    }
    else if (shouldFilterHttpRequests) {
        return RequestFilteringHttpAgent_1.RequestFilteringHttpAgent.createNewInstance();
    }
    return MablHttpAgent_1.MablHttpAgent.createNewInstance({ proxyConfig });
}
exports.getHttpAgent = getHttpAgent;
function maybeGetSocksAgent(linkServers) {
    if (!(linkServers === null || linkServers === void 0 ? void 0 : linkServers.length)) {
        return;
    }
    const agentOptions = linkServers.map((linkServer) => ({
        host: linkServer.forwarding_host,
        port: linkServer.forwarding_port,
        userId: linkServer.workspace_id,
        password: linkServer.label,
        tls: {
            rejectUnauthorized: false,
        },
    }));
    if (agentOptions.length === 1) {
        return new socks_proxy_agent_1.SocksProxyAgent(agentOptions[0]);
    }
    return new MultiSocksProxyAgent(agentOptions);
}
class MultiSocksProxyAgent extends agent_base_1.Agent {
    constructor(options) {
        super();
        this.agents = options.map((proxy) => new socks_proxy_agent_1.SocksProxyAgent(proxy));
    }
    async callback(req, opts) {
        return this.selectAgent().callback(req, opts);
    }
    selectAgent() {
        return this.agents[Math.floor(Math.random() * this.agents.length)];
    }
    destroy() {
        this.agents.forEach((agent) => agent.destroy());
    }
}
function postProcessHeaders(response) {
    var _a, _b, _c;
    const parsed = {};
    const rawHeaders = (_b = (_a = response.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.rawHeaders;
    if (rawHeaders) {
        for (let i = 0; i + 1 < rawHeaders.length; i += 2) {
            const headerName = rawHeaders[i].toLowerCase();
            const headerValue = rawHeaders[i + 1];
            parsed[headerName] = ((_c = parsed[headerName]) !== null && _c !== void 0 ? _c : []).concat(headerValue);
        }
    }
    return parsed;
}
exports.postProcessHeaders = postProcessHeaders;
