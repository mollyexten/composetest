"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetFilesStep = void 0;
const FindAction_1 = require("../actions/FindAction");
const MablAction_1 = require("../MablAction");
const domUtil_1 = require("../../domUtil");
const MablStepWithFindAction_1 = require("../MablStepWithFindAction");
class SetFilesStep extends MablStepWithFindAction_1.MablStepWithFindAction {
    constructor(name, args, actions) {
        super(name, args, actions, 'set_files');
        this.files = this.getActionArgs();
        this.validate();
        this.findAction = this.actions[0];
    }
    validate() {
        if (this.actions.length !== 1 && !(this.actions[0] instanceof FindAction_1.FindAction)) {
            throw new Error('Set files steps should have exactly on sub action and it should be a find');
        }
    }
    getStepName() {
        return 'SetFiles';
    }
    toStepDescriptor() {
        const formatted = {};
        formatted.files = this.files;
        const find = this.findAction.toDescriptor();
        switch (find.findType) {
            case domUtil_1.FindType.FIND_FIRST:
            case domUtil_1.FindType.FIND_LAST:
            case domUtil_1.FindType.FIND_ANY:
            case domUtil_1.FindType.FIND_ONE:
                formatted.find = find;
                formatted.descriptorToActionMap = new Map().set(find, this.findAction);
                return formatted;
            default:
                throw new Error(`Error generating step descriptor for ${this.getStepName()}: Unexpected find type ${find.findType}`);
        }
    }
    getFormattedStep(_fullLocatorsOn) {
        const step = {
            SetFiles: {
                ...super.annotationsAsYml(),
                ...this.findAction.toYaml(),
                files: this.files,
            },
        };
        if (this.stepId()) {
            step.SetFiles.id = this.stepId();
        }
        return step;
    }
    static fromYaml(_stepName, stepArgs) {
        const step = new SetFilesStep('set_files', stepArgs.files, [
            FindAction_1.FindAction.findActionFromStepArgs(stepArgs),
        ]);
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        const files = this.files
            .map((key) => (0, MablAction_1.convertObjectToMablscriptArgs)(key))
            .join(', ');
        return `${this.findAction.toMablscript()}.set_files(${files})`;
    }
    getInputVariables() {
        return this.findAction.getInputVariables();
    }
}
exports.SetFilesStep = SetFilesStep;
SetFilesStep.mablScriptStepNames = ['set_files'];
SetFilesStep.yamlMablScriptNames = ['SetFiles'];
