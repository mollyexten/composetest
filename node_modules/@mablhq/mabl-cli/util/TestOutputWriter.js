"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalTestOutputWriter = void 0;
const fs = __importStar(require("fs"));
const CloudStorageWriter_1 = __importDefault(require("./CloudStorageWriter"));
const loggingProvider_1 = require("../providers/logging/loggingProvider");
const crypto_1 = __importDefault(require("crypto"));
const path_1 = __importDefault(require("path"));
const EXECUTION_OUTPUT_PATH_PREFIX = 'execution-output';
const MAX_PATH_LENGTH = 1024;
class LocalTestOutputWriter {
    constructor(outputDir) {
        this.outputDir = outputDir;
    }
    write(name, _contentType, data) {
        const localPath = `${this.outputDir}/${name}`;
        this.maybeCreateDirectory(localPath);
        fs.writeFileSync(localPath, data);
        return Promise.resolve(localPath);
    }
    writeObjectAsJson(name, data, replacer, reviver) {
        const localPath = `${this.outputDir}/${name}`;
        this.maybeCreateDirectory(localPath);
        if (replacer || reviver) {
            data = JSON.parse(JSON.stringify(data, replacer), reviver);
        }
        fs.writeFileSync(localPath, JSON.stringify(data));
        return Promise.resolve(localPath);
    }
    maybeCreateDirectory(localPath) {
        const directory = path_1.default.dirname(localPath);
        if (!fs.existsSync(directory)) {
            fs.mkdirSync(directory, { recursive: true });
        }
    }
}
exports.LocalTestOutputWriter = LocalTestOutputWriter;
class CloudOutputWriter {
    constructor(projectId, workspaceId, applicationId, planId, planRunId, testRunId) {
        this.storageWriter = new CloudStorageWriter_1.default(projectId, workspaceId);
        this.applicationId = applicationId;
        this.planId = planId;
        this.planRunId = planRunId;
        this.testRunId = testRunId;
    }
    async writeObjectAsJson(name, data, replacer, reviver) {
        if (replacer || reviver) {
            data = JSON.parse(JSON.stringify(data, replacer), reviver);
        }
        return this.write(name, 'application/json', Buffer.from(JSON.stringify(data)));
    }
    async write(name, contentType, data) {
        const path = this.nameToFullPath(name);
        await this.storageWriter.write(path, contentType, data);
        return `${this.storageWriter.bucketName()}/${path}`;
    }
    randomPathComponent() {
        return (crypto_1.default
            .randomBytes(3)
            .toString('base64url')
            .replace(/-/g, 'm')
            .replace(/_/g, 'a')
            .toLowerCase());
    }
    nameToFullPath(name) {
        const directoryPath = `${this.applicationId}/${this.planId}/${this.planRunId}/${this.testRunId}`;
        const randomComponent = this.randomPathComponent();
        const fullPath = `${EXECUTION_OUTPUT_PATH_PREFIX}/${randomComponent}/${directoryPath}/${name}`;
        if (fullPath.length <= MAX_PATH_LENGTH) {
            return fullPath;
        }
        loggingProvider_1.logger.info(`WARNING: Truncating path longer than ${MAX_PATH_LENGTH}: ${fullPath}`);
        const overage = fullPath.length - MAX_PATH_LENGTH;
        const truncatedName = name.substring(overage);
        return `${EXECUTION_OUTPUT_PATH_PREFIX}/${randomComponent}/${directoryPath}/${truncatedName}`;
    }
}
exports.default = CloudOutputWriter;
