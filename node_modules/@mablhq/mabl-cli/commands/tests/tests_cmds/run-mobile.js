"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const defaultEnv_1 = require("../../../env/defaultEnv");
const execution_1 = require("../../../execution");
const mablApi_1 = require("../../../mablApi");
const loggingProvider_1 = require("../../../providers/logging/loggingProvider");
const util_1 = require("../../commandUtil/util");
const constants_1 = require("../../constants");
const testsUtil_1 = require("../testsUtil");
const runUtils_1 = require("./runUtils");
const MobileAppFileCache_1 = require("../../../util/MobileAppFileCache");
const fs = __importStar(require("fs"));
const resourceUtil_1 = require("../../../util/resourceUtil");
const mablApiClientFactory_1 = require("../../../api/mablApiClientFactory");
const chalk = require('chalk');
const execution = require('../../../execution/index');
exports.command = `run-mobile`;
exports.describe = 'Run a mobile test locally';
exports.builder = (yargs) => {
    yargs
        .example('$0 tests run-mobile --id <id> --app-file <path> --platform <platform>', 'run mobile test locally by id')
        .option(constants_1.CommandArgId, {
        describe: 'The id of the test to run',
        type: 'string',
    })
        .option(constants_1.CommandArgMobileBuildFilePath, {
        alias: 'app-file',
        describe: 'The path to the mobile application binary',
        type: 'string',
    })
        .option(constants_1.CommandArgMobileBuildFileId, {
        describe: 'The ID of a previously uploaded mobile app file',
        type: 'string',
    })
        .option(constants_1.CommandArgMobilePlatform, {
        describe: 'The mobile platform',
        defaultDescription: 'inferred from app binary extension',
        type: 'string',
        choices: [mablApi_1.MobilePlatformEnum.Android, mablApi_1.MobilePlatformEnum.Ios],
    })
        .option(constants_1.CommandArgWorkspaceId, {
        alias: constants_1.CommandArgAliases.WorkspaceId,
        describe: 'Workspace to run against',
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgReporter, {
        describe: 'Output test run information for specified reporter',
        hidden: true,
        type: 'string',
        choices: [constants_1.Reporter.Mochawesome],
    })
        .option(constants_1.CommandArgTestRunId, {
        describe: 'The id of the test run to pull config from',
        type: 'string',
    })
        .option(constants_1.CommandArgReporterOptions, {
        describe: 'Reporter options as comma separated key/values pairs. e.g. "reportDir=path/to,json=true"',
        hidden: true,
        type: 'string',
    })
        .option(constants_1.CommandArgMobileDeviceName, {
        describe: 'Full name of the device to use for the test',
        hidden: false,
        type: 'string',
    })
        .option(constants_1.CommandArgMablBranch, {
        describe: 'Mabl branch to run test against',
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgMablBranchChangesOnly, {
        describe: 'Only execute tests changed on specified mabl branch',
        type: 'boolean',
        default: false,
    })
        .implies(constants_1.CommandArgMablBranchChangesOnly, constants_1.CommandArgMablBranch)
        .option(constants_1.CommandArgLabelsInclude, {
        describe: 'Space delimited test labels. Run tests that match any label.',
        type: 'array',
        conflicts: [constants_1.CommandArgId],
    })
        .option(constants_1.CommandArgLabelsExclude, {
        describe: 'Space delimited test labels. Exclude tests that match any label.',
        type: 'array',
        conflicts: [constants_1.CommandArgId],
    })
        .option(constants_1.CommandArgRecordVideoPath, {
        hidden: true,
        describe: 'The path of a directory to save a video recording of the test to',
        type: 'string',
    })
        .implies(constants_1.CommandArgReporterOptions, constants_1.CommandArgReporter)
        .middleware(inferMobilePlatform)
        .check((argv) => {
        (0, testsUtil_1.validateRunCommandWithLabels)(argv[constants_1.CommandArgId], argv[constants_1.CommandArgLabelsInclude], argv[constants_1.CommandArgLabelsExclude], argv[constants_1.CommandArgTestRunId], argv[constants_1.CommandArgFromPlanId], true, undefined);
        validateMobileCommand(argv[constants_1.CommandArgMobileBuildFilePath], argv[constants_1.CommandArgMobileBuildFileId]);
        return true;
    });
};
const exitCodeOnError = 1;
exports.handler = (0, util_1.failWrapper)(run, exitCodeOnError);
function validateMobileCommand(appFile, appFileId) {
    if (appFile && appFileId) {
        throw new Error(`Only one of { --${constants_1.CommandArgMobileBuildFilePath}, --${constants_1.CommandArgMobileBuildFileId} } may be specified`);
    }
}
async function run(parsed) {
    const commandStartTime = Date.now();
    let workspaceId;
    try {
        workspaceId = await (0, util_1.getWorkspaceId)(parsed);
    }
    catch {
    }
    const parentDirOfNodeModulesDir = (0, resourceUtil_1.findNodeModulesDirectories)()[0];
    const mobileToolsInstalled = fs.existsSync((0, path_1.resolve)(parentDirOfNodeModulesDir, 'node_modules/appium-uiautomator2-driver'));
    if (!mobileToolsInstalled) {
        loggingProvider_1.logger.error(`[ERROR] Missing the mobile tools for running tests, run ${chalk.magenta('mabl config install mobile-tools')} to install them`);
        return;
    }
    let platformName;
    if (parsed[constants_1.CommandArgTestRunId]) {
        const apiClient = await mablApiClientFactory_1.MablApiClientFactory.createApiClient();
        const testRun = await apiClient.getJourneyRun(parsed[constants_1.CommandArgTestRunId]);
        platformName = (0, runUtils_1.getPlatformFromTestRun)(testRun);
    }
    else {
        platformName = (0, execution_1.parsePlatformName)(parsed[constants_1.CommandArgMobilePlatform]);
    }
    await validateSystemRequirements(platformName, parsed[constants_1.CommandArgMobileDeviceName]);
    const testRunnerConfig = {
        _cliCreated: true,
        branchName: parsed[constants_1.CommandArgMablBranch],
        branchChangesOnly: parsed[constants_1.CommandArgMablBranchChangesOnly],
        filterHttpRequests: false,
        labelsExclude: parsed[constants_1.CommandArgLabelsExclude],
        labelsInclude: parsed[constants_1.CommandArgLabelsInclude],
        runId: parsed[constants_1.CommandArgTestRunId],
        testId: parsed.id,
        workspaceId,
        mobileConfig: {
            mobileAppFileId: parsed[constants_1.CommandArgMobileBuildFileId],
            path: parsed[constants_1.CommandArgMobileBuildFilePath],
            platformName,
            avdName: parsed[constants_1.CommandArgMobileDeviceName],
            recordVideoPath: parsed[constants_1.CommandArgRecordVideoPath],
            udid: parsed[constants_1.CommandArgMobileDeviceName],
        },
    };
    loggingProvider_1.logger.info('Warming up test runner...');
    const mablTestsRunner = await execution.createMobileTestsRunner(testRunnerConfig);
    const results = await mablTestsRunner.run();
    if ((mablTestsRunner === null || mablTestsRunner === void 0 ? void 0 : mablTestsRunner.mablTestRunners) !== undefined) {
        mablTestsRunner.mablTestRunners
            .filter((tr) => tr instanceof execution_1.MablTestRunner)
            .forEach((tr) => {
            const testContext = tr.testContext;
            (0, testsUtil_1.cleanupTestResources)(testContext);
        });
    }
    await (0, runUtils_1.logTestResults)(results, parsed, commandStartTime, generateRunCommandTemplate(parsed, results), mablTestsRunner.apiClient);
    if (!results.success && !testRunnerConfig.keepBrowserOpen) {
        process.exit(1);
    }
}
function generateRunCommandTemplate(parsed, testResults) {
    var _a, _b, _c, _d, _e, _f, _g;
    const testResult = testResults.testResults[0];
    let templateCommand = `${defaultEnv_1.SCRIPT_NAME} ${parsed._.join(' ')} \\\n`;
    if ((_a = testResult === null || testResult === void 0 ? void 0 : testResult.rerunConfig) === null || _a === void 0 ? void 0 : _a.environmentId) {
        templateCommand = `${templateCommand} --${constants_1.CommandArgEnvironmentId} ${(_b = testResult === null || testResult === void 0 ? void 0 : testResult.rerunConfig) === null || _b === void 0 ? void 0 : _b.environmentId} \\\n`;
    }
    if ((_c = testResult === null || testResult === void 0 ? void 0 : testResult.rerunConfig) === null || _c === void 0 ? void 0 : _c.credentialsId) {
        templateCommand = `${templateCommand} --${constants_1.CommandArgCredentials} ${(_d = testResult === null || testResult === void 0 ? void 0 : testResult.rerunConfig) === null || _d === void 0 ? void 0 : _d.credentialsId} \\\n`;
    }
    if ((_e = testResult === null || testResult === void 0 ? void 0 : testResult.rerunConfig) === null || _e === void 0 ? void 0 : _e.url) {
        templateCommand = `${templateCommand} --${constants_1.CommandArgUrl} ${(_f = testResult === null || testResult === void 0 ? void 0 : testResult.rerunConfig) === null || _f === void 0 ? void 0 : _f.url} \\\n`;
    }
    if ((_g = testResult === null || testResult === void 0 ? void 0 : testResult.rerunConfig) === null || _g === void 0 ? void 0 : _g.branch) {
        templateCommand = `${templateCommand} --${constants_1.CommandArgMablBranch} ${testResult.rerunConfig.branch} \\\n`;
    }
    const testIdVal = parsed.id ? parsed.id : '<TEST-ID>';
    templateCommand = `${templateCommand} --${constants_1.CommandArgId} ${testIdVal}`;
    return templateCommand;
}
async function validateSystemRequirements(platform, deviceName) {
    let requirements;
    if (platform === mablApi_1.MobilePlatformEnum.Ios) {
        requirements = await (0, execution_1.systemIsSimulatorReady)(deviceName);
    }
    else {
        requirements = await (0, execution_1.systemIsEmulatorReady)(deviceName);
    }
    if (!requirements.requirementsMet) {
        const errorMessages = [];
        Object.values(requirements.checks).forEach((requirement) => {
            if (!requirement.requirementsMet && requirement.informationalText) {
                errorMessages.push(requirement.informationalText);
            }
        });
        loggingProvider_1.logger.error('Failed while checking system requirements for testing mobile code. Errors: ');
        for (const errorMessage of errorMessages) {
            loggingProvider_1.logger.error(` * ${errorMessage}`);
        }
        process.exit(exitCodeOnError);
    }
}
async function inferMobilePlatform(argv) {
    if (!argv[constants_1.CommandArgMobilePlatform] && argv[constants_1.CommandArgMobileBuildFileId]) {
        if (argv[constants_1.CommandArgMobileBuildFileId]) {
            try {
                const { platform } = await new MobileAppFileCache_1.MobileAppFileCache().getMobileAppFileImmutableFields(argv[constants_1.CommandArgMobileBuildFileId]);
                if (platform) {
                    argv[constants_1.CommandArgMobilePlatform] = platform.toString().toLowerCase();
                    return;
                }
            }
            catch (error) {
                loggingProvider_1.logger.warn(chalk.yellow(`Warning: Unable to fetch mobile app file ${argv[constants_1.CommandArgMobileBuildFilePath]}: ${error}`));
            }
        }
        const extension = (0, path_1.extname)(argv[constants_1.CommandArgMobileBuildFilePath]).toLowerCase();
        switch (extension) {
            case '.apk':
                argv[constants_1.CommandArgMobilePlatform] = mablApi_1.MobilePlatformEnum.Android;
                break;
            case '.ipa':
            case '.app':
                argv[constants_1.CommandArgMobilePlatform] = mablApi_1.MobilePlatformEnum.Ios;
                break;
            default:
                loggingProvider_1.logger.warn(chalk.yellow(`Warning: Unable to infer the mobile platform from the file extension: '${extension}'  Please provide a --platform command line argument.`));
        }
    }
}
