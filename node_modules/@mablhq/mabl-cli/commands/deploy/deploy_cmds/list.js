"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const js_yaml_1 = require("js-yaml");
const cli_table3_1 = __importDefault(require("cli-table3"));
const moment = require("moment");
const mablApiClientFactory_1 = require("../../../api/mablApiClientFactory");
const util_1 = require("../../commandUtil/util");
const list_1 = require("../../commandUtil/list");
const loggingProvider_1 = require("../../../providers/logging/loggingProvider");
const constants_1 = require("../../constants");
exports.command = 'list';
exports.describe = 'List recent mabl deployment events';
exports.builder = (0, list_1.getListBuilderOptions)('deployments');
exports.handler = (0, util_1.failWrapper)(listDeployments);
async function listDeployments(parsed) {
    const output = parsed.output;
    const limit = parsed.limit;
    const workspaceId = await (0, util_1.getWorkspaceId)(parsed);
    const apiClient = await mablApiClientFactory_1.MablApiClientFactory.createApiClient();
    const deployments = await apiClient.getDeploymentEvents(workspaceId, limit);
    printDeployments(deployments, output);
    return deployments.length;
}
function printDeployments(deployments, output) {
    switch (output) {
        case 'json':
            loggingProvider_1.logger.info(JSON.stringify(deployments, null, 2));
            break;
        case 'yaml':
            loggingProvider_1.logger.info((0, js_yaml_1.dump)(deployments));
            break;
        default:
            const table = new cli_table3_1.default({
                head: ['ID', 'Time', 'Application/Env.', 'Pass', 'Fail', 'Total'],
            });
            deployments.forEach((deployment) => {
                var _a, _b, _c, _d, _e, _f;
                table.push([
                    { rowSpan: 2, content: deployment.id, vAlign: 'center' },
                    {
                        rowSpan: 2,
                        content: moment
                            .utc(deployment.received_time)
                            .format(constants_1.ListTimeFormat),
                        vAlign: 'center',
                    },
                    deployment.application_id || 'none',
                    {
                        rowSpan: 2,
                        content: (_b = (_a = deployment.run_result) === null || _a === void 0 ? void 0 : _a.journey_execution_metrics) === null || _b === void 0 ? void 0 : _b.passed,
                        vAlign: 'center',
                        hAlign: 'center',
                    },
                    {
                        rowSpan: 2,
                        content: (_d = (_c = deployment.run_result) === null || _c === void 0 ? void 0 : _c.journey_execution_metrics) === null || _d === void 0 ? void 0 : _d.failed,
                        vAlign: 'center',
                        hAlign: 'center',
                    },
                    {
                        rowSpan: 2,
                        content: (_f = (_e = deployment.run_result) === null || _e === void 0 ? void 0 : _e.journey_execution_metrics) === null || _f === void 0 ? void 0 : _f.total,
                        vAlign: 'center',
                        hAlign: 'center',
                    },
                ], [deployment.environment_id || 'none']);
            });
            loggingProvider_1.logger.info(table.toString());
            break;
    }
}
