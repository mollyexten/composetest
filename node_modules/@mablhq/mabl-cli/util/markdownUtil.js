"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.summaryToElapsedTime = exports.journeyRunToElapsedTime = exports.maybeCapitalize = exports.humanizedMablStatusToGithubIcon = exports.humanizeMablStatus = exports.formatResultsAsGithubMarkdown = void 0;
const change_case_1 = require("change-case");
const mablApi_1 = require("../mablApi");
const timeUtil_1 = require("./timeUtil");
const table = require('markdown-table');
var HumanizedMablStatuses;
(function (HumanizedMablStatuses) {
    HumanizedMablStatuses["Failed"] = "Failed";
    HumanizedMablStatuses["Passed"] = "Passed";
    HumanizedMablStatuses["RateLimited"] = "Quota Reached";
    HumanizedMablStatuses["Running"] = "Running";
    HumanizedMablStatuses["Stopped"] = "Stopped";
})(HumanizedMablStatuses || (HumanizedMablStatuses = {}));
function formatResultsAsGithubMarkdown(results) {
    var _a;
    const tableRows = [];
    tableRows.push(['Plan', 'Test', 'Browser', 'Status', 'Run Time']);
    const finalExecutions = (_a = results === null || results === void 0 ? void 0 : results.executions) !== null && _a !== void 0 ? _a : [];
    finalExecutions.forEach((summary) => {
        var _a, _b, _c, _d, _e, _f, _g;
        const retryPrefix = ((_a = summary === null || summary === void 0 ? void 0 : summary.plan_execution) === null || _a === void 0 ? void 0 : _a.is_retry) ? '[Retry] ' : '';
        const planName = retryPrefix + ((_c = (_b = summary.plan) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : '<plan name unavailable>');
        const humanizedPlanRunStatus = humanizeMablStatus((_d = summary === null || summary === void 0 ? void 0 : summary.plan_execution) === null || _d === void 0 ? void 0 : _d.status);
        const planRunStatus = humanizedMablStatusToGithubIcon(humanizedPlanRunStatus) +
            ' ' +
            maybeCapitalize(humanizedPlanRunStatus === null || humanizedPlanRunStatus === void 0 ? void 0 : humanizedPlanRunStatus.toString());
        const planHref = (_e = summary.plan) === null || _e === void 0 ? void 0 : _e.app_href;
        const journeyMap = new Map();
        (_f = summary.journeys) === null || _f === void 0 ? void 0 : _f.forEach((journeySummary) => journeyMap.set(journeySummary.id, journeySummary));
        tableRows.push([
            `[${planName}](${planHref})`,
            '---',
            '---',
            planRunStatus,
            summaryToElapsedTime(summary),
        ]);
        (_g = summary.journey_executions) === null || _g === void 0 ? void 0 : _g.forEach((journeyRun) => {
            const humanizedJourneyRunStatus = humanizeMablStatus(journeyRun.status);
            const journeyStatus = humanizedMablStatusToGithubIcon(humanizedJourneyRunStatus) +
                ' ' +
                maybeCapitalize(humanizedJourneyRunStatus === null || humanizedJourneyRunStatus === void 0 ? void 0 : humanizedJourneyRunStatus.toString());
            const journeyBrowser = maybeCapitalize(journeyRun.browser_type);
            const journeySummary = journeyMap.get(journeyRun.journey_id);
            let journeyLabel = '<test name unavailable>';
            if (journeySummary) {
                journeyLabel = `[${retryPrefix}${journeySummary.name}](${journeySummary.app_href})`;
            }
            tableRows.push([
                '',
                journeyLabel,
                journeyBrowser,
                `[${journeyStatus}](${journeyRun.app_href})`,
                journeyRunToElapsedTime(journeyRun),
            ]);
        });
    });
    return table(tableRows, {
        align: ['l', 'l', 'l', 'l'],
    });
}
exports.formatResultsAsGithubMarkdown = formatResultsAsGithubMarkdown;
function humanizeMablStatus(status) {
    if (status) {
        switch (status) {
            case mablApi_1.TestRunResult.StatusEnum.Completed:
            case mablApi_1.PlanExecutionResult.StatusEnum.Completed:
            case mablApi_1.PlanExecutionResult.StatusEnum.Succeeded:
                return HumanizedMablStatuses.Passed;
            case mablApi_1.TestRunResult.StatusEnum.Failed:
            case mablApi_1.PlanExecutionResult.StatusEnum.Failed:
                return HumanizedMablStatuses.Failed;
            case mablApi_1.TestRunResult.StatusEnum.Terminated:
            case mablApi_1.PlanExecutionResult.StatusEnum.Terminated:
            case mablApi_1.PlanExecutionResult.StatusEnum.Cancelled:
                return HumanizedMablStatuses.Stopped;
            case mablApi_1.TestRunResult.StatusEnum.Queued:
            case mablApi_1.PlanExecutionResult.StatusEnum.Queued:
            case mablApi_1.PlanExecutionResult.StatusEnum.Scheduled:
            case mablApi_1.PlanExecutionResult.StatusEnum.Scheduling:
            case mablApi_1.TestRunResult.StatusEnum.Running:
            case mablApi_1.PlanExecutionResult.StatusEnum.PostExecution:
            case mablApi_1.PlanExecutionResult.StatusEnum.PreExecution:
                return HumanizedMablStatuses.Running;
            case mablApi_1.TestRunResult.StatusEnum.RateLimited:
                return HumanizedMablStatuses.RateLimited;
        }
    }
    return;
}
exports.humanizeMablStatus = humanizeMablStatus;
function humanizedMablStatusToGithubIcon(status) {
    if (!status) {
        return '';
    }
    switch (status) {
        case HumanizedMablStatuses.Passed:
            return ':heavy_check_mark:';
        case HumanizedMablStatuses.Failed:
            return ':x:';
        case HumanizedMablStatuses.Stopped:
            return ':large_orange_diamond:';
        case HumanizedMablStatuses.Running:
            return 'ðŸ”ƒ';
        default:
            throw new Error(`Unhandled humanized status [${status}]`);
    }
}
exports.humanizedMablStatusToGithubIcon = humanizedMablStatusToGithubIcon;
function maybeCapitalize(input) {
    if (input) {
        return (0, change_case_1.capitalCase)(input.replace('_', ' '));
    }
    return '';
}
exports.maybeCapitalize = maybeCapitalize;
function journeyRunToElapsedTime(journeyRun) {
    return (0, timeUtil_1.elapsedTimeToString)(journeyRun.start_time, journeyRun.stop_time);
}
exports.journeyRunToElapsedTime = journeyRunToElapsedTime;
function summaryToElapsedTime(summary) {
    return (0, timeUtil_1.elapsedTimeToString)(summary.start_time, summary.stop_time);
}
exports.summaryToElapsedTime = summaryToElapsedTime;
