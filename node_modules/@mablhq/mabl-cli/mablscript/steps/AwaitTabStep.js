"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasCustomFindOptions = exports.AwaitTabStep = void 0;
const domUtil_1 = require("../../domUtil");
const MablStep_1 = require("../MablStep");
class AwaitTabStep extends MablStep_1.MablStep {
    constructor(name, args, actions) {
        super(name, args, actions, 'await_tab');
        this.tab = this.getActionArgs()[0];
    }
    getStepName() {
        return 'AwaitTab';
    }
    toStepDescriptor() {
        return {
            tab: this.tab,
            actionCode: this.actionCode,
        };
    }
    static fromYaml(_stepName, stepArgs) {
        const step = new AwaitTabStep('await_tab', [stepArgs.tab], []);
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        return `await_tab(${AwaitTabStep.getMablscriptSelectorFromTabFindAction(this.tab)})`;
    }
    static hasCustomFindOptions(tab) {
        var _a, _b;
        return Object.keys((_b = (_a = tab.configuration) === null || _a === void 0 ? void 0 : _a.propertyPreferences) !== null && _b !== void 0 ? _b : {}).length > 0;
    }
    static getMablscriptSelectorFromTabFindAction(tab) {
        const mablscriptSelectorChunks = ['selector_type: "tab"'];
        if (tab.title !== undefined) {
            mablscriptSelectorChunks.push(`title: "${(0, domUtil_1.escapeMablscriptString)(tab.title)}"`);
        }
        if (tab.url !== undefined) {
            mablscriptSelectorChunks.push(`url: "${(0, domUtil_1.escapeMablscriptString)(tab.url)}"`);
        }
        if (tab.uuid !== undefined) {
            mablscriptSelectorChunks.push(`uuid: "${(0, domUtil_1.escapeMablscriptString)(tab.uuid)}"`);
        }
        let descriptor = mablscriptSelectorChunks.join(', ');
        if (tab.configuration) {
            descriptor = `${descriptor}, ${AwaitTabStep.getConfigurationString(tab)}`;
        }
        return `{${descriptor}}`;
    }
    static getConfigurationString(tabSelector) {
        let configString;
        if (hasCustomFindOptions(tabSelector)) {
            configString = (0, domUtil_1.buildStepArgumentString)({
                params: { ...tabSelector.configuration },
                legacy: true,
            });
        }
        if (configString) {
            return `configuration: ${configString}`;
        }
        return '';
    }
}
exports.AwaitTabStep = AwaitTabStep;
AwaitTabStep.mablScriptStepNames = ['await_tab'];
AwaitTabStep.yamlMablScriptNames = ['AwaitTab'];
function hasCustomFindOptions(tab) {
    return AwaitTabStep.hasCustomFindOptions(tab);
}
exports.hasCustomFindOptions = hasCustomFindOptions;
