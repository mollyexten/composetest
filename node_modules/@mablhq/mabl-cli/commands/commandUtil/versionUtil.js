"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compareNodeVersions = exports.extractNodeVersionTuple = exports.nodeVersionToString = void 0;
function nodeVersionToString(nodeVersion) {
    return `v${nodeVersion.major}.${nodeVersion.minor}.${nodeVersion.point}`;
}
exports.nodeVersionToString = nodeVersionToString;
const NODE_VERSION_REGEX = /(\d+)\.(\d+)(\.(\d+))?/;
function extractNodeVersionTuple(stringWithVersion) {
    var _a, _b, _c;
    const matches = stringWithVersion === null || stringWithVersion === void 0 ? void 0 : stringWithVersion.match(NODE_VERSION_REGEX);
    return {
        major: parseInt((_a = matches === null || matches === void 0 ? void 0 : matches[1]) !== null && _a !== void 0 ? _a : '0'),
        minor: parseInt((_b = matches === null || matches === void 0 ? void 0 : matches[2]) !== null && _b !== void 0 ? _b : '0'),
        point: parseInt((_c = matches === null || matches === void 0 ? void 0 : matches[4]) !== null && _c !== void 0 ? _c : '0'),
    };
}
exports.extractNodeVersionTuple = extractNodeVersionTuple;
function compareNodeVersions(left, right) {
    function toInt(version) {
        return version.major * 1000000 + version.minor * 1000 + version.point;
    }
    const leftInt = toInt(left);
    const rightInt = toInt(right);
    if (leftInt === rightInt) {
        return 0;
    }
    else if (leftInt > rightInt) {
        return 1;
    }
    return -1;
}
exports.compareNodeVersions = compareNodeVersions;
