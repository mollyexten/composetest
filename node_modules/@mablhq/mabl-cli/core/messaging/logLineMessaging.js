"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerConsoleLoggerForOutput = exports.LogLineColor = void 0;
const messaging_1 = require("./messaging");
const moment = require("moment");
const chalk_1 = __importDefault(require("chalk"));
const env_1 = require("../../env/env");
const loggingProvider_1 = require("../../providers/logging/loggingProvider");
var LogLineColor;
(function (LogLineColor) {
    LogLineColor["cyan"] = "cyan";
    LogLineColor["magenta"] = "magenta";
    LogLineColor["red"] = "red";
    LogLineColor["white"] = "white";
    LogLineColor["yellow"] = "yellow";
})(LogLineColor || (exports.LogLineColor = LogLineColor = {}));
function registerConsoleLoggerForOutput(eventEmitter) {
    eventEmitter
        .getOutputEventChannel()
        .on(messaging_1.EventChannelMessageType.outputLogLine, (line, timestamp, color, metadata) => {
        var _a;
        const stepNumberPrefix = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.stepNumberPrefix) !== null && _a !== void 0 ? _a : '';
        const lineWithPrefix = stepNumberPrefix + line;
        const formatted = color ? chalk_1.default[color](lineWithPrefix) : lineWithPrefix;
        if ((metadata === null || metadata === void 0 ? void 0 : metadata.shouldOutputInConsole) === false) {
            return;
        }
        if (timestamp) {
            let formattedTimestamp = '';
            formattedTimestamp = `${moment
                .unix(timestamp / 1000)
                .format('LTS')} - `;
            loggingProvider_1.logger.info(`${chalk_1.default.yellow(formattedTimestamp)}${formatted}`);
        }
        else {
            loggingProvider_1.logger.info(formatted);
        }
    });
    if (env_1.ENV === 'local' && env_1.DEBUG_EVENT_EMITTER) {
        eventEmitter
            .getOutputEventChannel()
            .on(messaging_1.EventChannelMessageType.coreAction, (action) => {
            loggingProvider_1.logger.info(action);
        });
    }
}
exports.registerConsoleLoggerForOutput = registerConsoleLoggerForOutput;
