"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const js_yaml_1 = require("js-yaml");
const mablApiClientFactory_1 = require("../../../api/mablApiClientFactory");
const util_1 = require("../../commandUtil/util");
const cli_table3_1 = __importDefault(require("cli-table3"));
const moment = require("moment");
const list_1 = require("../../commandUtil/list");
const loggingProvider_1 = require("../../../providers/logging/loggingProvider");
const constants_1 = require("../../constants");
exports.command = 'list';
exports.describe = 'List your databases';
exports.builder = (0, list_1.getListBuilderOptions)('databases');
exports.handler = (0, util_1.failWrapper)(listDatabases);
async function listDatabases(parsed) {
    const output = parsed.output;
    const limit = parsed.limit;
    const workspaceId = await (0, util_1.getWorkspaceId)(parsed);
    const apiClient = await mablApiClientFactory_1.MablApiClientFactory.createApiClient();
    const databases = await apiClient.getDatabaseConnections(workspaceId, limit);
    printConnections(databases, output);
    return databases.length;
}
function printConnections(connections, output) {
    switch (output) {
        case 'json':
            loggingProvider_1.logger.info(JSON.stringify(connections, null, 2));
            break;
        case 'yaml':
            loggingProvider_1.logger.info((0, js_yaml_1.dump)(connections));
            break;
        default:
            const table = new cli_table3_1.default({
                head: ['ID', 'Name', 'DB Type', 'Description', 'Created time'],
                wordWrap: true,
            });
            connections.forEach((connection) => {
                table.push([
                    { rowSpan: 1, content: connection.id, vAlign: 'center' },
                    { rowSpan: 1, content: connection.name, vAlign: 'center' },
                    {
                        rowSpan: 1,
                        content: connection.database_type,
                        vAlign: 'center',
                    },
                    {
                        rowSpan: 1,
                        content: connection.description || '---',
                        vAlign: 'center',
                    },
                    {
                        rowSpan: 1,
                        content: moment.utc(connection.created_time).format(constants_1.ListTimeFormat),
                        vAlign: 'center',
                    },
                ]);
            });
            loggingProvider_1.logger.info(table.toString());
            break;
    }
}
