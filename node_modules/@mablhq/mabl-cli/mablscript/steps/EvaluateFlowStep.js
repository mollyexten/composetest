"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isEvaluateFlowStep = exports.EvaluateFlowStep = exports.EVALUATE_FLOW_STEP_NAME = void 0;
const domUtil_1 = require("../../domUtil");
const MablStep_1 = require("../MablStep");
exports.EVALUATE_FLOW_STEP_NAME = 'EvaluateFlow';
class EvaluateFlowStep extends MablStep_1.MablStep {
    constructor(name, args, actions) {
        super(name, args, actions, 'evaluate_flow');
        if (args.length < 1 || args.length > 2) {
            throw new Error('EvaluateFlowStep expects 1 or 2 arguments');
        }
        this.flowDescriptor = this.getActionArgs()[0];
        if (args.length === 2) {
            this.config = this.getActionArgs()[1];
        }
    }
    getStepName() {
        return exports.EVALUATE_FLOW_STEP_NAME;
    }
    toStepDescriptor() {
        return {
            descriptor: this.flowDescriptor,
            config: this.config,
            actionCode: this.actionCode,
        };
    }
    static fromYaml(_stepName, stepArgs) {
        const { descriptor, config } = stepArgs;
        const step = new EvaluateFlowStep(EvaluateFlowStep.mablScriptStepNames[0], [descriptor, config], []);
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        const flowReference = (0, domUtil_1.buildStepArgumentString)({
            params: { ...this.flowDescriptor },
            legacy: true,
        });
        const flowConfig = this.config
            ? ', ' + (0, domUtil_1.buildStepArgumentString)({ params: { ...this.config }, legacy: true })
            : '';
        return `${EvaluateFlowStep.mablScriptStepNames[0]}(${flowReference}${flowConfig})`;
    }
}
exports.EvaluateFlowStep = EvaluateFlowStep;
EvaluateFlowStep.mablScriptStepNames = ['evaluate_flow'];
EvaluateFlowStep.yamlMablScriptNames = [exports.EVALUATE_FLOW_STEP_NAME];
function isEvaluateFlowStep(step) {
    return (step === null || step === void 0 ? void 0 : step.getStepName()) === exports.EVALUATE_FLOW_STEP_NAME;
}
exports.isEvaluateFlowStep = isEvaluateFlowStep;
