"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitBucketApiClient = exports.CODE_INSIGHTS_PORT = exports.CODE_INSIGHTS_PROXY = exports.CUSTOM_CODE_INSIGHTS_PIPE_PROXY = void 0;
const axios_1 = __importDefault(require("axios"));
const ApiError_1 = require("../ApiError");
const API_VERSION = '2.0';
exports.CUSTOM_CODE_INSIGHTS_PIPE_PROXY = 'host.docker.internal';
exports.CODE_INSIGHTS_PROXY = 'localhost';
exports.CODE_INSIGHTS_PORT = 29418;
class BitBucketApiClient {
    constructor(username, token, isCustomPipe, noProxy) {
        const config = {
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
            },
        };
        if (noProxy) {
            config.auth = {
                username,
                password: token,
            };
            this.baseUrl = `https://api.bitbucket.org/${API_VERSION}`;
        }
        else {
            if (!isCustomPipe) {
                config.proxy = {
                    host: exports.CODE_INSIGHTS_PROXY,
                    port: 29418,
                };
            }
            else {
                config.proxy = {
                    host: exports.CUSTOM_CODE_INSIGHTS_PIPE_PROXY,
                    port: 29418,
                };
            }
            this.baseUrl = `http://api.bitbucket.org/${API_VERSION}`;
        }
        config.validateStatus = () => true;
        this.apiClient = axios_1.default.create(config);
    }
    createUrl(path) {
        return `${this.baseUrl}${path}`;
    }
    checkResponseStatusCode(response) {
        const statusCode = response.status;
        if (!statusCode || statusCode >= 400) {
            throw new ApiError_1.ApiError(`[${statusCode} - ${response.statusText}]`, statusCode);
        }
    }
    async makeGetRequest(path, config) {
        const response = await this.apiClient.get(this.createUrl(path), config);
        this.checkResponseStatusCode(response);
        return response.data;
    }
    async makePutRequest(path, requestBody, config) {
        const response = await this.apiClient.put(this.createUrl(path), JSON.stringify(requestBody), config);
        this.checkResponseStatusCode(response);
        return response.data;
    }
    putCodeReport(codeReport, workspace, repoSlug, node) {
        return this.makePutRequest(`/repositories/${workspace}/${repoSlug}/commit/${node}/reports/${codeReport.external_id}`, codeReport);
    }
    getCodeReport(externalId, workspace, repoSlug, node) {
        return this.makeGetRequest(`/repositories/${workspace}/${repoSlug}/commit/${node}/reports/${externalId}`);
    }
    getCodeReports(workspace, repoSlug, node) {
        return this.makeGetRequest(`/repositories/${workspace}/${repoSlug}/commit/${node}/reports`);
    }
    putCodeAnnotation(codeAnnotation, workspace, repoSlug, node, codeReportExternalId) {
        return this.makePutRequest(`/repositories/${workspace}/${repoSlug}/commit/${node}/reports/${codeReportExternalId}/annotations/${codeAnnotation.external_id}`, codeAnnotation);
    }
    getPullRequest(pullRequestId, workspace, repoSlug) {
        return this.makeGetRequest(`/repositories/${workspace}/${repoSlug}/pullrequests/${pullRequestId}`);
    }
}
exports.BitBucketApiClient = BitBucketApiClient;
