"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const mablApiClientFactory_1 = require("../../../api/mablApiClientFactory");
const util_1 = require("../../commandUtil/util");
const constants_1 = require("../../constants");
const describe_1 = require("../../commandUtil/describe");
const utils_1 = require("../utils");
exports.command = `create <${constants_1.CommandArgInput}>`;
exports.describe = 'Create a new mabl DataTable';
exports.builder = (yargs) => {
    yargs
        .positional(constants_1.CommandArgInput, {
        alias: 'file',
        describe: 'Relative path file to create DataTable from',
    })
        .option(constants_1.CommandArgWorkspaceId, {
        alias: constants_1.CommandArgAliases.WorkspaceId,
        describe: `Workspace to create DataTable in`,
        type: 'string',
    })
        .option(constants_1.CommandArgName, {
        alias: 'table-name',
        demandOption: false,
        describe: `The name for your new DataTable`,
        type: 'string',
    })
        .option(constants_1.CommandArgFormat, {
        alias: 'fmt',
        demandOption: false,
        describe: `Specify the format of your input file (checks file extension type by default)`,
        choices: [constants_1.OutputFormats.Json, constants_1.OutputFormats.Csv],
    });
};
exports.handler = (0, util_1.failWrapper)(createDataTable);
async function createDataTable(parsed) {
    var _a, _b;
    const { input } = parsed;
    const format = (_a = parsed.format) !== null && _a !== void 0 ? _a : (0, utils_1.inferFileFormat)(input);
    const name = (_b = parsed.name) !== null && _b !== void 0 ? _b : (0, path_1.basename)((0, path_1.resolve)(input));
    const workspaceId = await (0, util_1.getWorkspaceId)(parsed);
    let scenarios = [];
    switch (format) {
        case constants_1.OutputFormats.Json:
            scenarios = (0, utils_1.parseJsonScenarios)(input);
            break;
        case constants_1.OutputFormats.Csv:
            scenarios = await (0, utils_1.parseCsvScenarios)(input);
            break;
        default:
            throw Error(`${format} is not a valid option.`);
    }
    const dataTableCreateRequest = {
        workspace_id: workspaceId,
        data_table: { name },
        scenarios,
    };
    const apiClient = await mablApiClientFactory_1.MablApiClientFactory.createApiClient();
    const dataTable = await apiClient.createDataTable(dataTableCreateRequest);
    (0, describe_1.outputEntity)(dataTable, constants_1.OutputFormats.Json);
}
