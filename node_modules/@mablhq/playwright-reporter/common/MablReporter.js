"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MablReporter = void 0;
const nanoid_1 = require("nanoid");
const axios_1 = __importDefault(require("axios"));
const AxiosUtils_1 = require("./AxiosUtils");
/*
 * This external reporter should work on any reporter.
 * It was no direct dependencies with Playwright.
 */
class MablReporter {
    constructor(options) {
        this.options = options;
        this.logCounter = 0;
        this.screenshotCounter = 0;
        this.apiClient = options.apiClient;
        this.uploadClient = options.uploadClient;
        this.planName = options.planName;
        this.log = options.log;
        this.logError = options.logError;
        this.workspaceId = options.workspaceId;
        this.executionId = options.executionId;
        this.executionSource = options.context;
    }
    createPlanRunToMabl() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.planName) {
                this.log('No plan name provided, skipping plan run post');
                return undefined;
            }
            this.log('Posting plan run to mabl');
            return this.apiClient.createPlanRun(this.workspaceId, this.planName, (_a = this.executionId) !== null && _a !== void 0 ? _a : (0, nanoid_1.nanoid)(), this.executionSource);
        });
    }
    createTestResult(testResult, screenshotFile, steps, status) {
        return __awaiter(this, void 0, void 0, function* () {
            this.log('Posting test result to mabl');
            const testId = yield this.apiClient.postTestResultToMabl(testResult, this.executionSource);
            if (testId) {
                this.log(`Test result id: ${testId}`);
                // We're leaving this out by now.
                // const traceFile = await this.uploadTraceFile(testId, result);
                let screenshotUrl;
                if (screenshotFile) {
                    try {
                        this.log('Posting screenshot to mabl');
                        screenshotUrl = yield this.uploadClient.uploadCustomFile(this.workspaceId, screenshotFile, undefined, `playwright/${testId}`, 'screenshot.png');
                    }
                    catch (error) {
                        this.logError(`Unabled to upload test screenshot. ${error}`);
                    }
                }
                const executionOutput = yield this.mapTestResultToExecutionOutput(status, steps, undefined, screenshotUrl);
                this.log('Posting execution output to mabl');
                let executionOutputFileUri;
                try {
                    executionOutputFileUri =
                        yield this.uploadClient.uploadCustomFileContent(this.workspaceId, JSON.stringify(executionOutput), undefined, `playwright/${testId}`, 'execution-summary.log');
                    this.log(`Posted execution output to mabl. Final URL: ${executionOutputFileUri}`);
                }
                catch (error) {
                    this.logError(`Unabled to upload logs. ${error}`);
                }
                if (executionOutputFileUri) {
                    this.log('Posting execution output file to mabl');
                    yield this.apiClient.setExecutionOutputFile(testId, executionOutputFileUri);
                    this.log('Posted execution output file to mabl');
                }
            }
        });
    }
    finalizePlanRun(planRunId, status) {
        return __awaiter(this, void 0, void 0, function* () {
            this.log('Posting plan run result to mabl');
            yield this.apiClient.finalizePlanRun(planRunId, status);
            this.log('Posted plan run result to mabl');
        });
    }
    mapTestResultToExecutionOutput(status, steps, traceFile, screenshotFile) {
        return __awaiter(this, void 0, void 0, function* () {
            const testObservations = [];
            if (traceFile) {
                testObservations.push({
                    type: 'trace',
                    url: traceFile,
                });
            }
            if (screenshotFile) {
                testObservations.push({
                    type: 'screenshot',
                    url: screenshotFile,
                });
            }
            return {
                status,
                testObservations,
                steps,
            };
        });
    }
    uploadStepLogContent(testId, logContent) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.logCounter++;
            try {
                return yield this.uploadClient.uploadCustomFileContent(this.workspaceId, logContent, undefined, `playwright/${testId}/step-logs/${this.logCounter}`, 'mabldriver-logs.log');
            }
            catch (error) {
                if (axios_1.default.isAxiosError(error)) {
                    const errorMessage = (0, AxiosUtils_1.getAxiosErrorMessage)(error);
                    this.logError(`Failed to upload step log content: ${errorMessage} (${(_a = error.response) === null || _a === void 0 ? void 0 : _a.status})`);
                }
                else {
                    this.logError('Failed to upload step log content');
                }
            }
        });
    }
    uploadStepScreenshotContent(testId, screenshot) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.screenshotCounter++;
            try {
                return yield this.uploadClient.uploadCustomFileBuffer(this.workspaceId, screenshot, undefined, `playwright/${testId}/step-screenshots/${this.screenshotCounter}`, 'screenshot.png');
            }
            catch (error) {
                if (axios_1.default.isAxiosError(error)) {
                    const errorMessage = (0, AxiosUtils_1.getAxiosErrorMessage)(error);
                    console.error(`Failed to upload step screenshot content: ${errorMessage} (${(_a = error.response) === null || _a === void 0 ? void 0 : _a.status})`);
                }
                else {
                    console.error('Failed to upload step screenshot content');
                }
            }
        });
    }
}
exports.MablReporter = MablReporter;
