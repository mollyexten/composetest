import { FullConfig, FullResult, Reporter, Suite, TestCase, TestResult, TestStep } from '@playwright/test/reporter';
import { MablPlaywrightReporterOptions } from './MablPlaywrightReporterOptions';
import { MablExecutionStep, MablExecutionStepCategory, MablTestResult } from './MablTestResult';
import { MablPlanRunStatus } from './common/MablApiClient';
type PlaywrightExecutionResult = 'passed' | 'failed' | 'timedout' | 'interrupted';
export declare class MablPlaywrightReporter implements Reporter {
    private suite;
    private planRunPromise;
    private testEndPromises;
    private attachmentToTestMap;
    private stepToAttachmentsMap;
    private mablReporter;
    private readonly apiKey;
    private readonly workspaceId;
    private readonly mablApiUrl;
    private readonly verbose;
    private readonly planName?;
    private readonly executionId?;
    constructor(options: MablPlaywrightReporterOptions);
    onBegin(_config: FullConfig, suite: Suite): void;
    onTestEnd(test: TestCase, result: TestResult): void;
    onEnd(result: FullResult): Promise<void>;
    postTestResult(testCase: TestCase, result: TestResult): Promise<void>;
    onStepEnd(test: TestCase, result: TestResult, step: TestStep): void;
    mapStepsToMablExecutionSteps(testId: string, steps: TestStep[]): Promise<MablExecutionStep[]>;
    mapStepCategoryToMablExecutionStepCategory(category: string): MablExecutionStepCategory;
    mapTestCaseToMablTestResult(testCase: TestCase): MablTestResult;
    playwrightStatusToMablStatus(status: PlaywrightExecutionResult): MablPlanRunStatus;
    log(message: string): void;
}
export {};
