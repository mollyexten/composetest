"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectStep = void 0;
const FindAction_1 = require("../actions/FindAction");
const MablAction_1 = require("../MablAction");
const domUtil_1 = require("../../domUtil");
const MablStepWithFindAction_1 = require("../MablStepWithFindAction");
class SelectStep extends MablStepWithFindAction_1.MablStepWithFindAction {
    constructor(name, args, actions) {
        super(name, args, actions, 'select');
        this.selectOptions = this.getActionArgs()[0];
        this.selectOptionType = this.getActionArgs()[1];
        this.validate();
        this.findAction = this.actions[0];
    }
    validate() {
        if (this.actions.length !== 1 && !(this.actions[0] instanceof FindAction_1.FindAction)) {
            throw new Error('Select steps should have exactly on sub action and it should be a find');
        }
    }
    getStepName() {
        return 'Select';
    }
    toStepDescriptor() {
        const selectOptionsCopy = this.selectOptions;
        selectOptionsCopy.selectOptionType = this.selectOptionType;
        const formatted = { ...selectOptionsCopy };
        const find = this.findAction.toDescriptor();
        switch (find.findType) {
            case domUtil_1.FindType.FIND_FIRST:
            case domUtil_1.FindType.FIND_LAST:
            case domUtil_1.FindType.FIND_ANY:
            case domUtil_1.FindType.FIND_ONE:
                formatted.find = find;
                formatted.descriptorToActionMap = new Map().set(find, this.findAction);
                return formatted;
            default:
                throw new Error(`Error generating step descriptor for ${this.getStepName()}: Unexpected find type ${find.findType}`);
        }
    }
    static fromYaml(_stepName, stepArgs) {
        const findAction = FindAction_1.FindAction.findActionFromStepArgs(stepArgs);
        const selectOptionType = stepArgs.selectOptionType;
        delete stepArgs.selector;
        delete stepArgs.selectorAncestors;
        delete stepArgs.selectOptionType;
        const selectOptions = stepArgs;
        const step = new SelectStep('select', [selectOptions, selectOptionType], [findAction]);
        step.setStepId(stepArgs.id);
        return step;
    }
    getFormattedStep(_fullLocatorsOn) {
        const step = this.selectOptions;
        const { find, ...ymlStep } = step;
        const finalStep = {
            Select: {
                ...ymlStep,
                ...super.annotationsAsYml(),
                ...this.findAction.toYaml(),
            },
        };
        if (this.stepId()) {
            finalStep.Select.id = this.stepId();
        }
        return finalStep;
    }
    toMablscript() {
        const selectOptionType = this.selectOptionType
            ? `, "${this.selectOptionType}"`
            : '';
        return `${this.findAction.toMablscript()}.select(${(0, MablAction_1.convertObjectToMablscriptArgs)(this.selectOptions)}${selectOptionType})`;
    }
    getInputVariables() {
        return (0, MablAction_1.distinctStrings)([
            ...this.findAction.getInputVariables(),
            ...MablAction_1.MablAction.findUniqueVariableReferencesInValue(this.selectOptions),
        ]);
    }
}
exports.SelectStep = SelectStep;
SelectStep.mablScriptStepNames = ['select'];
SelectStep.yamlMablScriptNames = ['Select'];
