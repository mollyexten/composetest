"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WaitUntilStep = void 0;
const domUtil_1 = require("../../domUtil");
const MablStepWithFindAction_1 = require("../MablStepWithFindAction");
class WaitUntilStep extends MablStepWithFindAction_1.MablStepWithFindAction {
    constructor(name, args, actions) {
        super(name, args, actions, 'wait_until');
        if ((0, domUtil_1.isFindElementType)(this.actions[0].getActionName())) {
            this.findAction = this.actions[0];
        }
        else {
            throw new Error(`Unexpected find action for ${name} step: ${JSON.stringify(this.actions[0])}`);
        }
    }
    getStepName() {
        return 'WaitUntil';
    }
    toStepDescriptor() {
        const find = this.findAction.toDescriptor();
        switch (find.findType) {
            case domUtil_1.FindType.FIND_ONE:
                return {
                    find,
                    descriptorToActionMap: new Map().set(find, this.findAction),
                    actionCode: this.actionCode,
                };
            default:
                throw new Error(`Error generating step descriptor for ${this.getStepName()}: Unexpected find type ${find.findType} is not supported`);
        }
    }
    static fromYaml(_stepName, stepArgs) {
        const step = new WaitUntilStep('wait', [], []);
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        return `${this.findAction.toMablscript()}.evaluate_presence("present").assert()`;
    }
    getInputVariables() {
        return this.findAction.getInputVariables();
    }
}
exports.WaitUntilStep = WaitUntilStep;
WaitUntilStep.mablScriptStepNames = [];
WaitUntilStep.yamlMablScriptNames = ['WaitUntil'];
