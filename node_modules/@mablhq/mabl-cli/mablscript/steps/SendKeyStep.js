"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendKeyStep = void 0;
const FindAction_1 = require("../actions/FindAction");
const domUtil_1 = require("../../domUtil");
const SendKeyStepDescriptor_1 = require("../types/SendKeyStepDescriptor");
const MablStepWithFindAction_1 = require("../MablStepWithFindAction");
const STEP_NAME = 'SendKeys';
class SendKeyStep extends MablStepWithFindAction_1.MablStepWithFindAction {
    constructor(name, args, actions) {
        super(name, args, actions, 'send_keys');
        if (this.actions.length !== 1 && !(this.actions[0] instanceof FindAction_1.FindAction)) {
            throw new Error(`${name} step should have one sub-action and it should be a find`);
        }
        if ((0, domUtil_1.isFindElementType)(this.actions[0].getActionName())) {
            this.findAction = this.actions[0];
        }
        else {
            throw new Error(`Unexpected find action for ${name} step: ${JSON.stringify(this.actions[0])}`);
        }
        const keys = this.getActionArgs();
        if (!(keys === null || keys === void 0 ? void 0 : keys.length)) {
            throw new Error(`${name} step expects at least one key`);
        }
        if (keys.every(SendKeyStepDescriptor_1.isCrossPlatformKeyPress)) {
            this.keys = keys;
        }
        else {
            throw new Error(`Unexpected key format for ${name} step: ${JSON.stringify(keys)}`);
        }
    }
    getStepName() {
        return STEP_NAME;
    }
    toStepDescriptor() {
        const find = this.findAction.toDescriptor();
        switch (find.findType) {
            case domUtil_1.FindType.FIND_FIRST:
            case domUtil_1.FindType.FIND_LAST:
            case domUtil_1.FindType.FIND_ANY:
            case domUtil_1.FindType.FIND_ONE:
                return {
                    find,
                    keys: this.keys,
                    descriptorToActionMap: new Map().set(find, this.findAction),
                    actionCode: this.actionCode,
                };
            default:
                throw new Error(`Error generating step descriptor for ${this.getStepName()}: Unexpected find type ${find.findType}`);
        }
    }
    getFormattedStep() {
        const step = {
            [STEP_NAME]: {
                ...super.annotationsAsYml(),
                sendKeys: this.keys,
                ...this.findAction.toYaml(),
            },
        };
        if (this.stepId()) {
            step[STEP_NAME].id = this.stepId();
        }
        return step;
    }
    static fromYaml(_stepName, stepArgs) {
        const step = new SendKeyStep('send_keys', stepArgs.sendKeys, [
            FindAction_1.FindAction.findActionFromStepArgs(stepArgs),
        ]);
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        const keysToSend = this.keys
            .map((key) => (0, domUtil_1.buildStepArgumentString)({ params: { ...key }, legacy: true }))
            .join();
        return `${this.findAction.toMablscript()}.send_keys(${keysToSend})`;
    }
    getInputVariables() {
        return this.findAction.getInputVariables();
    }
}
exports.SendKeyStep = SendKeyStep;
SendKeyStep.mablScriptStepNames = ['send_keys'];
SendKeyStep.yamlMablScriptNames = ['SendKeys'];
