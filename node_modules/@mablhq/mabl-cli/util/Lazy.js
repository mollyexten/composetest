"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lazy = void 0;
class Lazy {
    constructor(initializer) {
        this.initializer = initializer;
    }
    apply(action) {
        return action(this.instance);
    }
    get instance() {
        if (!this.value) {
            this.value = this.initializer();
        }
        return this.value;
    }
    get isInitialized() {
        return !!this.value;
    }
    map(mapper) {
        return new Lazy(() => this.apply(mapper));
    }
    get maybe() {
        return this.value;
    }
    reset() {
        this.value = undefined;
    }
    withValue(consumer) {
        consumer(this.instance);
    }
    withValueAsync(consumer) {
        return this.apply(consumer);
    }
    static from(instance) {
        return new Lazy(() => instance);
    }
    static of(initializer) {
        return new Lazy(initializer);
    }
    static proxy(initializer) {
        const lazy = Lazy.of(initializer);
        return new Proxy(lazy, new LazyProxy(lazy));
    }
}
exports.Lazy = Lazy;
class LazyProxy {
    constructor(lazy) {
        this.lazy = lazy;
    }
    apply(target, _thisArg, args) {
        return Reflect.apply(target, this.lazy.instance, args);
    }
    construct(target, argArray, _newTarget) {
        return Reflect.construct(target, argArray, this.lazy.instance.constructor);
    }
    defineProperty(_target, property, attributes) {
        return Reflect.defineProperty(this.lazy.instance, property, attributes);
    }
    deleteProperty(_target, p) {
        return Reflect.deleteProperty(this.lazy.instance, p);
    }
    get(_target, p, receiver) {
        return Reflect.get(this.lazy.instance, p, receiver);
    }
    getOwnPropertyDescriptor(_target, p) {
        return Reflect.getOwnPropertyDescriptor(this.lazy.instance, p);
    }
    getPrototypeOf(_target) {
        return Reflect.getPrototypeOf(this.lazy.instance);
    }
    has(_target, p) {
        return Reflect.has(this.lazy.instance, p);
    }
    isExtensible(_target) {
        return Reflect.isExtensible(this.lazy.instance);
    }
    ownKeys(_target) {
        return Reflect.ownKeys(this.lazy.instance);
    }
    preventExtensions(_target) {
        return Reflect.preventExtensions(this.lazy.instance);
    }
    set(_target, p, newValue, receiver) {
        return Reflect.set(this.lazy.instance, p, newValue, receiver);
    }
    setPrototypeOf(_target, v) {
        return Reflect.setPrototypeOf(this.lazy.instance, v);
    }
}
