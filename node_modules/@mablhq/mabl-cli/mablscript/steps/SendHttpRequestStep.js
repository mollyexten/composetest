"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendHttpRequestVariableSource = exports.SendHttpRequestStep = void 0;
const ConditionDescriptor_1 = require("../types/ConditionDescriptor");
const AbstractAssertionsAndVariablesStep_1 = require("./AbstractAssertionsAndVariablesStep");
class SendHttpRequestStep extends AbstractAssertionsAndVariablesStep_1.AbstractAssertionsAndVariablesStep {
    constructor(name, args, actions) {
        super(name, args, actions, 'send_http_request', SendHttpRequestStep.stepName, args[0]);
    }
    static fromYaml(_stepName, stepArgs) {
        var _a;
        const formatted = stepArgs;
        const comparisonTypeConverter = {
            Equals: ConditionDescriptor_1.AssertionConditionField.Equals,
            DoesNotEqual: ConditionDescriptor_1.AssertionConditionField.DoesNotEqual,
            Contains: ConditionDescriptor_1.AssertionConditionField.Contains,
            DoesNotContain: ConditionDescriptor_1.AssertionConditionField.DoesNotContain,
            StartsWith: ConditionDescriptor_1.AssertionConditionField.StartsWith,
            StartsWithout: ConditionDescriptor_1.AssertionConditionField.StartsWithout,
            EndsWith: ConditionDescriptor_1.AssertionConditionField.EndsWith,
            EndsWithout: ConditionDescriptor_1.AssertionConditionField.EndsWithout,
            GreaterThan: ConditionDescriptor_1.AssertionConditionField.GreaterThan,
            LessThan: ConditionDescriptor_1.AssertionConditionField.LessThan,
            GreaterThanOrEquals: ConditionDescriptor_1.AssertionConditionField.GreaterThanOrEquals,
            LessThanOrEquals: ConditionDescriptor_1.AssertionConditionField.LessThanOrEquals,
        };
        (_a = formatted.assertions) === null || _a === void 0 ? void 0 : _a.forEach((assertion) => {
            if (assertion.assertion in comparisonTypeConverter) {
                assertion.assertion = comparisonTypeConverter[assertion.assertion];
            }
        });
        const step = new SendHttpRequestStep(SendHttpRequestStep.stepName, [formatted], []);
        step.setStepId(stepArgs.id);
        return step;
    }
}
exports.SendHttpRequestStep = SendHttpRequestStep;
SendHttpRequestStep.stepName = 'SendHttpRequest';
SendHttpRequestStep.mablScriptStepNames = ['send_http_request'];
SendHttpRequestStep.yamlMablScriptNames = [SendHttpRequestStep.stepName];
var SendHttpRequestVariableSource;
(function (SendHttpRequestVariableSource) {
    SendHttpRequestVariableSource["Body"] = "body";
    SendHttpRequestVariableSource["Header"] = "header";
    SendHttpRequestVariableSource["Json"] = "json";
    SendHttpRequestVariableSource["Response"] = "response";
    SendHttpRequestVariableSource["Status"] = "status";
})(SendHttpRequestVariableSource || (exports.SendHttpRequestVariableSource = SendHttpRequestVariableSource = {}));
