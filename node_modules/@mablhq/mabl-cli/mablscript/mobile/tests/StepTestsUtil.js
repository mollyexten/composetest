"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadRawStepIntoMablStep = exports.parseAndValidateYamlConversion = void 0;
const js_yaml_1 = require("js-yaml");
const importer_1 = require("../../importer");
function parseAndValidateYamlConversion(steps, expectedStepName, expectedDescriptor, expectedStepDescription) {
    const yamlfiedSteps = (0, js_yaml_1.dump)(steps);
    const loadedSteps = (0, importer_1.loadYamlSteps)(yamlfiedSteps, true);
    expect(loadedSteps[0].name).toEqual(expectedStepName);
    expect(loadedSteps[0].descriptor).toEqual(expectedDescriptor);
    const yamlfiedLoadedSteps = (0, importer_1.yamlifyTheLoadedSteps)(loadedSteps);
    const reLoadedYamlfiedLoadedSteps = (0, js_yaml_1.load)(yamlfiedLoadedSteps);
    const step = reLoadedYamlfiedLoadedSteps[0][expectedStepName];
    expect(step.description).not.toBeUndefined();
    expect(step.description).not.toBeNull();
    expect(step.description).not.toEqual('');
    if (expectedStepDescription !== undefined) {
        expect(step.description).toEqual(expectedStepDescription);
    }
    delete step.description;
    const reYamlfiedLoadedSteps = (0, js_yaml_1.dump)(reLoadedYamlfiedLoadedSteps);
    expect(reYamlfiedLoadedSteps).toEqual(yamlfiedSteps);
}
exports.parseAndValidateYamlConversion = parseAndValidateYamlConversion;
function loadRawStepIntoMablStep(step) {
    const yamlfiedSteps = (0, js_yaml_1.dump)([step]);
    const loadedSteps = (0, importer_1.loadYamlSteps)(yamlfiedSteps, true);
    return loadedSteps[0];
}
exports.loadRawStepIntoMablStep = loadRawStepIntoMablStep;
