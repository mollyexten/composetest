"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.launchTrainingSession = exports.createTestDescriptionKey = exports.createTestNameKey = void 0;
const util_1 = require("../../commandUtil/util");
const constants_1 = require("../../constants");
const trainingSessions_1 = require("../../../core/trainer/trainingSessions");
exports.createTestNameKey = 'test-name';
exports.createTestDescriptionKey = 'test-description';
exports.command = `create <${constants_1.CommandArgUrl}> <${exports.createTestNameKey}>`;
exports.describe = 'Create a test using the mabl Trainer';
exports.builder = (yargs) => {
    yargs
        .positional(constants_1.CommandArgUrl, {
        describe: 'The url to test',
        type: 'string',
    })
        .positional(exports.createTestNameKey, {
        describe: 'The name of the test',
        type: 'string',
    })
        .option('desc', {
        alias: exports.createTestDescriptionKey,
        describe: 'Description for the test',
        default: '',
        nargs: 1,
        type: 'string',
    })
        .option('width', {
        describe: 'Set the browser width in pixels',
        default: 1366,
        nargs: 1,
        type: 'number',
    })
        .option('height', {
        describe: 'Set the browser height in pixels',
        default: 768,
        nargs: 1,
        type: 'number',
    })
        .option(constants_1.CommandArgMablBranch, {
        describe: 'Branch to run the mabl test against',
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgEnvironmentId, {
        alias: constants_1.CommandArgAliases.EnvironmentId,
        describe: 'Mabl environment to create test under',
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgApplicationId, {
        alias: constants_1.CommandArgAliases.ApplicationId,
        describe: 'Mabl application to create test under',
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgPlanId, {
        describe: 'Mabl plan to use the config from and add the test to upon completion',
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgMablAutoBranch, {
        describe: 'Create a mabl branch when a mabl-branch target is specified that does not exist',
        type: 'boolean',
        default: false,
    })
        .option(constants_1.CommandArgMablAutoLogin, {
        describe: 'Insert an auto login flow at the beginning of the created test',
        type: 'boolean',
        default: false,
    })
        .option(constants_1.CommandArgLabels, {
        describe: 'Space delimited labels to save test with',
        type: 'array',
    })
        .option(constants_1.CommandArgDataTables, {
        describe: 'Space delimited data table IDs to use with test',
        type: 'array',
    })
        .option(constants_1.CommandArgWorkspaceId, {
        alias: constants_1.CommandArgAliases.WorkspaceId,
        describe: 'Workspace to create test in',
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgCredentials, {
        alias: constants_1.CommandArgAliases.Credentials,
        describe: 'Credentials ID to run the test with',
        nargs: 1,
        type: 'string',
    });
};
exports.handler = (0, util_1.failWrapper)(launchTrainingSession);
async function launchTrainingSession(parsed) {
    const url = parsed.url;
    const width = parsed.width;
    const height = parsed.height;
    const testName = parsed['test-name'];
    const workspaceId = await (0, util_1.getWorkspaceId)(parsed);
    const testDescription = parsed['test-description'];
    const branchName = parsed['mabl-branch'];
    const autoBranch = parsed['auto-branch'];
    const autoLogin = parsed[constants_1.CommandArgMablAutoLogin];
    const credentialsId = parsed['credentials-id'];
    const environmentId = parsed[constants_1.CommandArgEnvironmentId];
    const applicationId = parsed[constants_1.CommandArgApplicationId];
    const planId = parsed[constants_1.CommandArgPlanId];
    const labels = parsed[constants_1.CommandArgLabels];
    const dataTableIds = parsed[constants_1.CommandArgDataTables];
    const trainingSessionOptions = {
        applicationId,
        autoBranch,
        autoLogin,
        branchName,
        credentialsId,
        dataTableIds,
        environmentId,
        height,
        labels,
        planId,
        testDescription,
        testName,
        url,
        width,
        workspaceId,
    };
    await (0, trainingSessions_1.trainNewTest)(trainingSessionOptions);
    return 'done';
}
exports.launchTrainingSession = launchTrainingSession;
