"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonCloneDeep = exports.validateAuthentication = exports.getApiClientFromOptions = exports.getApiClient = exports.INVALID_AUTH_ERROR = void 0;
const mablApiClientFactory_1 = require("../api/mablApiClientFactory");
const asyncUtil_1 = require("../util/asyncUtil");
const authenticationProvider_1 = require("../providers/authenticationProvider");
const types_1 = require("../api/types");
const mablApi_1 = require("../mablApi");
const chalk_1 = __importDefault(require("chalk"));
const DEFAULT_ASYNC_TIMEOUT_MILLIS = 120000;
exports.INVALID_AUTH_ERROR = `Auth with user credentials required. Please run ${chalk_1.default.magenta('mabl auth login')} to log in with your mabl account`;
async function getApiClient(options = {}) {
    const { asyncTimeoutMillis, authenticationConfig, runOptions, userAuthOnly, validateAuth, } = options;
    const apiClient = await (0, asyncUtil_1.promiseWithTimeout)(getApiClientFromOptions(runOptions, userAuthOnly), asyncTimeoutMillis !== null && asyncTimeoutMillis !== void 0 ? asyncTimeoutMillis : DEFAULT_ASYNC_TIMEOUT_MILLIS, 'Get API client from options');
    if (validateAuth !== null && validateAuth !== void 0 ? validateAuth : true) {
        await (0, asyncUtil_1.promiseWithTimeout)(validateAuthentication(apiClient, authenticationConfig !== null && authenticationConfig !== void 0 ? authenticationConfig : (await (0, asyncUtil_1.promiseWithTimeout)(new authenticationProvider_1.AuthenticationProvider().getAuthConfigWithAutoRenew(), DEFAULT_ASYNC_TIMEOUT_MILLIS, 'Get auth config with auto renew'))), asyncTimeoutMillis !== null && asyncTimeoutMillis !== void 0 ? asyncTimeoutMillis : DEFAULT_ASYNC_TIMEOUT_MILLIS, 'Validate auth');
    }
    return apiClient;
}
exports.getApiClient = getApiClient;
async function getApiClientFromOptions(trainingSessionOptions, userAuthOnly) {
    if (trainingSessionOptions === null || trainingSessionOptions === void 0 ? void 0 : trainingSessionOptions.authToken) {
        return mablApiClientFactory_1.MablApiClientFactory.createApiClientForAccessToken(trainingSessionOptions.authToken);
    }
    if (userAuthOnly) {
        return mablApiClientFactory_1.MablApiClientFactory.createUserApiClient();
    }
    return mablApiClientFactory_1.MablApiClientFactory.createApiClient();
}
exports.getApiClientFromOptions = getApiClientFromOptions;
async function validateAuthentication(apiClient, authConfig) {
    if (authConfig.authType !== types_1.AuthType.ApiKey) {
        return;
    }
    try {
        const keyDetails = await apiClient.getApiKeyDetails();
        if (keyDetails.type === mablApi_1.ApiKeyType.CommandLineInterface) {
            return;
        }
    }
    catch (_) {
    }
    throw new Error(exports.INVALID_AUTH_ERROR);
}
exports.validateAuthentication = validateAuthentication;
function jsonCloneDeep(value) {
    if (value === undefined) {
        return undefined;
    }
    return JSON.parse(JSON.stringify(value));
}
exports.jsonCloneDeep = jsonCloneDeep;
