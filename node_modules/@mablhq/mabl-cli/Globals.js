"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Globals = void 0;
const os = __importStar(require("os"));
class Globals {
    static getFindOverallTimeoutMs() {
        return Globals.findOverallTimeoutMs;
    }
    static setFindOverallTimeoutMs(timeout) {
        Globals.findOverallTimeoutMs = timeout;
    }
    static getPlaywrightInteractionWarningMs() {
        return Globals.playwrightInteractionWarningMs;
    }
    static setPlaywrightInteractionWarningMs(timeout) {
        Globals.playwrightInteractionWarningMs = timeout;
    }
    static getSslCaDir() {
        return Globals.sslCaDir;
    }
    static getTestMaxAgeMs() {
        return Globals.testMaxAgeMs;
    }
    static setTestMaxAgeMs(age) {
        Globals.testMaxAgeMs = age;
    }
    static getUploadDirectory() {
        return Globals.uploadDirectory;
    }
    static setUploadDirectory(dir) {
        Globals.uploadDirectory = dir;
    }
    static getUploadDirectoryPrefix() {
        return Globals.uploadDirectoryPrefix;
    }
    static setUploadDirectoryPrefix(prefix) {
        Globals.uploadDirectoryPrefix = prefix;
    }
}
exports.Globals = Globals;
Globals.findOverallTimeoutMs = 18.5 * 60 * 1000;
Globals.playwrightInteractionWarningMs = 30 * 1000;
Globals.sslCaDir = '/usr/local/share/http-proxy-certs';
Globals.testMaxAgeMs = 1000 * 60 * 60 * 24;
Globals.uploadDirectory = os.tmpdir();
Globals.uploadDirectoryPrefix = `mablTestRunUploads-`;
