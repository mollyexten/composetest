"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeEmail = exports.isEmailSelectorOrDescriptor = exports.normalize = exports.isElementSelector = exports.FindAction = exports.formattedFindTypeToMablscript = exports.findTypesToFormattedType = void 0;
const domUtil_1 = require("../../domUtil");
const mablscriptFind_1 = require("../../mablscriptFind");
const MablAction_1 = require("../MablAction");
exports.findTypesToFormattedType = {
    find_all: 'FindAll',
    find_any: 'FindFirst',
    find_cookie: 'FindCookie',
    find_first: 'FindFirst',
    find_one: 'FindOne',
    find_email: 'FindEmail',
    find_tab: 'FindTab',
    find_last: 'FindLast',
};
exports.formattedFindTypeToMablscript = {};
Object.entries(exports.findTypesToFormattedType).forEach(([findType, field]) => (exports.formattedFindTypeToMablscript[field] = findType));
class FindAction extends MablAction_1.MablAction {
    constructor(name, args) {
        super(name, name, args);
        const actionName = this.getActionName();
        if (!(0, domUtil_1.isFindType)(actionName)) {
            throw new Error(`Unknown find type for action: ${actionName}`);
        }
        const findType = domUtil_1.FindType.fromString(actionName);
        this.isValid = true;
        switch (findType) {
            case domUtil_1.FindType.FIND_ONE: {
                const [selectors, options] = this.getActionArgs();
                if (!isElementSelector(selectors)) {
                    this.isValid = false;
                }
                const [target, ancestor] = Array.isArray(selectors)
                    ? [...selectors]
                    : [selectors];
                const findTarget = normalize(target);
                if (ancestor) {
                    findTarget.auxiliaryDescriptors = [normalize(ancestor)];
                }
                this.findDescriptor = {
                    findType,
                    findTarget,
                };
                if ((0, domUtil_1.isFindOptions)(options)) {
                    this.findDescriptor.findOptions = options;
                }
                break;
            }
            case domUtil_1.FindType.FIND_FIRST:
            case domUtil_1.FindType.FIND_LAST:
            case domUtil_1.FindType.FIND_ANY:
            case domUtil_1.FindType.FIND_ALL: {
                const [primarySelector, foundElementSelectors, findOptions] = this.getActionArgs();
                if (!(0, domUtil_1.isCssSelector)(primarySelector) &&
                    !(0, domUtil_1.isXPathSelector)(primarySelector)) {
                    this.isValid = false;
                }
                this.findDescriptor = {
                    findOptions,
                    findTarget: primarySelector,
                    findType,
                    foundElementSelectors,
                    primarySelectors: primarySelector,
                };
                break;
            }
            case domUtil_1.FindType.FIND_COOKIE: {
                const [selectors] = this.getActionArgs();
                if (!(0, domUtil_1.isCookieSelector)(selectors)) {
                    this.isValid = false;
                }
                this.findDescriptor = {
                    findType,
                    findTarget: selectors,
                };
                break;
            }
            case domUtil_1.FindType.FIND_EMAIL:
                const [selectors] = this.getActionArgs();
                if (!isEmailSelectorOrDescriptor(selectors)) {
                    this.isValid = false;
                }
                const [target] = Array.isArray(selectors)
                    ? [...selectors]
                    : [selectors];
                const findTarget = normalizeEmail(target);
                this.findDescriptor = {
                    findType,
                    findTarget,
                };
                break;
            case domUtil_1.FindType.FIND_TAB: {
                const [selectors] = this.getActionArgs();
                if (selectors !== 'initial' && !(0, domUtil_1.isTabSelector)(selectors)) {
                    this.isValid = false;
                }
                this.findDescriptor = {
                    findType,
                    findTarget: selectors,
                };
            }
        }
        Object.freeze(this.findDescriptor);
    }
    toDescriptor() {
        return this.findDescriptor;
    }
    static findActionFromStepArgs(stepArgs, suppliedFindType) {
        let findType;
        if (stepArgs.selector) {
            if (suppliedFindType) {
                findType = suppliedFindType;
            }
            else {
                findType = stepArgs.findType
                    ? exports.formattedFindTypeToMablscript[stepArgs.findType]
                    : exports.formattedFindTypeToMablscript.FindOne;
            }
            if (!stepArgs.selectorAncestors) {
                return new FindAction(findType, [
                    stepArgs.selector,
                    stepArgs.findOptions,
                ]);
            }
            const ancestors = stepArgs.selectorAncestors || [];
            return new FindAction(findType, [
                [stepArgs.selector, ...ancestors],
                stepArgs.findOptions,
            ]);
        }
        throw new Error('No selector found in yaml');
    }
    toYaml() {
        var _a;
        const result = {};
        const find = this.toDescriptor();
        switch (find.findType) {
            case domUtil_1.FindType.FIND_FIRST:
            case domUtil_1.FindType.FIND_LAST:
            case domUtil_1.FindType.FIND_ANY:
            case domUtil_1.FindType.FIND_ALL:
                result.find_type = find.findType;
                result.selector = find.findTarget;
                break;
            case domUtil_1.FindType.FIND_ONE:
                result.selector = find.findTarget.selector;
                if ((_a = find.findTarget.auxiliaryDescriptors) === null || _a === void 0 ? void 0 : _a.length) {
                    result.selectorAncestors = find.findTarget.auxiliaryDescriptors.map((descriptor) => descriptor.selector);
                }
                break;
            default:
                throw new Error(`Unexpected find type ${find.findType}`);
        }
        return result;
    }
    toMablscript() {
        return this.generateFindMablscript();
    }
    generateFindMablscript() {
        var _a;
        let action = this.findDescriptor.findType;
        let args = '';
        switch (this.findDescriptor.findType) {
            case domUtil_1.FindType.FIND_ONE:
                const find = this.findDescriptor;
                const selectors = ((_a = find.findTarget.auxiliaryDescriptors) === null || _a === void 0 ? void 0 : _a.length)
                    ? '[' +
                        [find.findTarget, ...find.findTarget.auxiliaryDescriptors]
                            .map(mablscriptFind_1.buildFindDescriptorString)
                            .filter(Boolean)
                            .join(', ') +
                        ']'
                    : (0, mablscriptFind_1.buildFindDescriptorString)(find.findTarget);
                const options = buildFindOptionsString(find.findOptions);
                args = [selectors, options].filter(Boolean).join(', ');
                break;
            case domUtil_1.FindType.FIND_LAST:
            case domUtil_1.FindType.FIND_ANY:
            case domUtil_1.FindType.FIND_ALL:
            case domUtil_1.FindType.FIND_FIRST: {
                const find = this.findDescriptor;
                const selector = (0, mablscriptFind_1.buildElementSelectorString)(find.findTarget);
                let foundElementSelectors;
                if (find.foundElementSelectors) {
                    if (Array.isArray(find.foundElementSelectors)) {
                        foundElementSelectors = find.foundElementSelectors
                            .map((selector) => (0, mablscriptFind_1.buildFindDescriptorString)({ selector }))
                            .join(', ');
                    }
                    else {
                        foundElementSelectors = (0, mablscriptFind_1.buildFindDescriptorString)({
                            selector: find.foundElementSelectors,
                        });
                    }
                }
                else {
                    foundElementSelectors = '{selector_type: "element"}';
                }
                const options = buildFindOptionsString(find.findOptions);
                args = [selector, foundElementSelectors, options]
                    .filter(Boolean)
                    .join(', ');
                if (find.findType === domUtil_1.FindType.FIND_ANY) {
                    action = domUtil_1.FindType.FIND_FIRST;
                }
                break;
            }
            case domUtil_1.FindType.FIND_COOKIE:
                args = (0, mablscriptFind_1.buildCookieSelectorString)(this.findDescriptor.findTarget);
                break;
            case domUtil_1.FindType.FIND_EMAIL: {
                args = (0, domUtil_1.buildFindEmailDescriptorString)(this.findDescriptor.findTarget);
                break;
            }
            case domUtil_1.FindType.FIND_TAB:
                args = (0, mablscriptFind_1.buildTabSelectorString)(this.findDescriptor.findTarget);
                break;
            default:
                throw new Error(`Error generating mablscript: Unexpected find type in ${JSON.stringify(this.findDescriptor)}`);
        }
        return `${action}(${args})`;
    }
    isValidDescriptor() {
        return this.isValid;
    }
    getInputVariables() {
        return MablAction_1.MablAction.findUniqueVariableReferencesInValue(this.findDescriptor);
    }
}
exports.FindAction = FindAction;
FindAction.mablScriptStepNames = [
    'find_all',
    'find_one',
    'find_first',
    'find_last',
    'find_any',
    'find_cookie',
    'find_email',
    'find_tab',
];
FindAction.yamlMablScriptNames = [
    'FindAll',
    'FindOne',
    'FindFirst',
    'FindLast',
    'FindAny',
    'FindCookie',
    'FindEmail',
    'FindTab',
];
function buildFindOptionsString(findOptions) {
    if (!findOptions) {
        return undefined;
    }
    return JSON.stringify(findOptions);
}
function isElementSelector(maybeSelectors) {
    const [target, ancestor] = Array.isArray(maybeSelectors)
        ? [...maybeSelectors]
        : [maybeSelectors];
    const validTarget = (0, domUtil_1.isStandardSelector)(target) || (0, domUtil_1.isNormalizedFindDescriptor)(target);
    const validAncestor = !ancestor ||
        (0, domUtil_1.isStandardSelector)(ancestor) ||
        (0, domUtil_1.isNormalizedFindDescriptor)(ancestor);
    return !!(validTarget && validAncestor);
}
exports.isElementSelector = isElementSelector;
function normalize(maybeFindDescriptor) {
    if ((0, domUtil_1.isNormalizedFindDescriptor)(maybeFindDescriptor)) {
        return { ...maybeFindDescriptor };
    }
    return { selector: maybeFindDescriptor };
}
exports.normalize = normalize;
function isEmailSelectorOrDescriptor(selectorOrDescriptor) {
    const [target] = Array.isArray(selectorOrDescriptor)
        ? [...selectorOrDescriptor]
        : [selectorOrDescriptor];
    return (0, domUtil_1.isEmailSelector)(target) || (0, domUtil_1.isNormalizedFindEmailDescriptor)(target);
}
exports.isEmailSelectorOrDescriptor = isEmailSelectorOrDescriptor;
function normalizeEmail(selectorOrDescriptor) {
    if ((0, domUtil_1.isNormalizedFindEmailDescriptor)(selectorOrDescriptor)) {
        return { ...selectorOrDescriptor };
    }
    if ((0, domUtil_1.isEmailSelector)(selectorOrDescriptor)) {
        if (selectorOrDescriptor.subject_exact) {
            const { subject_exact: subjectExact, ...restOfObject } = selectorOrDescriptor;
            return {
                selector: {
                    subject: subjectExact,
                    ...restOfObject,
                },
                type: 'email',
            };
        }
    }
    return { selector: selectorOrDescriptor, type: 'email' };
}
exports.normalizeEmail = normalizeEmail;
