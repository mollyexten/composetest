"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDeviceDescriptorForEmulation = exports.getProperScreenConfig = void 0;
const mablApi_1 = require("../../mablApi");
function getProperScreenConfig(emulationConfig) {
    var _a, _b, _c, _d;
    switch (emulationConfig.orientation) {
        case mablApi_1.DeviceEmulation.OrientationEnum.LandscapePrimary:
        case mablApi_1.DeviceEmulation.OrientationEnum.LandscapeSecondary:
            return (_b = (_a = emulationConfig.device_config) === null || _a === void 0 ? void 0 : _a.screen) === null || _b === void 0 ? void 0 : _b.horizontal;
        case mablApi_1.DeviceEmulation.OrientationEnum.PortraitPrimary:
        case mablApi_1.DeviceEmulation.OrientationEnum.PortraitSecondary:
            return (_d = (_c = emulationConfig.device_config) === null || _c === void 0 ? void 0 : _c.screen) === null || _d === void 0 ? void 0 : _d.vertical;
        default:
            throw new Error(`Unhandled mobile orientation type [${emulationConfig.orientation}]`);
    }
}
exports.getProperScreenConfig = getProperScreenConfig;
function getDeviceDescriptorForEmulation(emulationConfig) {
    var _a, _b, _c, _d, _e;
    if (emulationConfig) {
        const screenConfig = getProperScreenConfig(emulationConfig);
        if (!(screenConfig === null || screenConfig === void 0 ? void 0 : screenConfig.height) && !(screenConfig === null || screenConfig === void 0 ? void 0 : screenConfig.width)) {
            throw new Error('Could not get viewport settings - invalid emulation config supplied with missing height or width');
        }
        return {
            width: screenConfig.width,
            height: screenConfig.height,
            deviceScaleFactor: (_c = (_b = (_a = emulationConfig.device_config) === null || _a === void 0 ? void 0 : _a.screen) === null || _b === void 0 ? void 0 : _b.device_pixel_ratio) !== null && _c !== void 0 ? _c : 1,
            isMobile: isMobile(emulationConfig),
            hasTouch: (_e = (_d = emulationConfig.device_config) === null || _d === void 0 ? void 0 : _d.capabilities) === null || _e === void 0 ? void 0 : _e.includes(mablApi_1.DeviceEmulationConfiguration.CapabilitiesEnum.Touch),
            isLandscape: emulationConfig.orientation ===
                mablApi_1.DeviceEmulation.OrientationEnum.LandscapePrimary ||
                emulationConfig.orientation ===
                    mablApi_1.DeviceEmulation.OrientationEnum.LandscapeSecondary,
        };
    }
    return;
}
exports.getDeviceDescriptorForEmulation = getDeviceDescriptorForEmulation;
function isMobile(emulationConfig) {
    return (emulationConfig.device_config.type ===
        mablApi_1.DeviceEmulationConfiguration.TypeEnum.Phone ||
        emulationConfig.device_config.type ===
            mablApi_1.DeviceEmulationConfiguration.TypeEnum.Tablet);
}
