"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const storage_1 = require("@google-cloud/storage");
const IdentifierUtil_1 = require("./IdentifierUtil");
const loggingProvider_1 = require("../providers/logging/loggingProvider");
const MAX_PUT_ATTEMPTS = 3;
const AUTO_COMPRESS_MIME_TYPES = new Set([
    'application/json',
    'text/plain',
]);
class CloudStorageWriter {
    constructor(projectId, workspaceId) {
        this.bucket = new storage_1.Storage().bucket(`${projectId}-workspace-${(0, IdentifierUtil_1.toCloudSafeId)(workspaceId)}`);
    }
    bucketName() {
        return this.bucket.name;
    }
    async write(path, contentType, data) {
        let attempt = 0;
        while (attempt++ < MAX_PUT_ATTEMPTS) {
            try {
                return await this.writeOnce(path, contentType, data);
            }
            catch (error) {
                loggingProvider_1.logger.info(`Error writing file to GCS at ${path} (attempt ${attempt} of ${MAX_PUT_ATTEMPTS})`, error);
                if (attempt === MAX_PUT_ATTEMPTS) {
                    throw error;
                }
            }
        }
    }
    writeOnce(path, contentType, data) {
        return this.bucket.file(path).save(data, {
            contentType,
            metadata: {
                'Custom-Time': getNowIsoTimestamp(),
            },
            gzip: AUTO_COMPRESS_MIME_TYPES.has(contentType.toLowerCase()),
        });
    }
}
exports.default = CloudStorageWriter;
function getNowIsoTimestamp() {
    return new Date().toISOString();
}
