"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logSessionStarted = exports.openUrlInDesktopApp = void 0;
const open_1 = __importDefault(require("open"));
const env_1 = require("../../env/env");
const timers_1 = require("timers");
const messaging_1 = require("../messaging/messaging");
const chalk_1 = __importDefault(require("chalk"));
const encodingUtil_1 = require("../../util/encodingUtil");
async function openUrlInDesktopApp(url, trainingSessionOptions) {
    const params = (0, encodingUtil_1.encodeTestConfigAsParamsForParsedUrlProtocol)(trainingSessionOptions, encodingUtil_1.b64EncodeUnicodeInNode);
    const childProcess = await (0, open_1.default)(`${env_1.ELECTRON_PROTOCOL}://${url}/${params}`);
    let childProcessExited = false;
    const keepAliveUntilExited = () => {
        if (!childProcessExited) {
            (0, timers_1.setTimeout)(keepAliveUntilExited, 1000);
        }
    };
    keepAliveUntilExited();
    const exitCode = await new Promise((resolve) => {
        childProcess.on('error', () => {
            childProcessExited = true;
            resolve(1);
        });
        childProcess.on('exit', function () {
            childProcessExited = true;
            resolve(childProcess.exitCode);
        });
    });
    if (exitCode === 0) {
        logSessionStarted();
    }
    else {
        logInstallDesktopApp();
    }
}
exports.openUrlInDesktopApp = openUrlInDesktopApp;
function logSessionStarted() {
    messaging_1.mablEventEmitter.log(chalk_1.default.yellowBright('Session started in the desktop app'));
}
exports.logSessionStarted = logSessionStarted;
function logInstallDesktopApp() {
    messaging_1.mablEventEmitter.log(chalk_1.default.red(`\nFailed to launch mabl desktop app!`, chalk_1.default.cyan(`\nPlease check your installation or download and install it from`), chalk_1.default.magenta('https://www.mabl.com/desktop-app')));
}
