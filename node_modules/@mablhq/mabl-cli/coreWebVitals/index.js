"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachListeners = exports.listenersAreAttached = void 0;
const web_vitals_1 = require("web-vitals");
const POLLING_MAX_ATTEMPTS = 10;
const POLLING_INTERVAL_MILLIS = 100;
exports.listenersAreAttached = false;
function attachListeners() {
    (0, web_vitals_1.onCLS)(sendMetric);
    (0, web_vitals_1.onFCP)(sendMetric);
    (0, web_vitals_1.onLCP)(sendMetric);
    (0, web_vitals_1.onTTFB)(sendMetric);
    onNavigationEvent(sendMetric);
    exports.listenersAreAttached = true;
}
exports.attachListeners = attachListeners;
function handleNavigationEvent(eventName, callback) {
    var _a;
    const performanceEntries = performance.getEntriesByType('navigation');
    const navigationTiming = performanceEntries === null || performanceEntries === void 0 ? void 0 : performanceEntries[0];
    const eventTimestamp = navigationTiming === null || navigationTiming === void 0 ? void 0 : navigationTiming[eventName];
    callback({
        name: eventName,
        value: eventTimestamp,
        delta: eventTimestamp,
        rating: 'none',
        id: `NAV:${eventName}:${eventTimestamp}:${Date.now()}`,
        entries: performanceEntries === null || performanceEntries === void 0 ? void 0 : performanceEntries.map((entry) => entry === null || entry === void 0 ? void 0 : entry.toJSON()),
        navigationType: (_a = navigationTiming === null || navigationTiming === void 0 ? void 0 : navigationTiming.type) !== null && _a !== void 0 ? _a : 'navigate',
    });
}
function pollForEventTimestamp(eventName, callback, navigationTiming) {
    var _a;
    navigationTiming =
        navigationTiming !== null && navigationTiming !== void 0 ? navigationTiming : (_a = performance.getEntriesByType('navigation')) === null || _a === void 0 ? void 0 : _a[0];
    if (navigationTiming === null || navigationTiming === void 0 ? void 0 : navigationTiming[eventName]) {
        handleNavigationEvent(eventName, callback);
        return;
    }
    let attempts = 0;
    const interval = window.setInterval(() => {
        var _a;
        attempts++;
        const navigationTiming = (_a = performance.getEntriesByType('navigation')) === null || _a === void 0 ? void 0 : _a[0];
        if ((navigationTiming === null || navigationTiming === void 0 ? void 0 : navigationTiming[eventName]) || attempts >= POLLING_MAX_ATTEMPTS) {
            handleNavigationEvent(eventName, callback);
            window.clearInterval(interval);
        }
    }, POLLING_INTERVAL_MILLIS);
}
function onNavigationEvent(callback) {
    var _a;
    const navigationTiming = (_a = performance.getEntriesByType('navigation')) === null || _a === void 0 ? void 0 : _a[0];
    if (navigationTiming !== undefined) {
        handleNavigationEvent('startTime', callback);
    }
    if (navigationTiming === null || navigationTiming === void 0 ? void 0 : navigationTiming.domContentLoadedEventEnd) {
        handleNavigationEvent('domContentLoadedEventEnd', callback);
    }
    else {
        document.addEventListener('DOMContentLoaded', function () {
            pollForEventTimestamp('domContentLoadedEventEnd', callback);
        });
    }
}
const sendMetric = (metric) => {
    var _a, _b, _c;
    const navigationTiming = (_a = performance.getEntriesByType('navigation')) === null || _a === void 0 ? void 0 : _a[0];
    (_c = (_b = window).dispatchMablEvent) === null || _c === void 0 ? void 0 : _c.call(_b, {
        createdTime: Date.now(),
        timeOrigin: performance.timeOrigin,
        type: 'WEB_PERFORMANCE_METRIC_DETECTED',
        currentUrl: window.document.URL,
        navigationUrl: navigationTiming === null || navigationTiming === void 0 ? void 0 : navigationTiming.name,
        metric,
    });
};
