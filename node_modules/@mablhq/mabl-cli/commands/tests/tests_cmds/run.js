"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../commandUtil/util");
const testsUtil_1 = require("../testsUtil");
const constants_1 = require("../../constants");
const loggingProvider_1 = require("../../../providers/logging/loggingProvider");
const mablApi_1 = require("../../../mablApi");
const execution_1 = require("../../../execution");
const defaultEnv_1 = require("../../../env/defaultEnv");
const runUtils_1 = require("./runUtils");
const mablApiClientFactory_1 = require("../../../api/mablApiClientFactory");
const execution = require('../../../execution/index');
exports.command = `run`;
exports.describe =
    "Run a test locally with headless support\nPre v1.0.0 'run' command behavior moved to 'run-legacy'";
exports.builder = (yargs) => {
    yargs
        .example('$0 tests run --id <id> --headless', 'run test locally by id in headless mode')
        .example('$0 tests run --run-id <test-run-id>', 'run a test locally using the test configuration from a cloud run')
        .option(constants_1.CommandArgId, {
        describe: 'The id of the test to run',
        type: 'string',
    })
        .option(constants_1.CommandArgTestFile, {
        describe: 'the source file of the test to run',
        type: 'string',
        hidden: true,
    })
        .option(constants_1.CommandArgTestRunId, {
        describe: 'The id of the test run to pull config from',
        type: 'string',
    })
        .option(constants_1.CommandArgFromPlanId, {
        describe: `The plan id to get a list of tests from.
Note: running tests with the --from-plan-id option is not a plan run. Advanced plan configurations, such as stages, browser settings or shared variables, are not applied.`,
        type: 'string',
    })
        .option(constants_1.CommandArgMablBranch, {
        describe: 'Mabl branch to run test against',
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgMablBranchChangesOnly, {
        describe: 'Only execute tests changed on specified mabl branch',
        type: 'boolean',
        default: false,
    })
        .implies(constants_1.CommandArgMablBranchChangesOnly, constants_1.CommandArgMablBranch)
        .option(constants_1.CommandArgLabelsInclude, {
        describe: 'Space delimited test labels. Run tests that match any label.',
        type: 'array',
        conflicts: [constants_1.CommandArgId],
    })
        .option(constants_1.CommandArgLabelsExclude, {
        describe: 'Space delimited test labels. Exclude tests that match any label.',
        type: 'array',
        conflicts: [constants_1.CommandArgId],
    })
        .option(constants_1.CommandArgWorkspaceId, {
        alias: constants_1.CommandArgAliases.WorkspaceId,
        describe: 'Workspace to run against',
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgEnvironmentId, {
        alias: constants_1.CommandArgAliases.EnvironmentId,
        describe: `Mabl environment to run under. Specify to ensure the test runs with environment variables and the latest find information.
Note: Setting the environment does not override the default URL. Please use the (â€”url) command to override the URL.`,
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgLocale, {
        describe: 'Locale to run the test in, e.g. en-US',
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgTimezoneID, {
        describe: 'Identifier of the timezone to run the test in, e.g. America/Buenos_Aires',
        nargs: 1,
        type: 'string',
    })
        .option('width', {
        describe: 'Set the browser width in pixels',
        default: 1366,
        nargs: 1,
        type: 'number',
    })
        .option('height', {
        describe: 'Set the browser height in pixels',
        default: 768,
        nargs: 1,
        type: 'number',
    })
        .option(constants_1.CommandArgUrl, {
        alias: constants_1.CommandArgAliases.Url,
        describe: 'URL to run the mabl test against',
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgCredentials, {
        alias: constants_1.CommandArgAliases.Credentials,
        describe: 'Credentials ID to run the test with',
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgDataTableId, {
        describe: 'Run test using all the scenarios from the Data table ID',
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgScenarioId, {
        describe: 'Run test using an specific scenario',
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgBasicAuthCredentials, {
        alias: constants_1.CommandArgAliases.BasicAuthCredentials,
        describe: 'Basic Authentication credentials for adding basic auth headers to test run',
        nargs: 1,
        type: 'string',
    })
        .option('headless', {
        describe: 'Should the test run headless or not',
        default: false,
        type: 'boolean',
    })
        .option('highlights', {
        describe: 'Highlight elements before interacting with them. Highlighting introduces a small delay for each step.',
        default: false,
        type: 'boolean',
    })
        .option('keep-browser-open', {
        describe: 'Prevent the browser from closing at the end of a test.',
        default: false,
        type: 'boolean',
    })
        .option(constants_1.CommandArgReporter, {
        describe: 'Output test run information for specified reporter. (mabl reporter requires the mabl_local_reporter feature flag)',
        hidden: true,
        type: 'string',
        choices: [constants_1.Reporter.Mochawesome, constants_1.Reporter.Mabl],
    })
        .option(constants_1.CommandArgReporterOptions, {
        describe: 'Reporter options as comma separated key/values pairs. e.g. "reportDir=path/to,json=true"',
        hidden: true,
        type: 'string',
    })
        .implies(constants_1.CommandArgReporterOptions, constants_1.CommandArgReporter)
        .option(constants_1.CommandArgBrowserDisableIsolation, {
        hidden: true,
        describe: 'Disable cross origin isolation',
        default: false,
        type: 'boolean',
    })
        .option(constants_1.CommandArgBrowserIgnoreCertificateErrors, {
        hidden: true,
        describe: 'Ignore certificate errors',
        default: false,
        type: 'boolean',
    })
        .option(constants_1.CommandArgBrowserEnableExtensions, {
        describe: 'Enable browser extensions on [Chrome] and [Edge]',
        default: false,
        type: 'boolean',
    })
        .option(constants_1.CommandArgHttpHeaders, {
        describe: 'Space delimited HTTP headers added to browser requests (e.g. "x-header:foo")',
        type: 'array',
    })
        .option(constants_1.CommandArgUserAgent, {
        describe: 'Emulates a custom user-agent (e.g. "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4651.0 Safari/537.36")',
        type: 'string',
    })
        .option(constants_1.CommandArgTestInteractionSpeed, {
        describe: 'Set the speed that mabl interacts with webpages. Overrides test run settings if specified.',
        type: 'string',
        choices: Object.keys(mablApi_1.TestParameters.PageLoadWaitEnum).map((pageLoadWait) => pageLoadWait.toLowerCase()),
    })
        .option(constants_1.CommandArgBrowser, {
        describe: `Target browser to execute the test against, must be one of ${constants_1.ValidBrowserTypesForLocalRuns}, defaults to ${constants_1.DefaultBrowserType}`,
        type: 'string',
        nargs: 1,
        choices: constants_1.ValidBrowserTypesForLocalRuns,
        hidden: true,
    })
        .option(constants_1.CommandArgUseTestExecutionProxy, {
        describe: 'Route test HTTP traffic through a local proxy',
        type: 'boolean',
        hidden: true,
    })
        .check((argv) => {
        (0, testsUtil_1.validateRunCommandWithLabels)(argv[constants_1.CommandArgId], argv[constants_1.CommandArgLabelsInclude], argv[constants_1.CommandArgLabelsExclude], argv[constants_1.CommandArgTestRunId], argv[constants_1.CommandArgFromPlanId], true, argv[constants_1.CommandArgTestFile]);
        if (argv[constants_1.CommandArgDataTableId] &&
            !argv[constants_1.CommandArgId] &&
            !argv[constants_1.CommandArgFromPlanId]) {
            throw new Error(`The ${constants_1.CommandArgDataTableId} option can only be used with the ${constants_1.CommandArgId} or the ${constants_1.CommandArgFromPlanId} option`);
        }
        if (argv[constants_1.CommandArgDataTableId] && argv[constants_1.CommandArgScenarioId]) {
            throw new Error(`The ${constants_1.CommandArgScenarioId} option cannot be used with the ${constants_1.CommandArgDataTableId} option`);
        }
        const httpHeaders = argv[constants_1.CommandArgHttpHeaders];
        (0, util_1.validateArrayInputs)(httpHeaders, 'HTTP headers must be SPACE delimited, e.g. "--http-headers "foo:bar" "baz:qux"');
        argv[constants_1.CommandArgHttpHeaders] = (0, util_1.validateValuePairInputs)('HTTP header', httpHeaders);
        return true;
    });
};
const exitCodeOnError = 1;
exports.handler = (0, util_1.failWrapper)(run, exitCodeOnError);
async function run(parsed) {
    var _a;
    const commandStartTime = Date.now();
    let workspaceId;
    try {
        workspaceId = await (0, util_1.getWorkspaceId)(parsed);
    }
    catch {
    }
    const extraHttpHeaders = {};
    ((_a = parsed['http-headers']) !== null && _a !== void 0 ? _a : []).forEach((header) => {
        const headerParts = header.split(':');
        if (headerParts.length === 2 && headerParts[0] && headerParts[1]) {
            extraHttpHeaders[headerParts[0].toLowerCase()] = headerParts[1];
        }
    });
    const browserType = (0, testsUtil_1.parseBrowserType)(parsed[constants_1.CommandArgBrowser]);
    let scenario;
    if (parsed[constants_1.CommandArgScenarioId]) {
        const apiClient = await mablApiClientFactory_1.MablApiClientFactory.createApiClient();
        scenario = await apiClient.getScenario(parsed[constants_1.CommandArgScenarioId]);
        if (!scenario) {
            throw new Error(`Scenario with ID ${parsed[constants_1.CommandArgScenarioId]} not found`);
        }
    }
    const parsedLocale = parsed[constants_1.CommandArgLocale];
    const parsedTimezone = parsed[constants_1.CommandArgTimezoneID];
    const localizationOptions = parsedLocale || parsedTimezone
        ? {
            locale: parsedLocale,
            timezone_identifier: parsedTimezone,
        }
        : undefined;
    const testRunnerConfig = {
        _cliCreated: true,
        basicAuthCredentialsId: parsed[constants_1.CommandArgBasicAuthCredentials],
        branchName: parsed['mabl-branch'],
        branchChangesOnly: parsed['branch-changes-only'],
        browserType,
        credentialsId: parsed['credentials-id'],
        dataTableVariables: scenario,
        disableIsolation: parsed[constants_1.CommandArgBrowserDisableIsolation],
        enableExtensions: parsed[constants_1.CommandArgBrowserEnableExtensions],
        enableLink: false,
        environmentId: parsed[constants_1.CommandArgEnvironmentId],
        extraHttpHeaders,
        filterHttpRequests: false,
        fromPlanId: parsed['from-plan-id'],
        headless: parsed.headless,
        height: parsed.height,
        highlights: parsed.highlights,
        ignoreCertificateErrors: parsed[constants_1.CommandArgBrowserIgnoreCertificateErrors],
        interactionSpeed: parsed[constants_1.CommandArgTestInteractionSpeed],
        keepBrowserOpen: parsed['keep-browser-open'],
        labelsExclude: parsed['exclude-labels'],
        labelsInclude: parsed.labels,
        localizationOptions,
        runId: parsed['run-id'],
        testFile: parsed[constants_1.CommandArgTestFile],
        testId: parsed.id,
        url: parsed.url,
        useTestExecutionProxy: parsed[constants_1.CommandArgUseTestExecutionProxy],
        userAgent: parsed[constants_1.CommandArgUserAgent],
        usingDataTableId: parsed[constants_1.CommandArgDataTableId],
        width: parsed.width,
        workspaceId,
    };
    loggingProvider_1.logger.info('Warming up test runner...');
    const mablTestsRunner = await execution.createBrowserTestsRunner(testRunnerConfig);
    const results = await mablTestsRunner.run();
    if ((mablTestsRunner === null || mablTestsRunner === void 0 ? void 0 : mablTestsRunner.mablTestRunners) !== undefined) {
        mablTestsRunner.mablTestRunners
            .filter((tr) => tr instanceof execution_1.MablTestRunner)
            .forEach((tr) => {
            const testContext = tr.testContext;
            (0, testsUtil_1.cleanupTestResources)(testContext);
        });
    }
    const apiClient = await mablApiClientFactory_1.MablApiClientFactory.createApiClient();
    await (0, runUtils_1.logTestResults)(results, parsed, commandStartTime, generateRunCommandTemplate(parsed, results), apiClient, workspaceId, browserType);
    if (!testRunnerConfig.keepBrowserOpen) {
        if (!results.success) {
            process.exit(1);
        }
    }
}
function generateRunCommandTemplate(parsed, testResults) {
    var _a, _b, _c, _d, _e, _f, _g;
    const testResult = testResults.testResults[0];
    let templateCommand = `${defaultEnv_1.SCRIPT_NAME} ${parsed._.join(' ')} \\\n`;
    if ((_a = testResult === null || testResult === void 0 ? void 0 : testResult.rerunConfig) === null || _a === void 0 ? void 0 : _a.environmentId) {
        templateCommand = `${templateCommand} --${constants_1.CommandArgEnvironmentId} ${(_b = testResult === null || testResult === void 0 ? void 0 : testResult.rerunConfig) === null || _b === void 0 ? void 0 : _b.environmentId} \\\n`;
    }
    if ((_c = testResult === null || testResult === void 0 ? void 0 : testResult.rerunConfig) === null || _c === void 0 ? void 0 : _c.credentialsId) {
        templateCommand = `${templateCommand} --${constants_1.CommandArgCredentials} ${(_d = testResult === null || testResult === void 0 ? void 0 : testResult.rerunConfig) === null || _d === void 0 ? void 0 : _d.credentialsId} \\\n`;
    }
    if ((_e = testResult === null || testResult === void 0 ? void 0 : testResult.rerunConfig) === null || _e === void 0 ? void 0 : _e.url) {
        templateCommand = `${templateCommand} --${constants_1.CommandArgUrl} ${(_f = testResult === null || testResult === void 0 ? void 0 : testResult.rerunConfig) === null || _f === void 0 ? void 0 : _f.url} \\\n`;
    }
    if ((_g = testResult === null || testResult === void 0 ? void 0 : testResult.rerunConfig) === null || _g === void 0 ? void 0 : _g.branch) {
        templateCommand = `${templateCommand} --${constants_1.CommandArgMablBranch} ${testResult.rerunConfig.branch} \\\n`;
    }
    const testIdVal = parsed.id ? parsed.id : '<TEST-ID>';
    templateCommand = `${templateCommand} --${constants_1.CommandArgId} ${testIdVal}`;
    return templateCommand;
}
