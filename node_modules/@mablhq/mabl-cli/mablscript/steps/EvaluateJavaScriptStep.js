"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isEvaluateJavaScriptStep = exports.EvaluateJavaScriptStep = void 0;
const MablStep_1 = require("../MablStep");
const JavaScriptAction_1 = require("../actions/JavaScriptAction");
const STEP_NAME = 'EvaluateJavaScript';
class EvaluateJavaScriptStep extends MablStep_1.MablStep {
    constructor(name, args, actions) {
        super(name, args, actions || [], 'evaluate_js');
        this.evaluateJsAction = new JavaScriptAction_1.JavaScriptAction(JavaScriptAction_1.JavaScriptAction.mablscriptName, args);
    }
    getStepName() {
        return STEP_NAME;
    }
    toStepDescriptor() {
        return this.evaluateJsAction.toDescriptor();
    }
    getFormattedStep() {
        const step = {
            [STEP_NAME]: {
                ...super.annotationsAsYml(),
                ...this.evaluateJsAction.toYaml(),
            },
        };
        if (this.stepId()) {
            step[STEP_NAME].id = this.stepId();
        }
        return step;
    }
    static fromYaml(_stepName, stepArgs) {
        const evaluateJsAction = JavaScriptAction_1.JavaScriptAction.fromYaml(stepArgs);
        const step = new EvaluateJavaScriptStep(evaluateJsAction.name, evaluateJsAction.args);
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        return this.evaluateJsAction.toMablscript();
    }
    getInputVariables() {
        return this.evaluateJsAction.getInputVariables();
    }
}
exports.EvaluateJavaScriptStep = EvaluateJavaScriptStep;
EvaluateJavaScriptStep.stepName = STEP_NAME;
EvaluateJavaScriptStep.mablScriptStepNames = [JavaScriptAction_1.JavaScriptAction.mablscriptName];
EvaluateJavaScriptStep.yamlMablScriptNames = [STEP_NAME];
function isEvaluateJavaScriptStep(value) {
    return (value === null || value === void 0 ? void 0 : value.getStepName) && (value === null || value === void 0 ? void 0 : value.getStepName()) === STEP_NAME;
}
exports.isEvaluateJavaScriptStep = isEvaluateJavaScriptStep;
