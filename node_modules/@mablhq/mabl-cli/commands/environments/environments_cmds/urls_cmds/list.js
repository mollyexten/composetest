"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const interfaces_1 = require("../../../commandUtil/interfaces");
const constants_1 = require("../../../constants");
const util_1 = require("../../../commandUtil/util");
const mablApiClientFactory_1 = require("../../../../api/mablApiClientFactory");
const describe_1 = require("../../../commandUtil/describe");
exports.command = `list <${constants_1.CommandArgId}>`;
exports.describe = 'Show URLs associated with an environment';
exports.builder = (yargs) => {
    yargs
        .positional(constants_1.CommandArgId, {
        describe: 'Environment id to list URL associations for',
        type: 'string',
    })
        .option(constants_1.CommandArgApplicationId, {
        describe: 'Application id to filter URLs by',
        alias: constants_1.CommandArgAliases.ApplicationId,
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgLimitOutput, {
        alias: constants_1.CommandArgAliases.LimitOutput,
        describe: `The number of URLs to return'`,
        default: interfaces_1.DEFAULT_LISTING_RESULT_LIMIT,
        nargs: 1,
        type: 'string',
    })
        .option(constants_1.CommandArgOutput, {
        alias: constants_1.CommandArgAliases.OutputType,
        choices: constants_1.DefaultOutputFormatChoices,
        describe: 'Specify result output format',
        nargs: 1,
    });
};
exports.handler = (0, util_1.failWrapper)(queryDeployments);
async function queryDeployments(parsed) {
    var _a;
    const apiClient = await mablApiClientFactory_1.MablApiClientFactory.createApiClient();
    try {
        const environment = await apiClient.getEnvironment(parsed.id);
        const deploymentEntities = await apiClient.queryDeploymentEntities((_a = environment.organization_id) !== null && _a !== void 0 ? _a : '', environment.id, parsed[constants_1.CommandArgApplicationId], parsed.limit);
        (0, describe_1.outputEntity)(deploymentEntities.deployments, parsed.output);
    }
    catch (error) {
        throw new Error(`Error listing urls for environment ${parsed.id}: ${error}`);
    }
    return 'done';
}
