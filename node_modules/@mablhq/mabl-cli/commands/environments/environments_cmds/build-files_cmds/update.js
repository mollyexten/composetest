"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateDeploymentForBuildFile = void 0;
const constants_1 = require("../../../constants");
const util_1 = require("../../../commandUtil/util");
const add_1 = require("./add");
const mablApiClientFactory_1 = require("../../../../api/mablApiClientFactory");
const mablApi_1 = require("../../../../mablApi");
const loggingProvider_1 = require("../../../../providers/logging/loggingProvider");
const chalk_1 = __importDefault(require("chalk"));
exports.command = `update <${constants_1.CommandArgId}>`;
exports.describe =
    'Update mobile build file associated with an environment or add new association';
exports.builder = (yargs) => {
    (0, add_1.addEnvironmentBuildFilesOptions)(yargs)
        .positional(constants_1.CommandArgId, {
        describe: 'ID of environment to update mobile build file association',
        type: 'string',
    })
        .demandOption(constants_1.CommandArgApplicationId)
        .demandOption(constants_1.CommandArgMobileBuildFileId);
};
exports.handler = (0, util_1.failWrapper)(updateOrCreateDeployment);
async function updateOrCreateDeployment(parsed) {
    const apiClient = await mablApiClientFactory_1.MablApiClientFactory.createApiClient();
    const applicationId = parsed[constants_1.CommandArgApplicationId];
    const environmentId = parsed[constants_1.CommandArgId];
    const buildFileId = parsed[constants_1.CommandArgMobileBuildFileId];
    try {
        await apiClient.getApplication(applicationId);
        const buildFile = await apiClient.getMobileAppFile(buildFileId);
        const environment = await apiClient.getEnvironment(environmentId);
        await updateDeploymentForBuildFile(apiClient, environment, applicationId, buildFile);
        return 'done';
    }
    catch (error) {
        throw new Error(`Error updating build file for environment ${parsed.id}: ${error}`);
    }
}
async function updateDeploymentForBuildFile(apiClient, environment, applicationId, newBuildFile) {
    var _a, _b, _c, _d;
    const deploymentEntities = await apiClient.queryDeploymentEntities((_a = environment.organization_id) !== null && _a !== void 0 ? _a : '', environment.id, applicationId, 1000);
    const candidatesForUpdate = (_d = (_c = (_b = deploymentEntities === null || deploymentEntities === void 0 ? void 0 : deploymentEntities.deployments) === null || _b === void 0 ? void 0 : _b.filter((deployment) => !!deployment.mobile_app_file_id)) === null || _c === void 0 ? void 0 : _c.filter(async (deployment) => {
        const buildFile = await apiClient.getMobileAppFile(deployment.mobile_app_file_id);
        return (deployment.deployment_type ===
            mablApi_1.Deployment.DeploymentTypeEnum.MobileApplication &&
            buildFile.platform === newBuildFile.platform);
    })) !== null && _d !== void 0 ? _d : [];
    if ((candidatesForUpdate === null || candidatesForUpdate === void 0 ? void 0 : candidatesForUpdate.length) === 0) {
        await (0, add_1.createDeploymentForBuildFile)(apiClient, environment, applicationId, newBuildFile.id);
        return;
    }
    else if ((candidatesForUpdate === null || candidatesForUpdate === void 0 ? void 0 : candidatesForUpdate.length) > 1) {
        throw new Error('Multiple deployments with the same mobile platform found. Please remove duplicates or use mabl UI to change the build file association.');
    }
    try {
        const existingDeployment = candidatesForUpdate[0];
        existingDeployment.mobile_app_file_id = newBuildFile.id;
        await apiClient.updateDeployment(existingDeployment.id, existingDeployment);
        loggingProvider_1.logger.info(chalk_1.default.white(`Updated ${newBuildFile.platform} build file associated with environment ${environment.id} and application ${applicationId} to ${newBuildFile.id} `));
    }
    catch (error) {
        loggingProvider_1.logger.error(error);
        const reRunCommandString = `mabl environments build-files update ${environment.id} --applicationId ${applicationId} --build-file-id ${newBuildFile.id}`;
        loggingProvider_1.logger.info(chalk_1.default.white(`Associating build file with environment failed. You can reattempt this association by running ${chalk_1.default.bold(reRunCommandString)}`));
    }
}
exports.updateDeploymentForBuildFile = updateDeploymentForBuildFile;
