"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenEmailStep = void 0;
const FindAction_1 = require("../actions/FindAction");
const MablStepWithFindAction_1 = require("../MablStepWithFindAction");
class OpenEmailStep extends MablStepWithFindAction_1.MablStepWithFindAction {
    constructor(name, args, actions) {
        super(name, args, actions, OpenEmailStep.stepName);
        this.tabUuid = this.getActionArgs()[0] || {};
        this.validate();
        this.findAction = this.actions[0];
    }
    validate() {
        if (this.actions.length !== 1 && !(this.actions[0] instanceof FindAction_1.FindAction)) {
            throw new Error('Open email steps should have exactly one sub action and it should be a find');
        }
    }
    getStepName() {
        return 'OpenEmail';
    }
    toStepDescriptor() {
        const find = this.findAction.toDescriptor();
        return {
            tab: this.tabUuid,
            selector: find.findTarget.selector,
            findType: 'FindEmail',
            configuration: find.findTarget.configuration,
            actionCode: this.actionCode,
        };
    }
    static fromYaml(_stepName, stepArgs) {
        const step = new OpenEmailStep(OpenEmailStep.stepName, [stepArgs.tab], [FindAction_1.FindAction.findActionFromStepArgs(stepArgs)]);
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        return `${this.findAction.toMablscript()}.open_email("${this.tabUuid}")`;
    }
    getInputVariables() {
        return this.findAction.getInputVariables();
    }
}
exports.OpenEmailStep = OpenEmailStep;
OpenEmailStep.stepName = 'open_email';
OpenEmailStep.mablScriptStepNames = [OpenEmailStep.stepName];
OpenEmailStep.yamlMablScriptNames = ['OpenEmail'];
