"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MablHttpAgent = void 0;
const http_1 = __importDefault(require("http"));
const agent_base_1 = require("agent-base");
const axiosProxyConfig_1 = require("./axiosProxyConfig");
const https = __importStar(require("https"));
const httpUtil_1 = require("./httpUtil");
class MablHttpAgent extends agent_base_1.Agent {
    constructor(httpAgent, httpsAgent) {
        super();
        this.httpAgent = httpAgent;
        this.httpsAgent = httpsAgent;
    }
    static async createNewInstance(config) {
        const constructorParameters = await MablHttpAgent.getConstructorParameters(config.httpAgent, config.httpsAgent);
        if (config.proxyConfig) {
            const axiosConfig = (0, axiosProxyConfig_1.axiosProxyConfig)(config.proxyConfig);
            constructorParameters.httpAgent = axiosConfig.httpAgent;
            constructorParameters.httpsAgent = axiosConfig.httpsAgent;
        }
        return new MablHttpAgent(constructorParameters.httpAgent, constructorParameters.httpsAgent);
    }
    static async getConstructorParameters(httpAgent, httpsAgent) {
        var _a, _b;
        const proxyConfig = await (0, axiosProxyConfig_1.currentProxyConfig)('test');
        return {
            httpAgent: (_a = httpAgent !== null && httpAgent !== void 0 ? httpAgent : proxyConfig.httpAgent) !== null && _a !== void 0 ? _a : http_1.default.globalAgent,
            httpsAgent: (_b = httpsAgent !== null && httpsAgent !== void 0 ? httpsAgent : proxyConfig.httpsAgent) !== null && _b !== void 0 ? _b : https.globalAgent,
        };
    }
    callback(req, opts) {
        var _a;
        if ((_a = this.maybeGetFirstStringHeader(req, httpUtil_1.USER_AGENT_HEADER)) === null || _a === void 0 ? void 0 : _a.startsWith('PostmanRuntime/')) {
            req.setHeader(httpUtil_1.USER_AGENT_HEADER, httpUtil_1.USER_AGENT);
        }
        return Promise.resolve(opts.secureEndpoint ? this.httpsAgent : this.httpAgent);
    }
    maybeGetFirstStringHeader(req, name) {
        const value = req.getHeader(name);
        if (Array.isArray(value)) {
            return value[0].toString();
        }
        return value === null || value === void 0 ? void 0 : value.toString();
    }
}
exports.MablHttpAgent = MablHttpAgent;
