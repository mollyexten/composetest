"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReportOptions = exports.generatePlainSuiteFromTestResults = exports.generateMochAwesomeReportFromTestResults = void 0;
const uuid_1 = require("uuid");
const TestResult_1 = require("../../core/execution/TestResult");
const mochawesome_report_generator_1 = __importDefault(require("mochawesome-report-generator"));
const moment_1 = __importDefault(require("moment"));
const loggingProvider_1 = require("../../providers/logging/loggingProvider");
const path = __importStar(require("path"));
const pureUtil_1 = require("../../util/pureUtil");
function generateMochAwesomeReportFromTestResults(testResults, reportOptions) {
    const plainSuite = generatePlainSuiteFromTestResults(testResults);
    const parentSuite = generateHoldingTestSuiteObj(plainSuite);
    const finalOptions = generateReportOptions(reportOptions);
    const cliVersion = `@mablhq/mabl-cli@${(0, pureUtil_1.getCliVersion)()}`;
    const testReportObj = {
        results: [parentSuite],
        stats: {
            testsRegistered: testResults.numTotalTests,
            passPercent: (testResults.numPassedTests /
                (testResults.numTotalTests - testResults.numSkippedTests)) *
                100,
            pendingPercent: 0,
            other: 0,
            hasOther: false,
            skipped: testResults.numSkippedTests,
            hasSkipped: !!testResults.numSkippedTests,
            start: (0, moment_1.default)(testResults.startTime).toISOString(),
            end: (0, moment_1.default)(testResults.endTime).toISOString(),
            duration: testResults.endTime - testResults.startTime,
            failures: testResults.numFailedTests,
            passes: testResults.numPassedTests,
            pending: 0,
            suites: 1,
            tests: testResults.numTotalTests,
        },
        meta: {
            mocha: {
                version: cliVersion,
            },
            mochawesome: {
                options: 'unavailable',
                version: cliVersion,
            },
            marge: {
                options: finalOptions,
                version: cliVersion,
            },
        },
    };
    const input = finalOptions.saveHtml
        ? JSON.stringify(testReportObj)
        : testReportObj;
    return mochawesome_report_generator_1.default
        .create(input, finalOptions)
        .then(([_, file]) => {
        loggingProvider_1.logger.info(`Report generated: ${file}`);
    })
        .catch((error) => {
        loggingProvider_1.logger.error(error);
    });
}
exports.generateMochAwesomeReportFromTestResults = generateMochAwesomeReportFromTestResults;
function generatePlainSuiteFromTestResults(testResults) {
    const parentId = (0, uuid_1.v4)();
    const plainTests = testResults.testResults.map((testResult) => generatePlainTestForTestRun(parentId, testResult));
    const passes = plainTests
        .filter((test) => test.pass)
        .map((test) => test.uuid);
    const failures = plainTests
        .filter((test) => test.fail)
        .map((test) => test.uuid);
    const skipped = plainTests
        .filter((test) => test.skipped)
        .map((test) => test.uuid);
    const command = constructTestRunCommand();
    return {
        uuid: parentId,
        title: command !== null && command !== void 0 ? command : `mabl CLI tests`,
        fullFile: '',
        file: '',
        beforeHooks: [],
        afterHooks: [],
        tests: plainTests,
        suites: [],
        passes,
        failures,
        pending: [],
        skipped,
        duration: testResults.totalTimeSeconds * 1000,
        root: true,
        rootEmpty: false,
        _timeout: 0,
    };
}
exports.generatePlainSuiteFromTestResults = generatePlainSuiteFromTestResults;
function generatePlainTestForTestRun(parentUuid, testResult) {
    var _a;
    return {
        title: (_a = testResult.testName) !== null && _a !== void 0 ? _a : '',
        fullTitle: `${testResult.testName} - ${testResult.testId}`,
        timedOut: false,
        code: getCodeForResult(testResult),
        pass: testResult.status === TestResult_1.TestResultStatus.passed,
        fail: testResult.status === TestResult_1.TestResultStatus.failed,
        pending: false,
        uuid: (0, uuid_1.v4)(),
        isHook: false,
        skipped: testResult.status === TestResult_1.TestResultStatus.skipped,
        err: testResult.errorMessage
            ? {
                message: testResult.errorMessage,
            }
            : {},
        duration: testResult.endTime - testResult.startTime,
        parentUUID: parentUuid,
        state: getTestState(testResult.status),
    };
}
function getCodeForResult(testResult) {
    switch (testResult.status) {
        case TestResult_1.TestResultStatus.passed:
            return 'Test passed';
        case TestResult_1.TestResultStatus.skipped:
            return 'Test was skipped';
        case TestResult_1.TestResultStatus.failed:
            return 'Test has failed';
        default:
            return '';
    }
}
function getTestState(testResultStatus) {
    switch (testResultStatus) {
        case TestResult_1.TestResultStatus.passed:
            return 'passed';
        case TestResult_1.TestResultStatus.failed:
            return 'failed';
        default:
            return;
    }
}
function constructTestRunCommand() {
    try {
        const processArgs = process.argv;
        const testArgIndex = processArgs.findIndex((arg) => arg === 'tests');
        if (testArgIndex) {
            processArgs.splice(0, testArgIndex + 1);
        }
        return `mabl ${processArgs.join(' ')}`;
    }
    catch (error) {
        loggingProvider_1.logger.debug('Could not create original command for report');
    }
    return;
}
function generateHoldingTestSuiteObj(suite) {
    return {
        uuid: (0, uuid_1.v4)(),
        title: `mabl CLI test run`,
        fullFile: 'mabl/tests/run',
        file: 'mabl/tests/run',
        beforeHooks: [],
        afterHooks: [],
        tests: [],
        suites: [suite],
        passes: [],
        failures: [],
        pending: [],
        skipped: [],
        duration: 0,
        root: true,
        rootEmpty: true,
        _timeout: 0,
    };
}
function generateReportOptions(supplied) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    if (supplied.json) {
        supplied.saveJson = supplied.json;
        supplied.saveHtml = !supplied.saveJson;
    }
    else if (supplied.html) {
        supplied.saveHtml = supplied.html;
        supplied.saveJson = !supplied.saveHtml;
    }
    return {
        reportFilename: (_a = supplied.reportFilename) !== null && _a !== void 0 ? _a : `mabl-mochawesomeReport`,
        reportDir: (_b = supplied.reportDir) !== null && _b !== void 0 ? _b : path.normalize(`./mablReports`),
        overwrite: (_c = supplied.overwrite) !== null && _c !== void 0 ? _c : true,
        reportTitle: (_d = supplied.reportTitle) !== null && _d !== void 0 ? _d : `mabl mochawesome report`,
        reportPageTitle: (_e = supplied.reportPageTitle) !== null && _e !== void 0 ? _e : `mabl mochawesome report`,
        autoOpen: (_f = supplied.autoOpen) !== null && _f !== void 0 ? _f : !supplied.saveJson,
        showPassed: (_g = supplied.showPassed) !== null && _g !== void 0 ? _g : true,
        showFailed: (_h = supplied.showFailed) !== null && _h !== void 0 ? _h : true,
        showPending: (_j = supplied.showPending) !== null && _j !== void 0 ? _j : true,
        showSkipped: (_k = supplied.showSkipped) !== null && _k !== void 0 ? _k : true,
        saveJson: supplied.saveJson,
        saveHtml: supplied.saveHtml,
    };
}
exports.generateReportOptions = generateReportOptions;
