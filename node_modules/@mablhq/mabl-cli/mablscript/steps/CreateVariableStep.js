"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCreateVariableStep = exports.CreateVariableStep = void 0;
const domUtil_1 = require("../../domUtil");
const CountAction_1 = require("../actions/CountAction");
const ExtractAction_1 = require("../actions/ExtractAction");
const FindAction_1 = require("../actions/FindAction");
const GenerateEmailAddressAction_1 = require("../actions/GenerateEmailAddressAction");
const GenerateRandomStringAction_1 = require("../actions/GenerateRandomStringAction");
const JavaScriptAction_1 = require("../actions/JavaScriptAction");
const MablStep_1 = require("../MablStep");
const CreateVariableStepDescriptor_1 = require("../types/CreateVariableStepDescriptor");
class CreateVariableStep extends MablStep_1.MablStep {
    constructor(name, args, actions) {
        super(name, args, actions, 'as');
        this.variableName = this.getActionArgs()[0];
        this.generationType = this.calculateGenerationType();
    }
    getStepName() {
        return CreateVariableStep.stepName;
    }
    calculateGenerationType() {
        if (this.actions.length === 2 && this.actions[0] instanceof FindAction_1.FindAction) {
            if (this.actions[0].findDescriptor.findType === domUtil_1.FindType.FIND_COOKIE) {
                return CreateVariableStepDescriptor_1.VariableGenerator.COOKIE_ATTRIBUTE;
            }
            if (this.actions[1] instanceof ExtractAction_1.ExtractAction) {
                return CreateVariableStepDescriptor_1.VariableGenerator.ATTRIBUTE;
            }
            else if (this.actions[1] instanceof CountAction_1.CountAction) {
                return CreateVariableStepDescriptor_1.VariableGenerator.ELEMENT_COUNT;
            }
        }
        else if (this.actions.length === 1 &&
            this.actions[0] instanceof GenerateEmailAddressAction_1.GenerateEmailAddressAction) {
            return CreateVariableStepDescriptor_1.VariableGenerator.EMAIL;
        }
        else if (this.actions.length === 1 &&
            this.actions[0] instanceof JavaScriptAction_1.JavaScriptAction) {
            return CreateVariableStepDescriptor_1.VariableGenerator.JAVASCRIPT;
        }
        else if (this.actions.length === 1 &&
            this.actions[0] instanceof GenerateRandomStringAction_1.GenerateRandomStringAction) {
            return CreateVariableStepDescriptor_1.VariableGenerator.PATTERN;
        }
        throw new Error('Unsupported variable generation type');
    }
    toStepDescriptor() {
        let step;
        switch (this.generationType) {
            case CreateVariableStepDescriptor_1.VariableGenerator.COOKIE_ATTRIBUTE:
                const cookieFindAction = this.actions[0];
                const cookieFind = cookieFindAction.toDescriptor();
                step = {
                    name: this.variableName,
                    generator: {
                        type: CreateVariableStepDescriptor_1.VariableGenerator.COOKIE_ATTRIBUTE,
                        cookieSelector: cookieFind.findTarget,
                        attribute: this.actions[1].extractionAttribute,
                    },
                    find: cookieFind,
                    descriptorToActionMap: new Map().set(cookieFind, cookieFindAction),
                    actionCode: this.actionCode,
                };
                break;
            case CreateVariableStepDescriptor_1.VariableGenerator.ATTRIBUTE:
                const findAction = this.actions[0];
                const find = findAction.toDescriptor();
                step = {
                    name: this.variableName,
                    generator: {
                        type: CreateVariableStepDescriptor_1.VariableGenerator.ATTRIBUTE,
                        attribute: this.actions[1].extractionAttribute,
                        find,
                    },
                    find,
                    descriptorToActionMap: new Map().set(find, findAction),
                    actionCode: this.actionCode,
                };
                break;
            case CreateVariableStepDescriptor_1.VariableGenerator.EMAIL:
                step = {
                    name: this.variableName,
                    generator: { type: CreateVariableStepDescriptor_1.VariableGenerator.EMAIL },
                    actionCode: this.actionCode,
                };
                break;
            case CreateVariableStepDescriptor_1.VariableGenerator.JAVASCRIPT:
                step = {
                    name: this.variableName,
                    generator: {
                        type: CreateVariableStepDescriptor_1.VariableGenerator.JAVASCRIPT,
                        javaScript: this.actions[0].javaScript,
                    },
                    actionCode: this.actionCode,
                };
                break;
            case CreateVariableStepDescriptor_1.VariableGenerator.PATTERN:
                step = {
                    name: this.variableName,
                    generator: {
                        type: CreateVariableStepDescriptor_1.VariableGenerator.PATTERN,
                        pattern: this.actions[0]
                            .generateString,
                    },
                    actionCode: this.actionCode,
                };
                break;
            case CreateVariableStepDescriptor_1.VariableGenerator.ELEMENT_COUNT:
                const countFindAction = this.actions[0];
                const countFind = countFindAction.toDescriptor();
                step = {
                    find: countFind,
                    name: this.variableName,
                    generator: {
                        type: CreateVariableStepDescriptor_1.VariableGenerator.ELEMENT_COUNT,
                        find: countFind,
                    },
                    descriptorToActionMap: new Map().set(countFind, countFindAction),
                    actionCode: this.actionCode,
                };
                break;
        }
        return step;
    }
    getFormattedStep() {
        var _a;
        const step = this.toStepDescriptor();
        const stepName = this.getStepName();
        const formatted = {
            [stepName]: {},
        };
        if (this.annotationsOnStep()) {
            formatted[stepName].annotation = this.annotation;
        }
        if (this.description) {
            formatted[stepName].description = this.description;
        }
        switch (step.generator.type) {
            case CreateVariableStepDescriptor_1.VariableGenerator.ELEMENT_COUNT:
                formatted[stepName] = {
                    ...formatted[stepName],
                    generator: step.generator,
                    name: this.variableName,
                    selector: step.generator.find.findTarget,
                };
                break;
            case CreateVariableStepDescriptor_1.VariableGenerator.ATTRIBUTE:
                formatted[stepName] = {
                    ...formatted[stepName],
                    generator: step.generator,
                    name: this.variableName,
                    selector: step.generator.find.findTarget.selector,
                    selectorAncestors: ((_a = step.generator.find.findTarget.auxiliaryDescriptors) !== null && _a !== void 0 ? _a : []).map((descriptor) => descriptor.selector),
                };
                break;
            case CreateVariableStepDescriptor_1.VariableGenerator.JAVASCRIPT:
                formatted[stepName] = {
                    ...formatted[stepName],
                    generator: {
                        type: CreateVariableStepDescriptor_1.VariableGenerator.JAVASCRIPT,
                        javaScript: this.actions[0].toYaml(),
                    },
                    name: this.variableName,
                };
                break;
            default:
                formatted[stepName] = {
                    ...formatted[stepName],
                    generator: step.generator,
                    name: this.variableName,
                };
        }
        if (this.stepId()) {
            formatted[stepName].id = this.stepId();
        }
        return formatted;
    }
    static fromYaml(_stepName, stepArgs) {
        const variableName = stepArgs.name;
        const generator = stepArgs.generator;
        const generationType = generator.type;
        const actions = [];
        switch (generationType) {
            case CreateVariableStepDescriptor_1.VariableGenerator.ATTRIBUTE:
                actions.push(FindAction_1.FindAction.findActionFromStepArgs(stepArgs));
                const extractArgs = generator.metadata
                    ? [generator.attribute, generator.metadata]
                    : [generator.attribute];
                actions.push(new ExtractAction_1.ExtractAction('extract_attribute', extractArgs));
                break;
            case CreateVariableStepDescriptor_1.VariableGenerator.ELEMENT_COUNT:
                actions.push(FindAction_1.FindAction.findActionFromStepArgs(stepArgs, domUtil_1.FindType.FIND_ALL));
                actions.push(new CountAction_1.CountAction('count', []));
                break;
            case CreateVariableStepDescriptor_1.VariableGenerator.EMAIL:
                actions.push(new GenerateEmailAddressAction_1.GenerateEmailAddressAction('generate_email_address', []));
                break;
            case CreateVariableStepDescriptor_1.VariableGenerator.JAVASCRIPT:
                actions.push(JavaScriptAction_1.JavaScriptAction.fromYaml(generator.javaScript));
                break;
            case CreateVariableStepDescriptor_1.VariableGenerator.PATTERN:
                actions.push(new GenerateRandomStringAction_1.GenerateRandomStringAction('generate_random_string', [
                    generator.pattern,
                ]));
                break;
            case CreateVariableStepDescriptor_1.VariableGenerator.COOKIE_ATTRIBUTE:
                actions.push(new FindAction_1.FindAction('find_cookie', [generator.cookieSelector]));
                const extractCookieArgs = [generator.attribute];
                actions.push(new ExtractAction_1.ExtractAction('extract_attribute', extractCookieArgs));
                break;
        }
        const step = new CreateVariableStep('as', [variableName], actions);
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        return `${this.actions.reduce((mablscript, action) => `${mablscript}${action.toMablscript()}.`, '')}as("${this.variableName}")`;
    }
    getInputVariables() {
        return this.actions[0].getInputVariables();
    }
    getOutputVariables() {
        return [this.variableName];
    }
}
exports.CreateVariableStep = CreateVariableStep;
CreateVariableStep.stepName = 'CreateVariable';
CreateVariableStep.mablScriptStepNames = ['as'];
CreateVariableStep.yamlMablScriptNames = ['CreateVariable', 'GenerateEmailAddress'];
function isCreateVariableStep(value) {
    return ((value === null || value === void 0 ? void 0 : value.getStepName) &&
        value.getStepName() === CreateVariableStep.stepName &&
        !!value.generationType);
}
exports.isCreateVariableStep = isCreateVariableStep;
