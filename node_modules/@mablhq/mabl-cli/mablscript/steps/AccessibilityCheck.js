"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessibilityCheckStep = exports.AccessibilityCheckSeverity = void 0;
const MablStep_1 = require("../MablStep");
const FindAction_1 = require("../actions/FindAction");
const ActionsUtils_1 = require("./ActionsUtils");
const domUtil_1 = require("../../domUtil");
var AccessibilityCheckSeverity;
(function (AccessibilityCheckSeverity) {
    AccessibilityCheckSeverity["Critical"] = "critical";
    AccessibilityCheckSeverity["Minor"] = "minor";
    AccessibilityCheckSeverity["Moderate"] = "moderate";
    AccessibilityCheckSeverity["Serious"] = "serious";
})(AccessibilityCheckSeverity || (exports.AccessibilityCheckSeverity = AccessibilityCheckSeverity = {}));
class AccessibilityCheckStep extends MablStep_1.MablStep {
    constructor(name, args, actions) {
        super(name, args, actions, 'accessibility_check');
        if (this.actions.length) {
            this.findAction = ActionsUtils_1.ActionsUtils.validateSingleFindAction(this.actions);
        }
        this.checkConfig = this.getActionArgs()[0];
    }
    canContinueOnFailure() {
        return true;
    }
    getStepName() {
        return AccessibilityCheckStep.yamlMablScriptNames[0];
    }
    toStepDescriptor() {
        if (this.findAction) {
            const find = this.findAction.toDescriptor();
            switch (find.findType) {
                case domUtil_1.FindType.FIND_FIRST:
                case domUtil_1.FindType.FIND_LAST:
                case domUtil_1.FindType.FIND_ANY:
                case domUtil_1.FindType.FIND_ONE:
                    return {
                        ...this.checkConfig,
                        find,
                        descriptorToActionMap: new Map().set(find, this),
                        actionCode: this.actionCode,
                    };
                default:
                    throw new Error(`Error generating step descriptor for ${this.getStepName()}: Unexpected find type ${find.findType}`);
            }
        }
        return {
            actionCode: this.actionCode,
            ...this.checkConfig,
        };
    }
    getFormattedStep(_fullLocatorsOn) {
        let finalStep;
        if (this.findAction) {
            finalStep = {
                AccessibilityCheck: {
                    ...super.annotationsAsYml(),
                    ...this.findAction.toYaml(),
                    ...this.checkConfig,
                },
            };
        }
        else {
            finalStep = {
                AccessibilityCheck: {
                    ...super.annotationsAsYml(),
                    ...this.checkConfig,
                },
            };
        }
        if (this.stepId()) {
            finalStep.AccessibilityCheck.id = this.stepId();
        }
        return finalStep;
    }
    static fromYaml(_stepName, stepArgs) {
        const actions = [];
        if (stepArgs.selector) {
            actions.push(FindAction_1.FindAction.findActionFromStepArgs(stepArgs));
        }
        const checkConfig = {
            tags: stepArgs.tags,
            rules: stepArgs.rules,
            disabledRules: stepArgs.disabledRules,
            failOn: stepArgs.failOn,
        };
        const step = new AccessibilityCheckStep(AccessibilityCheckStep.mablScriptStepNames[0], [checkConfig], actions);
        step.setStepId(stepArgs.id);
        return step;
    }
    toMablscript() {
        var _a, _b, _c;
        let argString = '';
        if (((_a = this.checkConfig) === null || _a === void 0 ? void 0 : _a.tags) ||
            ((_b = this.checkConfig) === null || _b === void 0 ? void 0 : _b.disabledRules) ||
            ((_c = this.checkConfig) === null || _c === void 0 ? void 0 : _c.rules)) {
            argString = `{${(0, MablStep_1.buildObjectString)(this.checkConfig)}}`;
        }
        let findAction = '';
        if (this.findAction) {
            findAction = `${this.findAction.toMablscript()}.`;
        }
        return `${findAction}${AccessibilityCheckStep.mablScriptStepNames[0]}(${argString})`;
    }
}
exports.AccessibilityCheckStep = AccessibilityCheckStep;
AccessibilityCheckStep.mablScriptStepNames = ['accessibility_check'];
AccessibilityCheckStep.yamlMablScriptNames = ['AccessibilityCheck'];
