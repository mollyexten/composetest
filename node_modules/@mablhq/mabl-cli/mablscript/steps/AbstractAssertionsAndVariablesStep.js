"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractAssertionsAndVariablesStep = void 0;
const domUtil_1 = require("../../domUtil");
const MablAction_1 = require("../MablAction");
const MablStep_1 = require("../MablStep");
const ConditionDescriptor_1 = require("../types/ConditionDescriptor");
const AssertStep_1 = require("./AssertStep");
class AbstractAssertionsAndVariablesStep extends MablStep_1.MablStep {
    constructor(name, args, actions, mablScriptName, stepName, descriptor) {
        super(name, args, actions, mablScriptName);
        this.stepName = stepName;
        this.descriptor = descriptor;
    }
    getStepName() {
        return this.stepName;
    }
    toStepDescriptor() {
        var _a;
        const formatted = JSON.parse(JSON.stringify(this.descriptor));
        formatted.actionCode = this.actionCode;
        (_a = formatted.assertions) === null || _a === void 0 ? void 0 : _a.forEach((assertion) => {
            if (!(0, ConditionDescriptor_1.isComparisonType)(assertion.assertion)) {
                throw new Error(`Invalid comparison type: ${assertion.assertion}`);
            }
        });
        return formatted;
    }
    toMablscript() {
        return `${this.getActionCode()}(${(0, domUtil_1.buildStepArgumentString)({
            params: { ...this.descriptor },
            legacy: true,
        })})`;
    }
    getInputVariables() {
        return MablAction_1.MablAction.findUniqueVariableReferencesInValue(this.descriptor);
    }
    getOutputVariables() {
        var _a, _b;
        return (_b = (_a = this.descriptor.variables) === null || _a === void 0 ? void 0 : _a.map((variable) => variable.name)) !== null && _b !== void 0 ? _b : [];
    }
    canContinueOnFailure() {
        var _a, _b;
        return (((_b = (_a = this.descriptor.options) === null || _a === void 0 ? void 0 : _a.onFailure) !== null && _b !== void 0 ? _b : AssertStep_1.OnFailure.FailImmediately) !==
            AssertStep_1.OnFailure.FailImmediately);
    }
    canFailAtEnd() {
        var _a;
        return ((_a = this.descriptor.options) === null || _a === void 0 ? void 0 : _a.onFailure) === AssertStep_1.OnFailure.FailTestAtEnd;
    }
}
exports.AbstractAssertionsAndVariablesStep = AbstractAssertionsAndVariablesStep;
