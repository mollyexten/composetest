"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CLI_MIDDLEWARE = void 0;
const chalk_1 = __importDefault(require("chalk"));
const versionUtil_1 = require("./commands/commandUtil/versionUtil");
const logLineMessaging_1 = require("./core/messaging/logLineMessaging");
const messaging_1 = require("./core/messaging/messaging");
const loggingProvider_1 = require("./providers/logging/loggingProvider");
const analytics_1 = require("./util/analytics");
const pureUtil_1 = require("./util/pureUtil");
const simple_update_notifier_1 = __importDefault(require("simple-update-notifier"));
const cliPackage = require('./package.json');
const UPDATE_CHECK_INTERVAL_MILLISECONDS = 24 * 60 * 60 * 1000;
const MIN_SUPPORTED_NODE_VERSION = (0, versionUtil_1.extractNodeVersionTuple)((_a = cliPackage === null || cliPackage === void 0 ? void 0 : cliPackage.engines) === null || _a === void 0 ? void 0 : _a.node);
exports.CLI_MIDDLEWARE = [
    () => {
        (0, logLineMessaging_1.registerConsoleLoggerForOutput)(messaging_1.mablEventEmitter);
    },
    warnOnUnsupportedNodeVersion,
    async (argv) => (0, analytics_1.trackCliEvent)(argv._, (0, pureUtil_1.extractKeyCountsFromArgs)(argv)),
    runUpdateCheck,
];
function warnOnUnsupportedNodeVersion() {
    const nodeVersion = (0, versionUtil_1.extractNodeVersionTuple)(process.version);
    if ((0, versionUtil_1.compareNodeVersions)(nodeVersion, MIN_SUPPORTED_NODE_VERSION) < 0) {
        loggingProvider_1.logger.info(chalk_1.default.bgYellow.black(`WARNING: Unsupported Node.js detected (`) +
            chalk_1.default.bgYellow.bold.white((0, versionUtil_1.nodeVersionToString)(nodeVersion)) +
            chalk_1.default.bgYellow.black(`). \nmabl-cli functionality may be limited, please update to `) +
            chalk_1.default.bgYellow.bold.white((0, versionUtil_1.nodeVersionToString)(MIN_SUPPORTED_NODE_VERSION)) +
            chalk_1.default.bgYellow.black(' or later.\n'));
    }
}
async function runUpdateCheck() {
    await (0, simple_update_notifier_1.default)({
        pkg: cliPackage,
        updateCheckInterval: UPDATE_CHECK_INTERVAL_MILLISECONDS,
    });
}
